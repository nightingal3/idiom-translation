<HTML><HEAD><META NAME="ROBOTS" CONTENT="NOINDEX, NOFOLLOW">
<script type="text/javascript">
<!--

IE = (navigator.appName == "Microsoft Internet Explorer")

function lookup(e) {
  if(IE){
    range = document.selection.createRange()
    str = range.text
  }else{
    str = document.getSelection()
  }
  code = str.charCodeAt(0)
  if(code >= 0 && code <= 127){
    str = str.replace(/^[^a-zA-Z0-9]+/,"")
    str = str.replace(/[^a-zA-Z0-9]+$/,"")
    if(str != ""){
      win = open("http://dictionary.goo.ne.jp/search.php?MT="+escape(str)+"&kind=&mode=0", "Goo", "width=600,height=400,scrollbars=yes")
      win.focus()
    }
  } 
}
function showLayer(id){ 
    if(document.getElementById){
        document.getElementById(id).style.visibility = 'visible'
    }else if(document.all){
        document.all(id).style.visibility = 'visible'
    }else if(document.layers){
        document.layers[id].visibility = 'show'
    }
}

reJ = new RegExp('J');
reE = new RegExp('E');
function hideLayer(id){
    if(id.match(reJ) && !document.F.CJ.checked) return
    if(id.match(reE) && !document.F.CE.checked) return
    if(document.getElementById){
        document.getElementById(id).style.visibility = 'hidden'
    }else if(document.all){
        document.all(id).style.visibility = 'hidden'
    }else if(document.layers){
        document.layers[id].visibility = 'hidden'
    }
}
function layerIsVisible(id){
    if(document.getElementById){
        return (document.getElementById(id).style.visibility == 'visible')
    }else if(document.all){
        return (document.all(id).style.visibility == 'visible')
    }else if(document.layers){
        return (document.layers[id].visibility == 'show')
    }
}
function toggleLayer(id){
    if(layerIsVisible(id)){
        hideLayer(id)
    }else{
        showLayer(id)
    }
}

function showOrHideE(eng, jp){
    if(document.F.CE.checked){
        hideLayer(eng)
    }else{
        showLayer(jp)
    }
}

function showOrHideJ(jp, eng){
    if(document.F.CJ.checked){
        hideLayer(jp)
    }else{
        showLayer(eng)
    }
}
				

function hasAttribute2(obj, attr){
    if(IE){
        return true
    }else if(document.getElementById){
        return obj.hasAttribute(attr)
    }else{
        return true
    }
}

reTAB = new RegExp("TAB")
function hideJE(str) {
    re = new RegExp(str);
    spans = document.getElementsByTagName("TD")
    for(i=0; i<spans.length; i++){
        if(hasAttribute2(spans[i], "id")){
            id = spans[i].getAttribute("id")
            if(id.match(re)){
	        hideLayer(id)
            }else if(id.match(reTAB) &&
            (document.F.CJ.checked || document.F.CE.checked)){
                spans[i].setAttribute('BGCOLOR', "#FFFFFF")
            }
	}
    }
}
function showJE(str) {
    re = new RegExp(str);
    spans = document.getElementsByTagName("TD")
    for(i=0; i<spans.length; i++){
        if(hasAttribute2(spans[i], "id")){
            id = spans[i].getAttribute("id")
            if(id.match(re)){
	        showLayer(id)
            }else if(id.match(reTAB) &&
            (!document.F.CJ.checked && !document.F.CE.checked)){
                spans[i].setAttribute('BGCOLOR', "#F0F0F0")
	    }
	}
    }
}
function addRules (){
    obj = document.getElementById('TRANSPAIR');
    obj.rules = 'ALL'
    obj.frame = 'BORDER'
}

function removeRules (){
    obj = document.getElementById('TRANSPAIR');
    obj.rules = 'NONE'
    obj.frame = 'VOID'
}

function onoffJ(){
    if (document.F.CJ.checked) {
        hideJE('J');
        addRules();
    }else{
        showJE('J');
        if(!document.F.CE.checked){
            removeRules();
        }
    }
}
function onoffE(){
    if (document.F.CE.checked) {
        hideJE('E');
        addRules();
    }else{
        showJE('E');
        if(!document.F.CJ.checked){
            removeRules();
        }
    }
}
				
// -->
</script>
</HEAD><BODY BGCOLOR=#FFFFFF><div align=right><a href="../data/titles-ja-pages.htm">タイトル順</a>/<a href="../data/authors-pages.htm">著者順</a>/<a href="../data/translators-pages.htm">訳者順</a>/<a href="../index.html">ホーム</a></div><h2>The Cathedral and the Bazaar / Eric Steven Raymond 著</h2><h2>伽藍とバザール / レイモンド、エリック・S  著 / 山形浩生 YAMAGATA Hiroo 訳 訳</h2><p>Annotator: 高橋真弓</p><div align=right><form name="F"><input type="checkbox" name="CE" onclick="onoffE()">英語文を消す <input type="checkbox" name="CJ" onclick="onoffJ()">日本語文を消す <br>(反対側の文を押すと消えた文が出る)</form></div>オリジナル:<a href="../org/bazaare.txt">英語文</a>&<a href="../org/bazaarj.txt">日本語文</a> / <a href="../manual-alignment/bazaar.alm">対訳データ</a> / <a href="#preamble">このページにある対訳文について</a>
<TITLE>5 of The Cathedral and the Bazaar</TITLE>
<hr>
<a href="bazaar-4.htm">prev</a>
<a href="bazaar-0.htm">0</a>
<a href="bazaar-1.htm">1</a>
<a href="bazaar-2.htm">2</a>
<a href="bazaar-3.htm">3</a>
<a href="bazaar-4.htm">4</a>
<5>
<a href="bazaar-6.htm">6</a>
<a href="bazaar-7.htm">7</a>
<a href="bazaar-8.htm">8</a>
<a href="bazaar-9.htm">9</a>
<a href="bazaar-10.htm">10</a>
<a href="bazaar-6.htm">next</a>
<a name="tableBegin"></a><HR><span><TABLE BGCOLOR=#F0F0F0 ID=TRANSPAIR FRAME=VOID RULES=NONE BORDERCOLOR=#000000>
<!-- TRANS_PAIR BEGIN --><TR id="501"><a name="501"><TD id="E501" onclick="javascript:toggleLayer('J501')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> I decided to add the multidrop support partly because some users were clamoring for it,
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J501" onclick="javascript:toggleLayer('E501')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> マルチドロップのサポートを足すことにしたのは、一つには一部のユーザがしつこくせがんだこともある。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="502"><a name="502"><TD id="E502" onclick="javascript:toggleLayer('J502')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> but mostly because I thought it would shake bugs out of the single-drop code by forcing me to deal with addressing in full generality.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J502" onclick="javascript:toggleLayer('E502')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> でも最大の理由は、アドレッシングを最大限に一般化して対応せざるを得なくなることで、シングルドロップのコードのバグを全部ひねりつぶせるだろうと思ったからだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="503"><a name="503"><TD id="E503" onclick="javascript:toggleLayer('J503')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> And so it proved.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J503" onclick="javascript:toggleLayer('E503')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> そしてそれは立派に実証された。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="504"><a name="504"><TD id="E504" onclick="javascript:toggleLayer('J504')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Getting RFC 822 address parsing right took me a remarkably long time, 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J504" onclick="javascript:toggleLayer('E504')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> RFC 822 http://info.internet.isi.edu:80/in-notes/rfc/files/rfc822.txt を解析してきちんと実装するには、えらく長い時間がかかった。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="505"><a name="505"><TD id="E505" onclick="javascript:toggleLayer('J505')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> not because any individual piece of it is hard but because it involved a pile of interdependent and fussy details.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J505" onclick="javascript:toggleLayer('E505')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> これは個別部分が特にむずかしかったからではなく、相互に依存しあった面倒な細部を山ほど片づけなきゃならなかったからだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="506"><a name="506"><TD id="E506" onclick="javascript:toggleLayer('J506')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> But multidrop addressing turned out to be an excellent design decision as well.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J506" onclick="javascript:toggleLayer('E506')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> でもマルチドロップアドレッシングは、ふたをあけてみたらこれまたすばらしい設計上の決定だった。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="507"><a name="507"><TD id="E507" onclick="javascript:toggleLayer('J507')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Here's how I knew:
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J507" onclick="javascript:toggleLayer('E507')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> なぜそう思ったかというと： 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="508"><a name="508"><TD id="E508" onclick="javascript:toggleLayer('J508')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> 14. Any tool should be useful in the expected way, but a truly great tool lends itself to uses you never expected.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J508" onclick="javascript:toggleLayer('E508')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 14. ツールはすべて期待通りの役にたたなきゃダメだが、すごいツールはまったく予想もしなかったような役にもたってしまう。――からだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="509"><a name="509"><TD id="E509" onclick="javascript:toggleLayer('J509')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> The unexpected use for multidrop fetchmail is to run mailing lists with the list kept, and alias expansion done, on the client side of the Internet connection.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J509" onclick="javascript:toggleLayer('E509')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> マルチドロップ fetchmail の予想もしない利用法は、メーリングリストを運用する際に、リストの管理や alias の展開を、SLIP/PPP 接続のクライアント側でできちゃえることだった。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="510"><a name="510"><TD id="E510" onclick="javascript:toggleLayer('J510')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> This means someone running a personal machine through an ISP account can manage a mailing list without continuing access to the ISP's alias files.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J510" onclick="javascript:toggleLayer('E510')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> これはつまり、ISP のアカウント経由で個人マシンを走らせてる人でも、ISP の alias ファイルに絶えずアクセスすることなしにメーリングリストを運用できるってことだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="511"><a name="511"><TD id="E511" onclick="javascript:toggleLayer('J511')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Another important change demanded by my beta-testers was support for 8-bit MIME (Multipurpose Internet Mail Extensions) operation.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J511" onclick="javascript:toggleLayer('E511')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> もう一つ、ベータテスタたちが要求してきた重要な変更は、8 ビット MIME のサポートだった。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="512"><a name="512"><TD id="E512" onclick="javascript:toggleLayer('J512')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> This was pretty easy to do,
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J512" onclick="javascript:toggleLayer('E512')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> これはすごく楽だった。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="513"><a name="513"><TD id="E513" onclick="javascript:toggleLayer('J513')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> because I had been careful to keep the code 8-bit clean
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J513" onclick="javascript:toggleLayer('E513')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ぼくは自分のコードを 8 ビットクリーンにするように心がけてきたからだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="514"><a name="514"><TD id="E514" onclick="javascript:toggleLayer('J514')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> (that is, to not press the 8th bit, unused in the ASCII character set, into service to carry information within the program).
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD ID="TAB514" onclick="javascript:toggleLayer('E514')" BGCOLOR=#F0F0F0 style="visibility : visible">  </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="515"><a name="515"><TD id="E515" onclick="javascript:toggleLayer('J515')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Not because I anticipated the demand for this feature,
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J515" onclick="javascript:toggleLayer('E515')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> これは、こういう機能への要望を予想してたからではない。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="516"><a name="516"><TD id="E516" onclick="javascript:toggleLayer('J516')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> but rather in obedience to another rule:
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J516" onclick="javascript:toggleLayer('E516')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> こんな別のルールに従ったまでのことだった：
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="517"><a name="517"><TD id="E517" onclick="javascript:toggleLayer('J517')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> 15. When writing gateway software of any kind, take pains to disturb the data stream as little as possible
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J517" onclick="javascript:toggleLayer('E517')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 15. ゲートウェイソフトを書くときはいかなる場合でも、データストリームへの干渉は最低限におさえるように必死で努力すること。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="518"><a name="518"><TD id="E518" onclick="javascript:toggleLayer('J518')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> ?and never throw away information unless the recipient forces you to!
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J518" onclick="javascript:toggleLayer('E518')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> そして受け手がわがどうしてもと言わない限り、絶対に情報を捨てないこと！ 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="519"><a name="519"><TD id="E519" onclick="javascript:toggleLayer('J519')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Had I not obeyed this rule, 8-bit MIME support would have been difficult and buggy.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J519" onclick="javascript:toggleLayer('E519')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> この規則を守っていなかったら、8 ビット MIME サポートはむずかしくてバグだらけになっただろう。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="520"><a name="520"><TD id="E520" onclick="javascript:toggleLayer('J520')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> As it was, all I had to do is read the MIME standard (RFC 1652) and add a trivial bit of header-generation logic.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J520" onclick="javascript:toggleLayer('E520')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> でも、ぼくは守っていたので、RFC 1652 http://info.internet.isi.edu:80/in-notes/rfc/files/rfc1652.txtを読んで、ほんのちょっとしたヘッダ生成のロジックを加えるだけですんだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="521"><a name="521"><TD id="E521" onclick="javascript:toggleLayer('J521')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Some European users bugged me into adding an option to limit the number of messages retrieved per session
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J521" onclick="javascript:toggleLayer('E521')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ヨーロッパのユーザの一部は、セッションあたりにとってこられるメッセージ数を制限するオプションをつけるようにしつこくせがんだ
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="522"><a name="522"><TD id="E522" onclick="javascript:toggleLayer('J522')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> (so they can control costs from their expensive phone networks).
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J522" onclick="javascript:toggleLayer('E522')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> （電話代が高いので、それを抑えるためだ）。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="523"><a name="523"><TD id="E523" onclick="javascript:toggleLayer('J523')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> I resisted this for a long time, and I'm still not entirely happy about it.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J523" onclick="javascript:toggleLayer('E523')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ぼくは長いことこれを拒否してきたし、いまでも完全に満足しているとはいいがたい。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="524"><a name="524"><TD id="E524" onclick="javascript:toggleLayer('J524')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> But if you're writing for the world, you have to listen to your customers
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J524" onclick="javascript:toggleLayer('E524')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> でも、世界のために書いているんなら、顧客には耳を傾けなきゃ
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="525"><a name="525"><TD id="E525" onclick="javascript:toggleLayer('J525')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> ?this doesn't change just because they're not paying you in money.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J525" onclick="javascript:toggleLayer('E525')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ――かれらがお金で支払ってるんじゃなくても、これは変わらない。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="526"><a name="526"><TD id="E526" onclick="javascript:toggleLayer('J526')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> A Few More Lessons from Fetchmail 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J526" onclick="javascript:toggleLayer('E526')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 8 続・Fetchmail の教訓
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="527"><a name="527"><TD id="E527" onclick="javascript:toggleLayer('J527')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Before we go back to general software-engineering issues, there are a couple more specific lessons from the fetchmail experience to ponder.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J527" onclick="javascript:toggleLayer('E527')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 一般的なソフトウェア工学の問題に戻る前に、fetchmail の経験からもう少し教訓を引っぱり出して考察しておこう。
 </TD></a></TR><!-- TRANS_PAIR END -->
<TR id="528"><a name="528"><TD ID="TAB528" onclick="javascript:toggleLayer('J528')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD ID="TAB528" onclick="javascript:toggleLayer('E528')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD></a></TR>
<!-- TRANS_PAIR BEGIN --><TR id="529"><a name="529"><TD id="E529" onclick="javascript:toggleLayer('J529')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Nontechnical readers can safely skip this section.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD ID="TAB529" onclick="javascript:toggleLayer('E529')" BGCOLOR=#F0F0F0 style="visibility : visible">  </TD></a></TR><!-- TRANS_PAIR END -->
<TR id="530"><a name="530"><TD ID="TAB530" onclick="javascript:toggleLayer('J530')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD ID="TAB530" onclick="javascript:toggleLayer('E530')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD></a></TR>
<!-- TRANS_PAIR BEGIN --><TR id="531"><a name="531"><TD id="E531" onclick="javascript:toggleLayer('J531')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> The rc (control) file syntax includes optional `noise' keywords that are entirely ignored by the parser.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J531" onclick="javascript:toggleLayer('E531')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> rcファイルの構文は、オプションの「ノイズ」キーワードを持っていて、これはパーサーに完全に無視される。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="532"><a name="532"><TD id="E532" onclick="javascript:toggleLayer('J532')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> The English-like syntax they allow is considerably more readable than the traditional terse keyword-value pairs you get when you strip them all out.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J532" onclick="javascript:toggleLayer('E532')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> このキーワードのおかげで英語に似た構文が使えるようになるので、それを全部はぎとってできるような、従来の無味乾燥なキーワードと値の対応表よりはずっと読みやすくなっている。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="533"><a name="533"><TD id="E533" onclick="javascript:toggleLayer('J533')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> These started out as a late-night experiment
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J533" onclick="javascript:toggleLayer('E533')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> これはそもそも、ある晩遅くにちょっと始めた実験が発端だった。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="534"><a name="534"><TD id="E534" onclick="javascript:toggleLayer('J534')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> when I noticed how much the rc file declarations were beginning to resemble an imperative minilanguage.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J534" onclick="javascript:toggleLayer('E534')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> rc ファイルの宣言が、命令形のミニ言語にずいぶん似てきたのに気がついたのだ
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="535"><a name="535"><TD id="E535" onclick="javascript:toggleLayer('J535')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> (This is also why I changed the original popclient ``server'' keyword to ``poll'').
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J535" onclick="javascript:toggleLayer('E535')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> （そしてこのせいで、もとの popclient のキーワード「サーバ（server）」を「チェックせよ（poll）」に変えた）。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="536"><a name="536"><TD id="E536" onclick="javascript:toggleLayer('J536')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> It seemed to me that trying to make that imperative minilanguage more like English might make it easier to use.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J536" onclick="javascript:toggleLayer('E536')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> この命令形のミニ言語をもっと英語風にしてみたら、使いやすくなりそうだと思った。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="537"><a name="537"><TD id="E537" onclick="javascript:toggleLayer('J537')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Now, although I'm a convinced partisan of the ``make it a language'' school of design as exemplified by Emacs and HTML and many database engines, I am not normally a big fan of ``English-like'' syntaxes.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J537" onclick="javascript:toggleLayer('E537')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> さて、ぼくは Emacs や HTML や各種データベースエンジンに代表される「なんでも言語化せよ」式デザイン派閥の意識的な急進派ではあるけれど、通常は「英語っぽい」構文はふつう、あまり好きじゃない。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="538"><a name="538"><TD id="E538" onclick="javascript:toggleLayer('J538')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Traditionally programmers have tended to favor control syntaxes that are very precise and compact and have no redundancy at all.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J538" onclick="javascript:toggleLayer('E538')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 伝統的にプログラマは、厳密でコンパクトで冗長性のまったくない制御構文を好む傾向にあった。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="539"><a name="539"><TD id="E539" onclick="javascript:toggleLayer('J539')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> This is a cultural legacy from when computing resources were expensive,
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J539" onclick="javascript:toggleLayer('E539')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> これはコンピュータ資源が高価だった時代の文化的な名残だ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="540"><a name="540"><TD id="E540" onclick="javascript:toggleLayer('J540')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> so parsing stages had to be as cheap and simple as possible.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J540" onclick="javascript:toggleLayer('E540')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 当時は構文解析段階は、できる限り安く単純でなきゃならなかったから。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="541"><a name="541"><TD id="E541" onclick="javascript:toggleLayer('J541')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> English, with about 50% redundancy, looked like a very inappropriate model then.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J541" onclick="javascript:toggleLayer('E541')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 英語は 50％くらい冗長性を持っているので、当時はすごく不適切なモデルに見えた。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="542"><a name="542"><TD id="E542" onclick="javascript:toggleLayer('J542')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> This is not my reason for normally avoiding English-like syntaxes;
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J542" onclick="javascript:toggleLayer('E542')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 英語っぽい構文を避けるべき理由としてぼくが挙げたいのはこういうことではない。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="543"><a name="543"><TD id="E543" onclick="javascript:toggleLayer('J543')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> I mention it here only to demolish it.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J543" onclick="javascript:toggleLayer('E543')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ここでこれを挙げたのは、単にそれを却下するためだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="544"><a name="544"><TD id="E544" onclick="javascript:toggleLayer('J544')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> With cheap cycles and core, terseness should not be an end in itself.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J544" onclick="javascript:toggleLayer('E544')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> サイクルやコアが安くなってきたら、無味乾燥がそれ自体で目的化してはならない。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="545"><a name="545"><TD id="E545" onclick="javascript:toggleLayer('J545')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Nowadays it's more important for a language to be convenient for humans than to be cheap for the computer.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J545" onclick="javascript:toggleLayer('E545')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> いまでは、言語はコンピュータにとって安あがりになるよりも、人間にとって便利なほうが大事なのだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="546"><a name="546"><TD id="E546" onclick="javascript:toggleLayer('J546')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> There remain, however, good reasons to be wary.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J546" onclick="javascript:toggleLayer('E546')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> でも、慎重になるべきまともな理由はある。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="547"><a name="547"><TD id="E547" onclick="javascript:toggleLayer('J547')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> One is the complexity cost of the parsing stage
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J547" onclick="javascript:toggleLayer('E547')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 一つは複雑さと、構文解析段階のコストだ
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="548"><a name="548"><TD id="E548" onclick="javascript:toggleLayer('J548')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> ?you don't want to raise that to the point where it's a significant source of bugs and user confusion in itself.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J548" onclick="javascript:toggleLayer('E548')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ――あんまり複雑にすると、それ自体がバグのもとになったりユーザの混乱を招いたりしかねない。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="549"><a name="549"><TD id="E549" onclick="javascript:toggleLayer('J549')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Another is that trying to make a language syntax English-like often demands that the ``English'' it speaks be bent seriously out of shape, so much so that the superficial resemblance to natural language is as confusing as a traditional syntax would have been.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J549" onclick="javascript:toggleLayer('E549')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 別の理由として、言語の構文を英語っぽくしようとすると、しばしばその言語の使う「英語」はとんでもなく歪んだ代物になってしまい、これが高じると、そういうわざとらしい自然言語との類似は伝統的な構文と同じくらい混乱をまねくことになる
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="550"><a name="550"><TD id="E550" onclick="javascript:toggleLayer('J550')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> (You see this bad effect in a lot of so-called ``fourth generation'' and commercial database-query languages.)
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J550" onclick="javascript:toggleLayer('E550')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> （これはいろんな通称 4GL や商業データベースキュエリー言語で見かける）。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="551"><a name="551"><TD id="E551" onclick="javascript:toggleLayer('J551')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> The fetchmail control syntax seems to avoid these problems 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J551" onclick="javascript:toggleLayer('E551')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> Fetchmail の制御構文は、どうやらこういう問題を免れている。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="552"><a name="552"><TD id="E552" onclick="javascript:toggleLayer('J552')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> because the language domain is extremely restricted.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J552" onclick="javascript:toggleLayer('E552')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> それは、言語ドメインがすごく制限されているからだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="553"><a name="553"><TD id="E553" onclick="javascript:toggleLayer('J553')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> It's nowhere near a general-purpose language;
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J553" onclick="javascript:toggleLayer('E553')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 汎用言語にはほど遠い。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="554"><a name="554"><TD id="E554" onclick="javascript:toggleLayer('J554')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> the things it says simply are not very complicated, so there's little potential for confusion in moving mentally between a tiny subset of English and the actual control language.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J554" onclick="javascript:toggleLayer('E554')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> それが表現していることは、とにかく大して複雑ではないので、英語の小さなサブセットと実際の制御言語の間を行き来するのに、精神的な混乱を起こす可能性があまりない。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="555"><a name="555"><TD id="E555" onclick="javascript:toggleLayer('J555')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> I think there may be a broader lesson here:
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J555" onclick="javascript:toggleLayer('E555')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ここにはもっと広い教訓があるかもしれない。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="556"><a name="556"><TD id="E556" onclick="javascript:toggleLayer('J556')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> 16. When your language is nowhere near Turing-complete, syntactic sugar can be your friend.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J556" onclick="javascript:toggleLayer('E556')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 16. 自分の言語がチューリング的完成からほど遠い場合には、構文上の甘さを許すといろいろ楽になるかもね。 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="557"><a name="557"><TD id="E557" onclick="javascript:toggleLayer('J557')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Another lesson is about security by obscurity.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J557" onclick="javascript:toggleLayer('E557')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 別の教訓は、隠すことでセキュリティを高めるという点についてのものだった。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="558"><a name="558"><TD id="E558" onclick="javascript:toggleLayer('J558')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Some fetchmail users asked me to change the software to store passwords encrypted in the rc file, 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J558" onclick="javascript:toggleLayer('E558')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> Fetchmail ユーザの一部は、ソフトの仕様を変えて、パスワードを暗号化して rc ファイルに保存するようにしてくれと要求してきた。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="559"><a name="559"><TD id="E559" onclick="javascript:toggleLayer('J559')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> so snoopers wouldn't be able to casually see them.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J559" onclick="javascript:toggleLayer('E559')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> のぞき屋たちが気軽にそれをのぞいたりできないようにしてほしいから、と言って。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="560"><a name="560"><TD id="E560" onclick="javascript:toggleLayer('J560')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> I didn't do it, 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J560" onclick="javascript:toggleLayer('E560')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> これはやらなかった。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="561"><a name="561"><TD id="E561" onclick="javascript:toggleLayer('J561')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> because this doesn't actually add protection.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J561" onclick="javascript:toggleLayer('E561')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> これでは実は、セキュリティはぜんぜん高まらないからだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="562"><a name="562"><TD id="E562" onclick="javascript:toggleLayer('J562')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Anyone who's acquired permissions to read your rc file will be able to run fetchmail as you anyway
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J562" onclick="javascript:toggleLayer('E562')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> rc ファイルを読む許可を与えられている人間なら、だれでも fetchmail をどのみちあなたと同じように好き勝手に動かせてしまうんだから
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="563"><a name="563"><TD id="E563" onclick="javascript:toggleLayer('J563')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> ?and if it's your password they're after, they'd be able to rip the necessary decoder out of the fetchmail code itself to get it.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J563" onclick="javascript:toggleLayer('E563')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ――そしてそいつがあなたのパスワード目当てなら、fetchmail のコードそのものから必要なデコーダをぬきだして、ファイルを解読して盗むことができてしまう。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="564"><a name="564"><TD id="E564" onclick="javascript:toggleLayer('J564')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> All .fetchmailrc password encryption would have done is give a false sense of security to people who don't think very hard.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J564" onclick="javascript:toggleLayer('E564')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> だから .fetchmailrc パスワード暗号化なんかしても、ものごとをつきつめて考えない人たちに、セキュリティが高まったかのようなまちがった幻想を与えるだけだ。a
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="565"><a name="565"><TD id="E565" onclick="javascript:toggleLayer('J565')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> The general rule here is:
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J565" onclick="javascript:toggleLayer('E565')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ここでの一般原則は以下の通り：
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="566"><a name="566"><TD id="E566" onclick="javascript:toggleLayer('J566')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> 17. A security system is only as secure as its secret. 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J566" onclick="javascript:toggleLayer('E566')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 17. セキュリティシステムのセキュリティは、そこで使われてる秘密の安全性にかかっている。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="567"><a name="567"><TD id="E567" onclick="javascript:toggleLayer('J567')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Beware of pseudo-secrets.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J567" onclick="javascript:toggleLayer('E567')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 見かけだけの秘密は要注意。 
 </TD></a></TR><!-- TRANS_PAIR END -->
<TR id="568"><a name="568"><TD ID="TAB568" onclick="javascript:toggleLayer('J568')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD ID="TAB568" onclick="javascript:toggleLayer('E568')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD></a></TR>
<!-- TRANS_PAIR BEGIN --><TR id="569"><a name="569"><TD id="E569" onclick="javascript:toggleLayer('J569')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Necessary Preconditions for the Bazaar Style
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J569" onclick="javascript:toggleLayer('E569')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 9 バザール方式の前提条件とは
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="570"><a name="570"><TD id="E570" onclick="javascript:toggleLayer('J570')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Early reviewers and test audiences for this essay consistently raised questions about the preconditions for successful bazaar-style development, 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J570" onclick="javascript:toggleLayer('E570')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> この論文の初期レビューアーや、試験読者たちがたえず返してきた質問というのは、上手なバザール形式の開発に必要な条件は何か、というものだった。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="571"><a name="571"><TD id="E571" onclick="javascript:toggleLayer('J571')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> including both the qualifications of the project leader and the state of code at the time one goes public and starts to try to build a co-developer community.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J571" onclick="javascript:toggleLayer('E571')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> これはプロジェクトリーダーの資質と、共同開発者コミュニティをつくろうとしてコードを公開する時点での、コードの状態についての条件の両方についてのものだった。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="572"><a name="572"><TD id="E572" onclick="javascript:toggleLayer('J572')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> It's fairly clear that one cannot code from the ground up in bazaar style [IN].
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J572" onclick="javascript:toggleLayer('E572')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> バザール形式で最初からコードを書くのが無理だというのは、まあはっきりしているだろう。[IN] 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="573"><a name="573"><TD id="E573" onclick="javascript:toggleLayer('J573')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> One can test, debug and improve in bazaar style, but it would be very hard to originate a project in bazaar mode.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J573" onclick="javascript:toggleLayer('E573')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> バザール形式でテストしたりデバッグしたり改善したりはできるけれど、プロジェクトを最初からバザール式で始めるのはすごくむずかしいだろう。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="574"><a name="574"><TD id="E574" onclick="javascript:toggleLayer('J574')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Linus didn't try it.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J574" onclick="javascript:toggleLayer('E574')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> リーヌスはそんなことはしなかったし、
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="575"><a name="575"><TD id="E575" onclick="javascript:toggleLayer('J575')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> I didn't either.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J575" onclick="javascript:toggleLayer('E575')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ぼくもしなかった。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="576"><a name="576"><TD id="E576" onclick="javascript:toggleLayer('J576')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Your nascent developer community needs to have something runnable and testable to play with.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J576" onclick="javascript:toggleLayer('E576')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> あなたが生み出そうとしてる開発者コミュニティは、いじるために何か動いてテストできるものを必要としているんだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="577"><a name="577"><TD id="E577" onclick="javascript:toggleLayer('J577')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> When you start community-building, what you need to be able to present is a plausible promise.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J577" onclick="javascript:toggleLayer('E577')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> コミュニティ形成を始めるときには、まずなによりも実現できそうな見込みを示せなきゃならない。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="578"><a name="578"><TD id="E578" onclick="javascript:toggleLayer('J578')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Your program doesn't have to work particularly well.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J578" onclick="javascript:toggleLayer('E578')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 別にそのソフトは特によく書けてなくてもいい。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="579"><a name="579"><TD id="E579" onclick="javascript:toggleLayer('J579')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> It can be crude, buggy, incomplete, and poorly documented.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J579" onclick="javascript:toggleLayer('E579')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 雑で、バグだらけで、不完全で、ドキュメント皆無でもいい。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="580"><a name="580"><TD id="E580" onclick="javascript:toggleLayer('J580')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> What it must not fail to do is (a) run, and (b) convince potential co-developers that it can be evolved into something really neat in the foreseeable future.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J580" onclick="javascript:toggleLayer('E580')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> でも絶対不可欠なのが、開発者候補たちに、それが目に見える将来にはなにか本当に使える代物に発展させられると説得できることだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="581"><a name="581"><TD id="E581" onclick="javascript:toggleLayer('J581')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Linux and fetchmail both went public with strong, attractive basic designs.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J581" onclick="javascript:toggleLayer('E581')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> Linux と fetchmail は、どちらも強力で魅力的な基本デザインをもって公開された。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="582"><a name="582"><TD id="E582" onclick="javascript:toggleLayer('J582')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Many people thinking about the bazaar model as I have presented it have correctly considered this critical, then jumped from that to the conclusion that a high degree of design intuition and cleverness in the project leader is indispensable.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J582" onclick="javascript:toggleLayer('E582')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ぼくが提出したバザールモデルについて考えてきた人の多くは、これがきわめて重要だということを正しく認識し、そこからいきなり、だったらプロジェクトリーダーには高度なデザイン上の直感と才能が必要にちがいないという結論に一足飛びにとびついてしまった。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="583"><a name="583"><TD id="E583" onclick="javascript:toggleLayer('J583')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> But Linus got his design from Unix.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J583" onclick="javascript:toggleLayer('E583')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> でもリーヌスはデザインを Unix からもらってる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="584"><a name="584"><TD id="E584" onclick="javascript:toggleLayer('J584')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> I got mine initially from the ancestral popclient
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J584" onclick="javascript:toggleLayer('E584')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ぼくはもともと先祖の popmail からアイデアを得てる
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="585"><a name="585"><TD id="E585" onclick="javascript:toggleLayer('J585')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> (though it would later change a great deal,
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J585" onclick="javascript:toggleLayer('E585')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> （もっともそれは後に大きく変わった。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="586"><a name="586"><TD id="E586" onclick="javascript:toggleLayer('J586')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> much more proportionately speaking than has Linux).
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J586" onclick="javascript:toggleLayer('E586')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 割合から言えば Linux よりはずっと大きな変化だ）。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="587"><a name="587"><TD id="E587" onclick="javascript:toggleLayer('J587')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> So does the leader/coordinator for a bazaar-style effort really have to have exceptional design talent, or can he get by through leveraging the design talent of others?
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J587" onclick="javascript:toggleLayer('E587')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ということは、バザール形式のリーダー/コーディネーターはずばぬけたデザインの才能が本当にいるんだろうか、それとも他人のデザインの才能をうまく生かすだけでやっていけるんだろうか。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="588"><a name="588"><TD id="E588" onclick="javascript:toggleLayer('J588')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> I think it is not critical that the coordinator be able to originate designs of exceptional brilliance,
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J588" onclick="javascript:toggleLayer('E588')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> コーディネーターが、とてつもないデザイン上のひらめきを自分で得る必要性は必ずしもないと思う。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="589"><a name="589"><TD id="E589" onclick="javascript:toggleLayer('J589')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> but it is absolutely critical that the coordinator be able to recognize good design ideas from others.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J589" onclick="javascript:toggleLayer('E589')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> でも、絶対に必要なのは、その人物がほかの人たちのよいデザイン上のアイデアを認識できるということだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="590"><a name="590"><TD id="E590" onclick="javascript:toggleLayer('J590')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Both the Linux and fetchmail projects show evidence of this.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J590" onclick="javascript:toggleLayer('E590')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> Linux も fetchmail も、この証拠を示している。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="591"><a name="591"><TD id="E591" onclick="javascript:toggleLayer('J591')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Linus, while not (as previously discussed) a spectacularly original designer, has displayed a powerful knack for recognizing good design and integrating it into the Linux kernel.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J591" onclick="javascript:toggleLayer('E591')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> リーヌスは（すでに述べた通り）、驚異的に独創的な設計者ではないけれど、よいデザインを認識してそれを Linux カーネルに組み込む強力な第六感を示した。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="592"><a name="592"><TD id="E592" onclick="javascript:toggleLayer('J592')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> And I have already described how the single most powerful design idea in fetchmail (SMTP forwarding) came from somebody else.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J592" onclick="javascript:toggleLayer('E592')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> そしてすでに述べたように、fetchmail 最大の強力なデザインアイデア（SMTP 転送）は他人にもらったものだった。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="593"><a name="593"><TD id="E593" onclick="javascript:toggleLayer('J593')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Early audiences of this essay complimented me by suggesting that I am prone to undervalue design originality in bazaar projects because I have a lot of it myself, and therefore take it for granted.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J593" onclick="javascript:toggleLayer('E593')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> この論文を早い時期に読んだ人たちは、おまえはバザールプロジェクトでのデザイン上の独創性を過小評価している、自分にはいろいろアイデアがあるもんだから、それが当然のことだと思ってるんだろう、と誉めてくれた。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="594"><a name="594"><TD id="E594" onclick="javascript:toggleLayer('J594')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> There may be some truth to this;
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J594" onclick="javascript:toggleLayer('E594')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 確かにこれは一理ある。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="595"><a name="595"><TD id="E595" onclick="javascript:toggleLayer('J595')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> design (as opposed to coding or debugging) is certainly my strongest skill.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J595" onclick="javascript:toggleLayer('E595')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ぼくの最大の強みは確かに、コーディングやデバッグではなく、デザイン能力にある。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="596"><a name="596"><TD id="E596" onclick="javascript:toggleLayer('J596')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> But the problem with being clever and original in software design is that it gets to be a habit
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J596" onclick="javascript:toggleLayer('E596')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> でもソフトの設計で、小利口で独創的になることの問題点は、それが習慣になってしまうことだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="597"><a name="597"><TD id="E597" onclick="javascript:toggleLayer('J597')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> ?you start reflexively making things cute and complicated when you should be keeping them robust and simple.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J597" onclick="javascript:toggleLayer('E597')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ソフトは堅牢でシンプルにしておかなきゃダメなのに、反射的にそれを媚びた複雑なものにしてしまいがちになる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="598"><a name="598"><TD id="E598" onclick="javascript:toggleLayer('J598')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> I have had projects crash on me because I made this mistake,
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J598" onclick="javascript:toggleLayer('E598')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> このまちがいのおかげでつぶれたプロジェクトもいくつかある。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="599"><a name="599"><TD id="E599" onclick="javascript:toggleLayer('J599')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> but I managed to avoid this with fetchmail.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J599" onclick="javascript:toggleLayer('E599')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> でも、fetchmail ではそういうことにならずにすんだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="600"><a name="600"><TD id="E600" onclick="javascript:toggleLayer('J600')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> So I believe the fetchmail project succeeded partly because I restrained my tendency to be clever;
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J600" onclick="javascript:toggleLayer('E600')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> だから fetchmail プロジェクトが成功したのは、一部はぼくが小利口になりがちな自分の性格を抑えたからだと思う。
 </TD></a></TR><!-- TRANS_PAIR END -->
</TABLE></span><HR>
<a href="bazaar-4.htm">prev</a>
<a href="bazaar-0.htm">0</a>
<a href="bazaar-1.htm">1</a>
<a href="bazaar-2.htm">2</a>
<a href="bazaar-3.htm">3</a>
<a href="bazaar-4.htm">4</a>
<5>
<a href="bazaar-6.htm">6</a>
<a href="bazaar-7.htm">7</a>
<a href="bazaar-8.htm">8</a>
<a href="bazaar-9.htm">9</a>
<a href="bazaar-10.htm">10</a>
<a href="bazaar-6.htm">next</a>
<hr>

<h2><a name="preamble">このページにある対訳文について</a></h2>このページの対訳文は，再配布可能な作品（<a href="http://www.gutenberg.org/">Project Gutenberg</a> や<a href="http://www.aozora.gr.jp/">青空文庫</a>や<a href="http://www.genpaku.org/">プロジェクト杉田玄白</a>などの作品）について，日本語文と英語文とを対応付けたものの一つです．その他の対訳作品やダウンロードや著作権などについては，<a href="../index.html">日英対訳文対応付けデータのホームページ</a>を見て下さい．また，オリジナルの日英作品の著作権についてはオリジナルの日本語文および英語文の著作権を見て下さい．なお，著作権上の問題がある作品については，情報通信研究機構自然言語グループ内山将夫（ｍｕｔｉｙａｍａ あっとまーく ｎｉｃｔ どっと ｇｏ どっと ｊｐ）まで連絡していただければ，それらについては削除します．<h3>関連ページ</h3><ul><li>オリジナルの英語文: <a href="../org/bazaare.txt">local copy</a> / <a href="http://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/">http://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/</a><li>オリジナルの日本語文: <a href="../org/bazaarj.txt">local copy</a> / <a href="http://cruel.org/freeware/cathedral.html">http://cruel.org/freeware/cathedral.html</a><li><a href="../manual-alignment/bazaar.alm">対訳データ</a></ul><p>
<script type="text/javascript">
<!--
document.F.CE.checked = false
document.F.CJ.checked = false
// -->
</script>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
</BODY></HTML>

