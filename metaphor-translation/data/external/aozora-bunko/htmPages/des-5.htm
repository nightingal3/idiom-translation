<HTML><HEAD><META NAME="ROBOTS" CONTENT="NOINDEX, NOFOLLOW">
<script type="text/javascript">
<!--

IE = (navigator.appName == "Microsoft Internet Explorer")

function lookup(e) {
  if(IE){
    range = document.selection.createRange()
    str = range.text
  }else{
    str = document.getSelection()
  }
  code = str.charCodeAt(0)
  if(code >= 0 && code <= 127){
    str = str.replace(/^[^a-zA-Z0-9]+/,"")
    str = str.replace(/[^a-zA-Z0-9]+$/,"")
    if(str != ""){
      win = open("http://dictionary.goo.ne.jp/search.php?MT="+escape(str)+"&kind=&mode=0", "Goo", "width=600,height=400,scrollbars=yes")
      win.focus()
    }
  } 
}
function showLayer(id){ 
    if(document.getElementById){
        document.getElementById(id).style.visibility = 'visible'
    }else if(document.all){
        document.all(id).style.visibility = 'visible'
    }else if(document.layers){
        document.layers[id].visibility = 'show'
    }
}

reJ = new RegExp('J');
reE = new RegExp('E');
function hideLayer(id){
    if(id.match(reJ) && !document.F.CJ.checked) return
    if(id.match(reE) && !document.F.CE.checked) return
    if(document.getElementById){
        document.getElementById(id).style.visibility = 'hidden'
    }else if(document.all){
        document.all(id).style.visibility = 'hidden'
    }else if(document.layers){
        document.layers[id].visibility = 'hidden'
    }
}
function layerIsVisible(id){
    if(document.getElementById){
        return (document.getElementById(id).style.visibility == 'visible')
    }else if(document.all){
        return (document.all(id).style.visibility == 'visible')
    }else if(document.layers){
        return (document.layers[id].visibility == 'show')
    }
}
function toggleLayer(id){
    if(layerIsVisible(id)){
        hideLayer(id)
    }else{
        showLayer(id)
    }
}

function showOrHideE(eng, jp){
    if(document.F.CE.checked){
        hideLayer(eng)
    }else{
        showLayer(jp)
    }
}

function showOrHideJ(jp, eng){
    if(document.F.CJ.checked){
        hideLayer(jp)
    }else{
        showLayer(eng)
    }
}
				

function hasAttribute2(obj, attr){
    if(IE){
        return true
    }else if(document.getElementById){
        return obj.hasAttribute(attr)
    }else{
        return true
    }
}

reTAB = new RegExp("TAB")
function hideJE(str) {
    re = new RegExp(str);
    spans = document.getElementsByTagName("TD")
    for(i=0; i<spans.length; i++){
        if(hasAttribute2(spans[i], "id")){
            id = spans[i].getAttribute("id")
            if(id.match(re)){
	        hideLayer(id)
            }else if(id.match(reTAB) &&
            (document.F.CJ.checked || document.F.CE.checked)){
                spans[i].setAttribute('BGCOLOR', "#FFFFFF")
            }
	}
    }
}
function showJE(str) {
    re = new RegExp(str);
    spans = document.getElementsByTagName("TD")
    for(i=0; i<spans.length; i++){
        if(hasAttribute2(spans[i], "id")){
            id = spans[i].getAttribute("id")
            if(id.match(re)){
	        showLayer(id)
            }else if(id.match(reTAB) &&
            (!document.F.CJ.checked && !document.F.CE.checked)){
                spans[i].setAttribute('BGCOLOR', "#F0F0F0")
	    }
	}
    }
}
function addRules (){
    obj = document.getElementById('TRANSPAIR');
    obj.rules = 'ALL'
    obj.frame = 'BORDER'
}

function removeRules (){
    obj = document.getElementById('TRANSPAIR');
    obj.rules = 'NONE'
    obj.frame = 'VOID'
}

function onoffJ(){
    if (document.F.CJ.checked) {
        hideJE('J');
        addRules();
    }else{
        showJE('J');
        if(!document.F.CE.checked){
            removeRules();
        }
    }
}
function onoffE(){
    if (document.F.CE.checked) {
        hideJE('E');
        addRules();
    }else{
        showJE('E');
        if(!document.F.CJ.checked){
            removeRules();
        }
    }
}
				
// -->
</script>
</HEAD><BODY BGCOLOR=#FFFFFF><div align=right><a href="../data/titles-ja-pages.htm">タイトル順</a>/<a href="../data/authors-pages.htm">著者順</a>/<a href="../data/translators-pages.htm">訳者順</a>/<a href="../index.html">ホーム</a></div><h2>Cracking DES: Secrets of Encryption Research, Wiretap Politics, and Chip Design / Electronic Frontier Foundation 著</h2><h2>DESのクラック：暗号研究と盗聴政策、チップ設計の秘密  / ELECTRONIC FRONTIER FOUNDATION 著 / 山形浩生 訳</h2><p>Annotator: 高橋真弓</p><div align=right><form name="F"><input type="checkbox" name="CE" onclick="onoffE()">英語文を消す <input type="checkbox" name="CJ" onclick="onoffJ()">日本語文を消す <br>(反対側の文を押すと消えた文が出る)</form></div>オリジナル:<a href="../org/dese.txt">英語文</a>&<a href="../org/desj.txt">日本語文</a> / <a href="../manual-alignment/des.alm">対訳データ</a> / <a href="#preamble">このページにある対訳文について</a>
<TITLE>5 of Cracking DES: Secrets of Encryption Research, Wiretap Politics, and Chip Design</TITLE>
<hr>
<a href="des-4.htm">prev</a>
<a href="des-0.htm">0</a>
<a href="des-1.htm">1</a>
<a href="des-2.htm">2</a>
<a href="des-3.htm">3</a>
<a href="des-4.htm">4</a>
<5>
<a href="des-6.htm">6</a>
<a href="des-7.htm">7</a>
<a href="des-8.htm">8</a>
<a href="des-9.htm">9</a>
<a href="des-10.htm">10</a>
<a href="des-11.htm">11</a>
<a href="des-12.htm">12</a>
<a href="des-13.htm">13</a>
<a href="des-14.htm">14</a>
<a href="des-15.htm">15</a>
<a href="des-16.htm">16</a>
<a href="des-17.htm">17</a>
<a href="des-18.htm">18</a>
<a href="des-19.htm">19</a>
<a href="des-20.htm">20</a>
<a href="des-6.htm">next</a>
<a name="tableBegin"></a><HR><span><TABLE BGCOLOR=#F0F0F0 ID=TRANSPAIR FRAME=VOID RULES=NONE BORDERCOLOR=#000000>
<!-- TRANS_PAIR BEGIN --><TR id="501"><a name="501"><TD id="E501" onclick="javascript:toggleLayer('J501')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> As long as there is a small bit of software to coordinate the effort, the problem of searching for a DES key is "highly parallelizable".
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J501" onclick="javascript:toggleLayer('E501')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ちょっとのソフトで協調させるだけで、DESキーの探索問題は「高度に並列処理可能（highly parallelizable)」である。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="502"><a name="502"><TD id="E502" onclick="javascript:toggleLayer('J502')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> This means the problem can be usefully solved by many machines working in parallel, simultaneously.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J502" onclick="javascript:toggleLayer('E502')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> つまり、たくさんのマシンを同時に動かすことで、問題を効率よく解決できるということだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="503"><a name="503"><TD id="E503" onclick="javascript:toggleLayer('J503')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> For example, a single DES-Cracker chip could find a key by searching for many years.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J503" onclick="javascript:toggleLayer('E503')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> たとえば、DESクラッカーチップ一つでなら、鍵を探すのに何年もかかる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="504"><a name="504"><TD id="E504" onclick="javascript:toggleLayer('J504')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> A thousand DES-Cracker chips can solve the same problem in one thousandth of the time.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J504" onclick="javascript:toggleLayer('E504')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> DESチップを千個使えば、同じ問題を千分の一の時間で解決できる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="505"><a name="505"><TD id="E505" onclick="javascript:toggleLayer('J505')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> A million DES-Cracker chips could theoretically solve the same problem in about a millionth of the time,
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J505" onclick="javascript:toggleLayer('E505')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> DESチップが100万個あれば、理論的には同じ問題が100万分の一の時間で解決できる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="506"><a name="506"><TD id="E506" onclick="javascript:toggleLayer('J506')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> though the overhead of starting each chip would become visible in the time required.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J506" onclick="javascript:toggleLayer('E506')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ただしこの場合には、各チップをスタートさせるときのオーバーヘッドが必要時間にきいてきてしまうだろう。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="507"><a name="507"><TD id="E507" onclick="javascript:toggleLayer('J507')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> The actual machine we built contains 1536 chips. 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J507" onclick="javascript:toggleLayer('E507')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> われわれの作った実際のマシンは、チップ1536個を使っている。 
 </TD></a></TR><!-- TRANS_PAIR END -->
<TR id="508"><a name="508"><TD ID="TAB508" onclick="javascript:toggleLayer('J508')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD ID="TAB508" onclick="javascript:toggleLayer('E508')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD></a></TR>
<!-- TRANS_PAIR BEGIN --><TR id="509"><a name="509"><TD id="E509" onclick="javascript:toggleLayer('J509')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> 1-10 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J509" onclick="javascript:toggleLayer('E509')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 1-10 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="510"><a name="510"><TD id="E510" onclick="javascript:toggleLayer('J510')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> When conducting a brute-force search, the obvious thing to do is to try every possible key, but there are some subtleties.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J510" onclick="javascript:toggleLayer('E510')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ばか力式の探索を行うときには、もちろん鍵をかたっぱしから探していくことになるわけだが、多少のコツはある。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="511"><a name="511"><TD id="E511" onclick="javascript:toggleLayer('J511')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> You can try the keys in any order.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J511" onclick="javascript:toggleLayer('E511')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> キーはどんな順番で探してもいい。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="512"><a name="512"><TD id="E512" onclick="javascript:toggleLayer('J512')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> If you think the key isn't randomly selected, start with likely ones. 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J512" onclick="javascript:toggleLayer('E512')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> もしキーがランダムではないと思ったら、可能性の高そうなものから試していくといい。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="513"><a name="513"><TD id="E513" onclick="javascript:toggleLayer('J513')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> When you finally find the right key, you can stop;
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J513" onclick="javascript:toggleLayer('E513')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 正しいキーがみつかれば、そこで止めればいい。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="514"><a name="514"><TD id="E514" onclick="javascript:toggleLayer('J514')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> you don't have to try all the rest of the keys.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J514" onclick="javascript:toggleLayer('E514')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 残りはためさなくていい。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="515"><a name="515"><TD id="E515" onclick="javascript:toggleLayer('J515')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> You might find it in the first million tries;
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J515" onclick="javascript:toggleLayer('E515')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 最初の百万回で見つかるかもしれないし、
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="516"><a name="516"><TD id="E516" onclick="javascript:toggleLayer('J516')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> you might find it in the last million tries.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J516" onclick="javascript:toggleLayer('E516')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 最後の百万回でみつかるかもしれない。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="517"><a name="517"><TD id="E517" onclick="javascript:toggleLayer('J517')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> On average, you find it halfway through 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J517" onclick="javascript:toggleLayer('E517')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 平均では、道半ばで見つかることになる
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="518"><a name="518"><TD id="E518" onclick="javascript:toggleLayer('J518')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> (after trying half the keys).
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J518" onclick="javascript:toggleLayer('E518')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> （つまり可能な鍵を半分までためしたところで）。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="519"><a name="519"><TD id="E519" onclick="javascript:toggleLayer('J519')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> As a result, the timings for brute-force searches are generally given as the average time to find a key.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J519" onclick="javascript:toggleLayer('E519')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> だから、バカ力方式の所要時間は、ふつうは鍵をみつける平均時間で示される。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="520"><a name="520"><TD id="E520" onclick="javascript:toggleLayer('J520')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> The maximum time is double the average time. 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J520" onclick="javascript:toggleLayer('E520')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 最大必要時間は、平均時間の二倍だ。 
 </TD></a></TR><!-- TRANS_PAIR END -->
<TR id="521"><a name="521"><TD ID="TAB521" onclick="javascript:toggleLayer('J521')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD ID="TAB521" onclick="javascript:toggleLayer('E521')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD></a></TR>
<!-- TRANS_PAIR BEGIN --><TR id="522"><a name="522"><TD id="E522" onclick="javascript:toggleLayer('J522')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Search units 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J522" onclick="javascript:toggleLayer('E522')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 探索ユニット（search unit） 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="523"><a name="523"><TD id="E523" onclick="javascript:toggleLayer('J523')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> The search unit is the heart of the EFF DES Cracker;
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J523" onclick="javascript:toggleLayer('E523')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> EFF DESクラッカーの核となるのは、探索ユニットだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="524"><a name="524"><TD id="E524" onclick="javascript:toggleLayer('J524')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> it contains thousands of them. 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J524" onclick="javascript:toggleLayer('E524')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> DESクラッカーには探索ユニットが何千も入っている。 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="525"><a name="525"><TD id="E525" onclick="javascript:toggleLayer('J525')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> A search unit is a small piece of hardware that takes a key and two 64-bit blocks of ciphertext.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J525" onclick="javascript:toggleLayer('E525')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 探索ユニットは小さなハードウェアで、鍵と暗号文の64ビットブロックを2つとってくる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="526"><a name="526"><TD id="E526" onclick="javascript:toggleLayer('J526')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> It decrypts a block of ciphertext with the key, and checks to see if the resulting block of plaintext is "interesting".
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J526" onclick="javascript:toggleLayer('E526')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> その暗号文を鍵で復号してみて、でてきた結果が「おもしろい」かどうかを調べる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="527"><a name="527"><TD id="E527" onclick="javascript:toggleLayer('J527')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> If not, it adds 1 to the key and repeats, searching its way through the key space. 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J527" onclick="javascript:toggleLayer('E527')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> おもしろくなければ、鍵に1を足して同じことを繰り返し、鍵空間をずっと探していく。 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="528"><a name="528"><TD id="E528" onclick="javascript:toggleLayer('J528')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> If the first decryption produces an "interesting" result, the same key is used to decrypt the second block of ciphertext.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J528" onclick="javascript:toggleLayer('E528')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> もしこの最初の復号が「おもしろい」結果をうみだせば、同じ鍵で暗号文の次のブロックを復号してみる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="529"><a name="529"><TD id="E529" onclick="javascript:toggleLayer('J529')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> If both are interesting, the search unit stops and tells the software that it has found an interesting key.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J529" onclick="javascript:toggleLayer('E529')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> もしどっちの結果もおもしろければ、探索ユニットは止まって、ソフトに対しておもしろい鍵を見つけたよ、と連絡する。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="530"><a name="530"><TD id="E530" onclick="javascript:toggleLayer('J530')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> If the second block's decryption is uninteresting, the search unit adds one to the key and goes on searching the key space. 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J530" onclick="javascript:toggleLayer('E530')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 二番目のブロックの復号結果がおもしろくなければ、探索ユニットはまた鍵に1を足して、鍵空間の探索を続ける。 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="531"><a name="531"><TD id="E531" onclick="javascript:toggleLayer('J531')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> When a search unit stops after finding an interesting result, software on the host computer must examine the result, and determine whether it's the real answer, or just a "false positive".
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J531" onclick="javascript:toggleLayer('E531')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> おもしろい結果をみつけて探索ユニットが止まったら、ホストのコンピュータは結果を検討して、それが本物の答えか、それともただの「もっともらしいもの」かどうかを検討しなくてはならない。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="532"><a name="532"><TD id="E532" onclick="javascript:toggleLayer('J532')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> A false positive is a plaintext that looked interesting to the hardware, but which actually isn't a solution to the problem.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J532" onclick="javascript:toggleLayer('E532')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> もっともらしいものというのは、ハードが見たらおもしろそうに見えたけれど、実際には問題の答えではない平文のことだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="533"><a name="533"><TD id="E533" onclick="javascript:toggleLayer('J533')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> The hardware is designed to produce some proportion of false positives along with the real solution.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J533" onclick="javascript:toggleLayer('E533')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ハードウェアは、本物の答えとならんで、ある程度はもっともらしいだけの結果を出してくるように設計されている。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="534"><a name="534"><TD id="E534" onclick="javascript:toggleLayer('J534')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> (The job of the hardware isn't to find the answer, but to eliminate the vast majority of the non-answers.)
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J534" onclick="javascript:toggleLayer('E534')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> （ハードウェアの仕事は、答えを見つけることではなくて、絶対に答えではない大半のものを排除することだ）。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="535"><a name="535"><TD id="E535" onclick="javascript:toggleLayer('J535')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> As long as the false positives don't occur so rapidly that they overwhelm the software's ability to check and reject them, they don't hurt, and they simplify the hardware and allow it to be more general-purpose.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J535" onclick="javascript:toggleLayer('E535')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> もっともらしいものがたくさん出てきすぎて、ソフトがそれをチェックしてはねられなくなると困るけれど、そうでなければもっともらしいものがあっても別にかまわないし、それを許せばハードも簡単になって、汎用性が高くなる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="536"><a name="536"><TD id="E536" onclick="javascript:toggleLayer('J536')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> For the kinds of problems that we're trying to solve, the hardware is designed to waste less than 1% of the search time on false positives.  
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J536" onclick="javascript:toggleLayer('E536')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> われわれが解こうとしているような問題では、ハードがもっともらしいもので無駄にする時間は、探索時間の1％以下になるよう設計されている。
 </TD></a></TR><!-- TRANS_PAIR END -->
<TR id="537"><a name="537"><TD ID="TAB537" onclick="javascript:toggleLayer('J537')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD ID="TAB537" onclick="javascript:toggleLayer('E537')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD></a></TR>
<!-- TRANS_PAIR BEGIN --><TR id="538"><a name="538"><TD id="E538" onclick="javascript:toggleLayer('J538')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> 1-11 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J538" onclick="javascript:toggleLayer('E538')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 1-11 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="539"><a name="539"><TD id="E539" onclick="javascript:toggleLayer('J539')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Recognizing interesting plaintext 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J539" onclick="javascript:toggleLayer('E539')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> おもしろい平文の識別 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="540"><a name="540"><TD id="E540" onclick="javascript:toggleLayer('J540')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> What defines an interesting result?
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J540" onclick="javascript:toggleLayer('E540')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> おもしろい結果って、どういうことだろう。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="541"><a name="541"><TD id="E541" onclick="javascript:toggleLayer('J541')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> If we already know the plaintext, and are just looking for the key, an interesting result would be if the plaintext from this key matches our known block of plaintext.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J541" onclick="javascript:toggleLayer('E541')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> もし平文があらかじめわかっていれば、おもしろい結果というのは、その鍵で得られた平文が、わかっている平文とマッチする、ということだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="542"><a name="542"><TD id="E542" onclick="javascript:toggleLayer('J542')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> If we don't know the plaintext, perhaps the guess that it's all composed of letters, digits, and punctuation defines "interesting".
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J542" onclick="javascript:toggleLayer('E542')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> もしもとの平文がわからなければ、それが全部、文字や数字や記号だけでできていれば「おもしろい」といえるかもしれない。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="543"><a name="543"><TD id="E543" onclick="javascript:toggleLayer('J543')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> The test has to be simple yet flexible.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J543" onclick="javascript:toggleLayer('E543')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> この検討は、簡単にして柔軟でなくてはならない。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="544"><a name="544"><TD id="E544" onclick="javascript:toggleLayer('J544')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> We ended up with one that's simple for the hardware, but a bit more complicated for the software. 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J544" onclick="javascript:toggleLayer('E544')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 結局われわれが使ったのは、ハードにとっては単純だけれど、ソフトのほうにはちょっと負担がかかるものだ。 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="545"><a name="545"><TD id="E545" onclick="javascript:toggleLayer('J545')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Each result contains eight 8-bit bytes.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J545" onclick="javascript:toggleLayer('E545')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> それぞれの結果は、8ビット長バイトを8個ふくむ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<TR id="546"><a name="546"><TD ID="TAB546" onclick="javascript:toggleLayer('J546')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD ID="TAB546" onclick="javascript:toggleLayer('E546')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD></a></TR>
<!-- TRANS_PAIR BEGIN --><TR id="547"><a name="547"><TD id="E547" onclick="javascript:toggleLayer('J547')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> First, the search unit looks at each byte of the result.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD ID="TAB547" onclick="javascript:toggleLayer('E547')" BGCOLOR=#F0F0F0 style="visibility : visible">  </TD></a></TR><!-- TRANS_PAIR END -->
<TR id="548"><a name="548"><TD ID="TAB548" onclick="javascript:toggleLayer('J548')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD ID="TAB548" onclick="javascript:toggleLayer('E548')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD></a></TR>
<!-- TRANS_PAIR BEGIN --><TR id="549"><a name="549"><TD id="E549" onclick="javascript:toggleLayer('J549')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Such a byte can have any one of 256 values.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J549" onclick="javascript:toggleLayer('E549')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> それぞれのバイトがとれる値は、256とおりある。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="550"><a name="550"><TD id="E550" onclick="javascript:toggleLayer('J550')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> The search unit is set up with a table that defines which of these 256 byte values are "interesting" and which are uninteresting.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J550" onclick="javascript:toggleLayer('E550')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 探索ユニットは、この256個のうちでどの値が「おもしろい」もので、どれがつまらないかを定義した表をもっている。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="551"><a name="551"><TD id="E551" onclick="javascript:toggleLayer('J551')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> For example, if the plaintext is known to be all numeric, the software sets up the table so that the ten digits (0 to 9) are interesting, and all other potential values are uninteresting.  
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J551" onclick="javascript:toggleLayer('E551')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> たとえば平文が全部数字だというのがわかっていれば、ソフトはこの表で、数字10個（0から9まで）がおもしろくて、それ以外の値はぜんぶつまらない、と定義する。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="552"><a name="552"><TD id="E552" onclick="javascript:toggleLayer('J552')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> The result of decrypting with the wrong key will look pretty close to random. 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J552" onclick="javascript:toggleLayer('E552')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> まちがった鍵で復号してやると、結果はほとんどランダムといっていいものになる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="553"><a name="553"><TD id="E553" onclick="javascript:toggleLayer('J553')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> So the chance of having a single byte look "interesting" will be based on what fraction of the 256 values are defined to be "interesting".
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J553" onclick="javascript:toggleLayer('E553')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> だから一つのバイトが「おもしろい」ものとなる確率は、256通りの可能性のうち、「おもしろい」と定義された部分がどれだけあるかによって変わってくる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="554"><a name="554"><TD id="E554" onclick="javascript:toggleLayer('J554')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> If, say, 69 characters are interesting (A-Z, a-z, 0-9, space, and a few punctuation characters), then the chance of a random byte appearing to be interesting is 69/256 or about 1/4.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J554" onclick="javascript:toggleLayer('E554')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> たとえば、69文字がおもしろいとされていたら（A-Z, a-z, 0-9, 空白, その他句読点など）、ランダムなバイトがおもしろいものになる確率は、69/256 で、つまり約1/4ということになる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="555"><a name="555"><TD id="E555" onclick="javascript:toggleLayer('J555')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> These don't look like very good odds;
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J555" onclick="javascript:toggleLayer('E555')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> これだとあまり分がいいようには見えないでしょう。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="556"><a name="556"><TD id="E556" onclick="javascript:toggleLayer('J556')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> the chip would be stopping on one out of every four keys, to tell the software about "interesting" but wrong keys.  
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J556" onclick="javascript:toggleLayer('E556')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> チップは鍵の4つに一つで止まって、ソフトに「おもしろい」けれどまちがった鍵を見せることになる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="557"><a name="557"><TD id="E557" onclick="javascript:toggleLayer('J557')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> But the "interest" test is repeated on each byte in the result.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J557" onclick="javascript:toggleLayer('E557')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> でも「おもしろい」判定は、結果のすべてのバイトに適用される。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="558"><a name="558"><TD id="E558" onclick="javascript:toggleLayer('J558')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> If the chance of having a wrong key's byte appear interesting is 1/4, then the chance of two bytes appearing interesting is 1/4 of 1/4, or 1/16th.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J558" onclick="javascript:toggleLayer('E558')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> もしまちがった鍵のバイトがおもしろい確率が1/4なら、2バイトがおもしろい可能性は1/4のそのまた1/4, つまり1/16になる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="559"><a name="559"><TD id="E559" onclick="javascript:toggleLayer('J559')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> For three bytes, 1/4th of 1/4th of 1/4th, or 1/64th.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J559" onclick="javascript:toggleLayer('E559')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 3バイトなら、1/4の1/4の1/4、つまり1/64だ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="560"><a name="560"><TD id="E560" onclick="javascript:toggleLayer('J560')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> By the time the chip examines all 8 bytes of a result, it only makes a mistake on 1/65536th of the keys (l/48 keys).  
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J560" onclick="javascript:toggleLayer('E560')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> この調子で、チップが結果の8バイトを検討し終わると、まちがった鍵は全体の1/65536(l/48)に限られてくる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="561"><a name="561"><TD id="E561" onclick="javascript:toggleLayer('J561')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> That seems like a pretty small number, but when you're searching through 72,057,594,037,927,936 keys (256 keys, or 72 quadrillion keys), you need all the help you can get.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J561" onclick="javascript:toggleLayer('E561')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> これはかなり小さい数に思えるけれど、なにせ今は 2,057,594,037,927,936個の鍵 (256の鍵、または7.2京の鍵）を探しているので、もっともっと手助けが要る。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="562"><a name="562"><TD id="E562" onclick="javascript:toggleLayer('J562')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Even having the software examine 1/65536th of the possible keys would require looking at 1,099,511,627,776 keys (240 or about a trillion keys).
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J562" onclick="javascript:toggleLayer('E562')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> ソフトに可能な鍵の1/65536をチェックさせるだけでも、1,099,511,627,776個の鍵（240 または1兆個の鍵）を調べなくてはならないことになる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="563"><a name="563"><TD id="E563" onclick="javascript:toggleLayer('J563')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> So the chip provides a bit more help. 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J563" onclick="javascript:toggleLayer('E563')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> そこでチップが、もうすこし手助けをするようになっている。 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="564"><a name="564"><TD id="E564" onclick="javascript:toggleLayer('J564')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> This help comes from that second block of ciphertext.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J564" onclick="javascript:toggleLayer('E564')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> この助けを提供してくれるのが、暗号文の2つめのブロックだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="565"><a name="565"><TD id="E565" onclick="javascript:toggleLayer('J565')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> If every byte of a result looks interesting when the first block of ciphertext is decrypted, the chip goes back around and decrypts the second block of ciphertext with the same key.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J565" onclick="javascript:toggleLayer('E565')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> もし暗号文の最初のブロックで、結果のバイトがすべておもしろかったら、チップは今度は、同じ鍵で二番目の暗号文を復号してみる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="566"><a name="566"><TD id="E566" onclick="javascript:toggleLayer('J566')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> This divides the "error rate" by another factor of 65536, leaving the software with only 16,777,216 (224 or about sixteen million) keys to look at.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J566" onclick="javascript:toggleLayer('E566')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> これで「まちがい率」はさらに65536分の一になって、ソフトはたった16,777,216 (224または1600万くらい）の鍵を見るだけですむ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="567"><a name="567"><TD id="E567" onclick="javascript:toggleLayer('J567')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Software on modern computers is capable of handling this in a reasonable amount of time. 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J567" onclick="javascript:toggleLayer('E567')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> いまのコンピュータのソフトは、このくらいならそこそこの時間で見てしまえる。 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="568"><a name="568"><TD id="E568" onclick="javascript:toggleLayer('J568')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> (If we only know one block of ciphertext, we just give the chip two copies of the same ciphertext.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J568" onclick="javascript:toggleLayer('E568')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> (もし暗号文が1ブロックしかわかっていなければ、同じ暗号文を両方に入れるだけだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="569"><a name="569"><TD id="E569" onclick="javascript:toggleLayer('J569')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> It will test both copies, and eventually tell us that the block is interesting.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J569" onclick="javascript:toggleLayer('E569')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> チップは同じものをテストして、いずれおもしろいブロックを教えてくれる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="570"><a name="570"><TD id="E570" onclick="javascript:toggleLayer('J570')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> The amount of time it spends checking this "second block" is always a tiny fraction of the total search time.) 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J570" onclick="javascript:toggleLayer('E570')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 同じことを二回やるわけだけれど、これで無駄にする時間というのは、探索の総時間のなかでほんのわずかだ。） 
 </TD></a></TR><!-- TRANS_PAIR END -->
<TR id="571"><a name="571"><TD ID="TAB571" onclick="javascript:toggleLayer('J571')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD ID="TAB571" onclick="javascript:toggleLayer('E571')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD></a></TR>
<!-- TRANS_PAIR BEGIN --><TR id="572"><a name="572"><TD id="E572" onclick="javascript:toggleLayer('J572')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> 1-12 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J572" onclick="javascript:toggleLayer('E572')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 1-12 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="573"><a name="573"><TD id="E573" onclick="javascript:toggleLayer('J573')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> In the plaintext recognizer there are also 8 bits that lets us specify which bytes of a plaintext are interesting to examine.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J573" onclick="javascript:toggleLayer('E573')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> また平文認識の部分には、平文のどのバイトを調べるとおもしろいかを指定できる8ビットがある。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="574"><a name="574"><TD id="E574" onclick="javascript:toggleLayer('J574')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> For example, if we know or suspect the contents of the first six bytes of a plaintext value, but don't know anything about the last two bytes, we can search for keys which match in just those six bytes.  
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J574" onclick="javascript:toggleLayer('E574')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> たとえば、平文の値の最初の6バイトの中身は知っているか見当がついて、残りの2バイトについてはなにも知らないなら、その6バイトのところだけマッチする鍵を探すことができる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<TR id="575"><a name="575"><TD ID="TAB575" onclick="javascript:toggleLayer('J575')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD ID="TAB575" onclick="javascript:toggleLayer('E575')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD></a></TR>
<!-- TRANS_PAIR BEGIN --><TR id="576"><a name="576"><TD id="E576" onclick="javascript:toggleLayer('J576')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Known plaintext 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J576" onclick="javascript:toggleLayer('E576')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 平文がわかっているとき 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="577"><a name="577"><TD id="E577" onclick="javascript:toggleLayer('J577')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> The chips will have many fewer "false positives" if the plaintext of the message is known, instead of just knowing its general characteristics.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J577" onclick="javascript:toggleLayer('E577')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> もし、平文についておおまかな性質だけでなく、それ自体がわかっていたら、チップから出てくる「もっともらしいもの」はぐっと減ってくる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="578"><a name="578"><TD id="E578" onclick="javascript:toggleLayer('J578')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> In that case, only a small number of byte values will be "interesting".
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J578" onclick="javascript:toggleLayer('E578')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> この場合、「おもしろい」ものとなるバイト値はごく少数しか出てこない。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="579"><a name="579"><TD id="E579" onclick="javascript:toggleLayer('J579')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> If the plaintext has no repeated byte values, only eight byte values will be interesting, instead of 69 as above. 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J579" onclick="javascript:toggleLayer('E579')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> もし平文に繰り返されるバイト値がなければ、おもしろいバイト値は、上の69個ではなく、8個にしぼられる。 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="580"><a name="580"><TD id="E580" onclick="javascript:toggleLayer('J580')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> For example, if the plaintext block is "hello th",
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J580" onclick="javascript:toggleLayer('E580')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> たとえば、もし平文のブロックが「hello th」だったとしよう。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="581"><a name="581"><TD id="E581" onclick="javascript:toggleLayer('J581')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> then only the six byte values "h", "e", "l", "o", space, and "t" are interesting.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J581" onclick="javascript:toggleLayer('E581')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> するとおもしろいのは「h」「e」「l」「o」「t」空白だけがおもしろい。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="582"><a name="582"><TD id="E582" onclick="javascript:toggleLayer('J582')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> If a plaintext contains only these bytes, it is interesting.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J582" onclick="javascript:toggleLayer('E582')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> もし平文がこういうバイトだけを含んでいたら、それはおもしろいことになる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="583"><a name="583"><TD id="E583" onclick="javascript:toggleLayer('J583')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> We'll get some "false positives" 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J583" onclick="javascript:toggleLayer('E583')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> もっともらしいものはいくつか出てくるだろう。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="584"><a name="584"><TD id="E584" onclick="javascript:toggleLayer('J584')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> since many plaintexts like "tholo tt" would appear "interesting" even though they don't match exactly. 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J584" onclick="javascript:toggleLayer('E584')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 「theolo tt」などというのも、正解ではなくても「おもしろい」と見られるからだ。 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="585"><a name="585"><TD id="E585" onclick="javascript:toggleLayer('J585')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Using this definition of "interesting", a byte resulting from a wrong key will look interesting only about 8/256ths of the time, or 1/32nd of the time.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J585" onclick="javascript:toggleLayer('E585')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> この「おもしろい」の定義を使うと、まちがった鍵で出てくるバイトがおもしろくなる可能性は、8/256または1/32だけになる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="586"><a name="586"><TD id="E586" onclick="javascript:toggleLayer('J586')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> All eight bytes resulting from a wrong key will look interesting only 1/32nd to the eighth power (1/32nd of 1/32nd of 1/32nd of 1/32nd of 1/32nd of 1/32nd of 1/32nd of 1/32nd) of the time, or 1/1,099,511,627,776th of the time (1/240 of the time).
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J586" onclick="javascript:toggleLayer('E586')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 8バイトすべてがおもしろくなる可能性は、1/32の8乗(1/32の1/32の1/32の1/32の1/32の1/32の1/32の1/32)、つまりは1/1,099,511,627,776(1/240)しかなくなる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="587"><a name="587"><TD id="E587" onclick="javascript:toggleLayer('J587')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> In other words, a search unit can try an average of a trillion keys before reporting that a wrong key looks interesting.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J587" onclick="javascript:toggleLayer('E587')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> つまり、探索ユニットは、おもしろそうな鍵を報告するまでに、平均で1兆個くらいの鍵を試せるわけだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="588"><a name="588"><TD id="E588" onclick="javascript:toggleLayer('J588')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> This lets it search for a long time without slowing down or bothering the software. 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J588" onclick="javascript:toggleLayer('E588')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> だから、止まったり、ソフトにかまったりして速度を落とさずに、かなり長時間探索を続けられることになる。 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="589"><a name="589"><TD id="E589" onclick="javascript:toggleLayer('J589')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Speed 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J589" onclick="javascript:toggleLayer('E589')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> Speed 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="590"><a name="590"><TD id="E590" onclick="javascript:toggleLayer('J590')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Once you get it going, a search unit can do one decryption in 16 clock cycles. 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J590" onclick="javascript:toggleLayer('E590')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> いったん動き始めたら、探索ユニットは16クロックサイクルで復号を一つできる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="591"><a name="591"><TD id="E591" onclick="javascript:toggleLayer('J591')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> The chips we have built can run with a clock of 40 Mhz (40 million cycles per second).
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J591" onclick="javascript:toggleLayer('E591')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> われわれの作ったチップは40MHz（1秒に4000万ヘルツ）で動ける。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="592"><a name="592"><TD id="E592" onclick="javascript:toggleLayer('J592')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Dividing 16 into 40 million shows that each search unit can try about 2.5 million keys per second. 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J592" onclick="javascript:toggleLayer('E592')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 16を4000万で割ると、各探索ユニットは毎秒だいたい250万鍵くらいを試せるのがわかる。 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="593"><a name="593"><TD id="E593" onclick="javascript:toggleLayer('J593')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> In building the search units, we discovered that we could make them run faster if we used simpler circuitry for adding 1 to a key.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J593" onclick="javascript:toggleLayer('E593')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 探索ユニットをつくるにあたり、鍵に1を足すときの回路を簡単にすればスピードをあげられることを発見した。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="594"><a name="594"><TD id="E594" onclick="javascript:toggleLayer('J594')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Rather than being able to count from a key of O all the way up to a key of all ones, we limited the adder so that it can only count the bottom 32 bits of the key.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J594" onclick="javascript:toggleLayer('E594')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 全ビットゼロの鍵から、全ビット1の鍵までずっと数えられるようなしかけにせずに、鍵の下32ビットだけ数えるような加算回路を採用してある。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="595"><a name="595"><TD id="E595" onclick="javascript:toggleLayer('J595')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> The top 24 bits always remain the same.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J595" onclick="javascript:toggleLayer('E595')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> てっぺんの24ビットはずっと同じままだ。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="596"><a name="596"><TD id="E596" onclick="javascript:toggleLayer('J596')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> At a rate of 2.5 million keys per second, it takes a search unit 1717 seconds (about half an hour) to search all the possible keys that have the same top 24 bits.
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J596" onclick="javascript:toggleLayer('E596')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 毎秒250万鍵という速度だと、てっぺん24ビットが同じ鍵をすべて探索しつくすのには1717秒（約30分）かかる。
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="597"><a name="597"><TD id="E597" onclick="javascript:toggleLayer('J597')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> At the end of half an hour, the software has to stop the chip, reload it with a new value in the top 24 bits, and start it going again. 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J597" onclick="javascript:toggleLayer('E597')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> その30分が終わったら、ソフトがチップを止めて、24ビットに新しい値を入れ直して、またチップを走らせる。 
 </TD></a></TR><!-- TRANS_PAIR END -->
<TR id="598"><a name="598"><TD ID="TAB598" onclick="javascript:toggleLayer('J598')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD ID="TAB598" onclick="javascript:toggleLayer('E598')" BGCOLOR=#F0F0F0 style="visibility : visible"> <BR> </TD></a></TR>
<!-- TRANS_PAIR BEGIN --><TR id="599"><a name="599"><TD id="E599" onclick="javascript:toggleLayer('J599')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> 1-13 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J599" onclick="javascript:toggleLayer('E599')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> 1-13 
 </TD></a></TR><!-- TRANS_PAIR END -->
<!-- TRANS_PAIR BEGIN --><TR id="600"><a name="600"><TD id="E600" onclick="javascript:toggleLayer('J600')" BGCOLOR=#F0F0F0 style="visibility : visible" width=50% VALIGN=TOP> Feedback Modes 
 </TD><TD VALIGN=TOP BGCOLOR=#FFFFFF><BR></TD><TD id="J600" onclick="javascript:toggleLayer('E600')" VALIGN=TOP BGCOLOR=#F0F0F0 style="visibility : visible"> フィードバックモード 
 </TD></a></TR><!-- TRANS_PAIR END -->
</TABLE></span><HR>
<a href="des-4.htm">prev</a>
<a href="des-0.htm">0</a>
<a href="des-1.htm">1</a>
<a href="des-2.htm">2</a>
<a href="des-3.htm">3</a>
<a href="des-4.htm">4</a>
<5>
<a href="des-6.htm">6</a>
<a href="des-7.htm">7</a>
<a href="des-8.htm">8</a>
<a href="des-9.htm">9</a>
<a href="des-10.htm">10</a>
<a href="des-11.htm">11</a>
<a href="des-12.htm">12</a>
<a href="des-13.htm">13</a>
<a href="des-14.htm">14</a>
<a href="des-15.htm">15</a>
<a href="des-16.htm">16</a>
<a href="des-17.htm">17</a>
<a href="des-18.htm">18</a>
<a href="des-19.htm">19</a>
<a href="des-20.htm">20</a>
<a href="des-6.htm">next</a>
<hr>

<h2><a name="preamble">このページにある対訳文について</a></h2>このページの対訳文は，再配布可能な作品（<a href="http://www.gutenberg.org/">Project Gutenberg</a> や<a href="http://www.aozora.gr.jp/">青空文庫</a>や<a href="http://www.genpaku.org/">プロジェクト杉田玄白</a>などの作品）について，日本語文と英語文とを対応付けたものの一つです．その他の対訳作品やダウンロードや著作権などについては，<a href="../index.html">日英対訳文対応付けデータのホームページ</a>を見て下さい．また，オリジナルの日英作品の著作権についてはオリジナルの日本語文および英語文の著作権を見て下さい．なお，著作権上の問題がある作品については，情報通信研究機構自然言語グループ内山将夫（ｍｕｔｉｙａｍａ あっとまーく ｎｉｃｔ どっと ｇｏ どっと ｊｐ）まで連絡していただければ，それらについては削除します．<h3>関連ページ</h3><ul><li>オリジナルの英語文: <a href="../org/dese.txt">local copy</a> / <a href="http://cryptome.org/cracking-des.htm">http://cryptome.org/cracking-des.htm</a><li>オリジナルの日本語文: <a href="../org/desj.txt">local copy</a> / <a href="http://www.genpaku.org/crackdes/cracking-desj.html">http://www.genpaku.org/crackdes/cracking-desj.html</a><li><a href="../manual-alignment/des.alm">対訳データ</a></ul><p>
<script type="text/javascript">
<!--
document.F.CE.checked = false
document.F.CJ.checked = false
// -->
</script>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
</BODY></HTML>

