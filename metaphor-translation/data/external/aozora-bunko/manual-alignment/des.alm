Scan This Book!       
Scan This Book!       

DESをクラック 
暗号研究、 
連邦機関は 
盗聴政策と 
こうして 
チップ設計の 
プライバシーを 
秘密 
侵害する
Cracking DES 
Secrets of 
How federal 
Encryption Research, 
agencies 
Wiretap Politics 
subvert 
& Chip Design 
privacy


EFF
EFF

ELECTRONIC FRONTIER FOUNDATION      
ELECTRONIC FRONTIER FOUNDATION       

DESのクラック：
Cracking DES:

暗号研究と盗聴政策、チップ設計の秘密 
Secrets of Encryption Research, Wiretap Politics, and Chip Design 

Electronic Frontier Foundatio
by the Electronic Frontier Foundation 


With the exceptions noted, this book and all of its contents are in the public domain. 
Published in 1998 by the Electronic Frontier Foundation. 
Printed in the United States of America. 
No rights reserved. 
Every part of this book, except as noted below, may be reproduced, in any form or by any means, without permission in writing from the publisher. 
Because this material is in the public domain, permission to reproduce, use, copy, modify, and distribute this material for any purpose and without fee is hereby granted. 


第四章のテストファイル、ブートストラップ、ブートストラップ2の掲載物の著作権保有者は、&copy;1997 by Network Associates, Inc. である。
The test-file, bootstrap, and bootstrap2 listings in Chapter 4 are Copyright &copy;1997 by Network Associates, Inc.

この掲載物は、全体、部分を問わず、使用料の支払いなしに複製が認められる。
These listings may be reproduced in whole or in part without payment of royalties.

第10章「暗号分析ハードウェアのアーキテクチャ上の考察」は、著者Ian GoldbergとDavid Wagnerが著作権 &copy; 1996 を保有する。
Chapter 10, Architectural Considerations for Cryptanalytic Hardware, is Copyright &copy; 1996 by the authors, Ian Goldberg and David Wagner.


It may not be reproduced without the permission of the authors,


著者たちとは iang@cs.berkeley.edu と daw@cs.berkeley.eduで連絡がとれる。
who can be reached at iang@cs.berkeley.edu and daw@cs.berkeley.edu. 

第11章「効率のよいDES鍵の探索：アップデート」の著作権保有者は、Entrust Technologies &copy; 1997 である。
Chapter 11, Efficient DES Key Search: An Update, is Copyright &copy; 1997 by Entrust Technologies.

これは、全体、部分を問わず、使用料の支払いなしに複製が認められる。
It may be reproduced in whole or in part without payment of royalties.

第 9 章「100 万のDES 鍵を破る」は&copy; 1986 である。
Chapter 9, Breaking One Million DES Keys, is Copyright &copy; 1986. 

作業はベルギー王国の University of Leuven でおこなわれ、ベルギー王国の NFWO の支援の元で実施された。
Work done at the University of Leuven, Belgium, and supported by the NFWO, Belgium.

この部分は著者の許可なく複製を行ってはならない。
It may not be reproduced without the permission of the author,

著者とはdesmedt@cs.uwm.eduで連絡がとれる。 
who can be reached at desmedt@cs.uwm.edu. 

原著発売は、O'Reilly & Associates, Inc., 101 Morris Street, Sebastopol, CA 95472 USA である。
Distributed by O'Reilly & Associates, Inc., 101 Morris Street, Sebastopol, CA 95472 


日本語版の著作権保持者は &copy;1999 山形浩生<hiyori13@alum.mit.edu>である。
この翻訳は、全体、部分を問わず、使用料の支払いなしに複製が認められる。


Printing History: 
Printing History: 

May 1998: 初版 
May 1998: First Edition. 

製造業者や販売業者が自分の製品を区別するために使っている名称・呼称の多くは、商標として登録されている。
Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks.

こうした商標が本書に登場し、それが商標であると出版者が認識していた場合には、その名称はすべて大文字か、あるいは頭文字を大文字化して表記してある。 
Where those designations appear in this book, and the publisher was aware of a trademark claim, the designations have been printed in caps or initial caps.

本書の制作にあたっては多大な注意がはらわれてはいるものの、出版者も配布者も、まちがいや欠落については責任をいっさいおわず、さらにここに含まれた情報の利用から生じた損害についてもいっさい責任をおわない。 
While many precautions have been taken in the preparation of this book, the publisher and distributor assume no responsibility for errors or omissions, or for damages resulting from the use of the information contained herein. 


This book is printed on acid-free paper with 85% recycled content, 15% post-consumer waste O'Reilly & Associates is committed to using paper with the ehighest recycled content available consistent with high quality. 
ISBN: 1-56592-520-3 


目次 
Table of Contents 

序文 ........................................ix 
Foreword ........................................ix 

はじめに .......................................xiii 
Preface .......................................xiii 

1: 概論.....................................1-1 
1: Overview.....................................1-1 

解読の政治性.................................1-1
Politics of Decryption ......................1-1 

ねらい ......................................1-7
Goals .......................................1-7 

DES クラッキングの歴史 ......................1-8
History of DES Cracking .....................1-8 

EFF の DES クラッカープロジェクト ...........1-8
EFF's DES Cracker Project ...................1-8 

アーキテクチャ ..............................1-9
Architecture ................................1-9 

ほかにはだれが DES をクラックしているだろう? ..1-16
Who Else Is Cracking DES? ..................1-16 

DES を使っていたらどうすればいいの？ .........1-17
What To Do If You Depend On DES ............1-17 

結論 ........................................1-18 
Conclusion .................................1-18 

2: DES 鍵探索アレイのデザイン ..................2-1 
2: Design for DES Key Search Array .............2-1 

チップのレジスタ ............................2-1
On-Chip Registers ..........................2-1 

コマンド ....................................2-4
Commands ....................................2-4 

探索ユニットのはたらき ......................2-4
Search Unit Operation .....................2-4 

見本プログラムの説明 ........................2-5
Sample Programming Descriptions .............2-5 

スケーラビリティと性能 ......................2-9
Scalability and Performance .................2-9 

ホストコンピュータのソフト ..................2-9
Host Computer Software ......................2-9 

用語集 .....................................2-10 
Glossary ...................................2-10 


vi 
3. DES 鍵探索アレイの設計：チップレベルの仕様 ..3-1 
3. Design for DES Key Search Array Chip-Level Specification ..3-1 

ASIC の説明 ..............................................3-1
ASIC Description .........................................3-1 

基板の説明 ...............................................3-3
Board description ........................................3-3 

リード／ライトのタイミング ...............................3-5
Read and Write Timing ....................................3-5 

アドレス指定用レジスタ ...................................3-7
Addressing Registers .....................................3-7 

All-active 信号 ..........................................3-7
All-active Signal ........................................3-7 

ASIC レジスタ割り当て ....................................3-8 
ASIC Register Allocation .................................3-8 

4: ソースコードのスキャン ..................................4-1 
4: Scanning the Source Code ..................................41 

暗号ソースコードの政治性 ..................................4-1
The Politics of Cryptographic Source Code .................4-1 

紙の出版物は例外 ..........................................4-2
The Paper Publishing Exception ............................4-2 

スキャン ..................................................4-4
Scanning ..................................................4-4 

ブートストラップ ..........................................4-5 
Bootstrapping .............................................4-5 

[以下の5, 6, 7 章のソースコードそのものは以下にある： 
ftp://ftp.nic.surfnet.nl/surfnet/net-security/encryption/cracking_DES/] 
[Chapters 5, 6 and 7 (offsite)] 

5: ソフトウェアのソースコード ......................................5-1 
5: Software Source Code ......................................5-1 

6: チップのソースコード ..........................................6-1 
6: Chip Source Code ..........................................6-1 

7: チップシミュレータのソースコード ................................7-1 
7: Chip Simulator Source Code ................................7-1 

8: ハードウェア：基板の回路 ....................................8-1 
8: Hardware Board Schematics (offsite) ....................................8-1 

基板回路 ......................................................8-1 
Board Schematics ......................................................8-1 

Sun-4/470 バックプレーンの改造................................8-10
Sun-4/470 backplane modifications ................................8-10 

PC インターフェース .......................................................8-12 
PC Interfaces .......................................................8-12 

正誤表 ...............................................8-13 
Errata ...............................................8-13 

9: 百万DES鍵を破る：Yvo Desmedt著 .........9-1 
9: Breaking One Million DES Keys by Yvo Desmedt .........9-1 

概要 .................................................9-1
Abstract .............................................9-1 

はじめに .............................................9-1
Introduction .........................................9-1 

基本的な考え方 .......................................9-2
The basic idea .......................................9-2 

マシンの詳細 .........................................9-2
Details of such a machine ............................9-2 

得られた結果と考察 ...................................9-4
Obtained results and remarks .........................9-4 

結論 .................................................9-4
Conclusion ...........................................9-4 

謝辞 .................................................9-5 
Acknowledgement ......................................9-5 

vii 
10: 暗号解析ハードウェアのアーキテクチャ考察 .. 10-1 
10: Architectural Considerations for Cryptanalytic Hardware .. 10-1 

Abstract ............................10-1
Abstract ............................10-1 

Introduction ........................10-1
Introduction ........................10-1 

Motivation ..........................10-2
Motivation ..........................10-2 

Related work ........................10-4
Related work ........................10-4 

Technical Approach ..................10-6
Technical Approach ..................10-6 

Design and Analysis .................10-8
Design and Analysis .................10-8 

Future work .........................10-23
Future work .........................10-23 

Conclusions .........................10-23
Conclusions .........................10-23 

Acknowledgements ....................10-24
Acknowledgements ....................10-24 

Availability ........................10-24
Availability ........................10-24 

References ..........................10-24 
References ..........................10-24 

11: 効率のよいDES鍵の探索：アップデート：Michael J. Wiener 著 11-1 
11: Efficient DES Key Search--An Update by Michael J. Wiener 11-1 

技術の進歩 ..........................11-2
Advancing Technology ................11-2 

プログラマブル・ハードウェア ........11-3
Programmable Hardware ...............11-3 

結論 ............................................................................11-4 
Conclusion 
      ............................................................................11-4 

12: 著者紹介 ......................................................................12-1 
12: Authors 
    ......................................................................12-1 

The Electronic Frontier Foundation ....................12-1
The Electronic Frontier Foundation ....................12-1 

John Gilmore ..........................................12-2
John Gilmore ..........................................12-2 

Cryptography Research .................................12-2
Cryptography Research .................................12-2 

Paul Kocher ...........................................12-3
Paul Kocher ...........................................12-3 

Advanced Wireless Technologies ........................12-3 
Advanced Wireless Technologies ........................12-3 


pp. ix-xii 
pp. ix-xii 

序文
Foreword

Whitfield Diffie 
by Whitfield Diffie 
http://www.eff.org/pub/Privacy/Crypto_misc/DESCracker/HTML/19980716_diffie_crackingdes_foreword.html 

1974 年にスタンフォードの計算機科学の連中は、Loui's で食事をした。 [1]
In 1974 the Stanford computer science community ate at Loui's.[1]

秋のある晩にわたしが食事をしていると、Butler Lampson がやってきて、最近なにをやっているときく中で、IBM の Lucifer システムが全国標準規格になるよ、と話してくれた。
As I sat eating one evening in the fall, Butler Lampson approached me, and in the course of inquiring what I was doing, remarked that the IBM Lucifer system was about to be made a national standard. 

わたしはそれを知らなかったので、思案をはじめた。 
I hadn't known it, and it set me thinking. 

考えはこんな具合にすすんだ。 
My thoughts went as follows: 

NSA は、メッセージが読めなくなるといやだから、強い暗号システムを全国標準規格にしたくないんだな。 
NSA doesn't want a strong cryptosystem as a national standard, because it is afraid of not being able to read the messages. 

一方で、もし NSA が弱い暗号システムを推薦して、それがばれたら、ぼこぼこにされることになる。
On the other hand, if NSA endorses a weak cryptographic system and is discovered, it will get a terrible black eye. 

Butler が正しいらしいということで、わたしはこの問題についてその後数ヶ月にわたっていろいろ考えることになった。
Hints that Butler was correct began to appear and I spent quite a lot of time thinking about this problem over the next few months.

そこから落とし穴式の暗号システムについて考えて、そして最終的には公開鍵暗号方式のことを考えるようになった。 
It led me to think about trap-door cryptosystems and perhaps ultimately public-key cryptography. 

データ暗号化規格（DES）の案が 1975 年 3 月 17 日にリリースされて[2],、わたしはかれらのやったことが見えたと思った。
When the Proposed Data Encryption Standard was released on the 17th of March 1975 [2], I thought I saw what they had done.

基本的なシステムはOKだったけれど、でもキー空間は小さめだ。
The basic system might be ok, but the keyspace was on the small side.

キーをさがすのはむずかしいけれど、不可能ではない。
It would be hard to search, but not impossible.

最初の見積もりでは、6.5 億ドルあれば、DES を一週間で破る機械をつくれると思った。
My first estimate was that a machine could be built for $650M that would break DES in a week.

この考えをMarty Hellmanと話し合うと、かれは夢中になってこの計算にとりくんだ。
I discussed the idea with Marty Hellman and he took it on with a vengance.

話が終わるまでに、見積もりは 2,000 万ドル、時間は一日まで下がった。 [3] 
Before we were through, the estimated cost had fallen to $20M and the time had declined to a day. [3] 

われわれの論文を発端にして、暗号コミュニティではゲームがはじまって、それ以来、DES 鍵を探す論文がたくさん書かれるようになった。
Our paper started a game in the cryptographic community and many papers on searching through DES keys have since been written.

われわれの論文発表から 3 年くらいして、Robert Jueneman（当時はバージニア州マクリーンの Satellite Business Systems に所属）が「The Data Encryption Standard vs. Exhaustive Search」という論文を書いた。 [4]
About three years after the publication of our paper, Robert Jueneman --- then at Satellite Business Systems in McLean, Virginia --- wrote "The Data Encryption Standard vs. Exhaustive Search." [4]

この力作は、DES を破る見通しについて、われわれよりもずっと楽観的だった。
This opus was substantially more optimistic about the chances for DES breaking.

この論文の予言では、1985 年までに 50 万ドルの投資で、一時間で DES 鍵を見つけられるようになるし、1995 年までには 1,000 万ドルの投資で、それが 2 秒にまで短縮されるとなっているが、これは 15 年後に実際にできたものを、実に見事に予言している。
It predicted that by 1985 a half-million dollar investment would get you a DES key every hour and that by 1995, $10 million similarly spent would reduce that time to two seconds, an estimate remarkably close to one made fifteen years later.  

10年たって、Yvo DesmedtとJean-Jaques Quisquaterが貢献を 2 つ行ってくれた。
A decade later, Yvo Desmedt and Jean-Jaques Quisquater made two contibutions, 

一つは冗談交じりで、ひとつは真剣だ。
one whimsical, one serious.

これは関連した「誕生日問題」みたいなアプローチを使ったもので、多数の暗号問題を同時にとけるようなマシンが提案されている。[5]
Using a related "birthday problem" sort of approach, they proposed a machine for attacking many cryptographic problems at a time. [5]
 
冗談交じりの提案のほうは、中国の人口が DES 鍵空間の平方根と同じくらいだ、という事実を利用したものだ。 
Their whimsical suggestion took advantage of the fact that the population of China was about the square root of the size of the DES key space. 

1993年は、注目すべき年だった。
The year 1993 brought a watershed.

Michael Wiener （Bell-Northern Research）が、最高にしっかりした紙上のマシンを設計したのである。[6] 
Michael Wiener of Bell-Northern Research designed the most solid paper machine yet. [6]

ノーザンテレコムの　DMS100　電話交換機を　DES　攻撃用に特化したもの、といえばあたらずといえども遠からずだろう。
It would not be too far off to describe it as a Northern Telecom DMS100 telephone switch, specialized to attacking DES. 

この論文が特筆すべきなのは、これがチップから基板からキャビネットまで、すべてノーザンテレコムの標準設計技法を使ったということだ。
What made the paper noteworthy was that it used standard Northern Telecom design techniques from the chips to the boards to the cabinets.

3 時間で鍵を発見するマシンが、100　万ドル以下でできると予想している。
It anticipated an investment of under a million dollars for a machine that would recover a key every three hours.

非常に挑発的な付記として、この程度の予算なら　Bell-Northern Research 社の部長決裁に入れてしまえる、という点があげられている。
A provocative aside was the observation that the required budget could be hidden in a director's budget at BNR. 

最後に 1996 年になると、暗号学者一人や二人ではなく、暗号学者グループによって推定が発表されている。
Finally, in 1996, an estimate was prepared by not one or two cryptographers but by a group 

かれらは後に（多少の嫌みもこめて）the magnificent seven [7] と呼ばれている。
later, and not entirely sympathetically, called the magnificent seven. [7]

この推定は、必要となるリソース 3 段階とゆるく関連した、3 つのアプローチの概略を述べている。
This estimate outlined three basic approaches loosely correlated with three levels of resources.

いちばん安いものとしては、必ずしも自分が所有しているとは限らないコンピュータ時間をかき集めるやりかた。
At the cheap end was scrounging up time on computers you didn't need to own.

真ん中は、プログラマブルな論理アレイを使うことだ。
In the middle was using programmable logic arrays, 

たとえば、チップシミュレーションなどほかの目的につくられた PLA マシンを使うことだ。
possibly PLA machines built for some other purpose such as chip simulation.

ハイエンドでは、カスタムチップ方式に最新の改良を加えたものがあがっている。
The high end was the latest refinement of the custom chip approach. 

しらみつぶし式の鍵探索は、こんなに人気がでるとは意外な問題だ。
Exhaustive key search is a surprising problem to have enjoyed such popularity. 

だれでもこの問題を考えてみれば、256の可能性を探索するのは、めんどうくさいけれど、できなくはないというのは自明だろう。
To most people who have considered the probem, it is obvious that a search through 2・6 possibilites is doable if somewhat tedious.

わたしを含む多くの人たちが、なぜこの推定を精緻にして厳密にしようとがんばったのかもなぞだけれど、それよりさらに大きな謎は、1990年代後半になって、ほんとうにその鍵探索をやりだした人たちがいる、ということだ。 
If it a is mystery why so many of them, myself included, have worked to refine and solidify their estimates, it is an even greater mystery that in the late 1990s, some people have actually begun to carry out key searches. 

1997 年にサンフランシスコで開かれた、年次 RSA 暗号業界ショーで、DES暗号文をクラックした者に賞金を出すというアナウンスがされた[8]。
At the 1997 annual RSA cryptographic trade show in San Francisco, a prize was announced for cracking a DES cryptogram [8].

5ヶ月後にその賞金を獲得したのは、インターネット中にちらばったコンピュータを使ったゆるい連合体だった。
The prize was claimed in five months by a loose consortium using computers scattered around the Internet.

このアプローチは、これまで 40 ビットの鍵をもった暗号文や因数分解には適用されていたものだが、その劇的な成功だった。 
It was the most dramatic success so far for an approach earlier applied to factoring and to breaking cryptograms in systems with 40-bit keys. 

1998年の RSA ショーで、また賞金がだされた。今回、賞金は39日で獲得された [9]。
At the 1998 RSA show, the prize was offered again. This time the prize was claimed in 39 days [9]

この結果は、実は見た目よりも大きな改善を示している。
a result that actually represents a greater improvement than it appears to.

最初の鍵がみつかったのは、鍵空間を 25% しかつぶしていない時点でだった。
The first key was found after a search of only 25% of the key space;

二番目の鍵は、85% をさがし終えてやっと見つかった。
the second was not recovered until the 85% mark.

つまり二番目のチームが最初のキーを見つけようとしたら、たぶん一月でそれが達成できたことになる。 
Had the second team been looking for the first key, they would have found it in a month. 

こうした試みは the magnificent seven の最初のアプローチを使っている。
These efforts used the magnificent seven's first approach.

二番目のアプローチを使ったものは、いまのところ公表されていない。
No application of the second has yet come to light.

本書はすぐに三番目のアプローチに飛んで、
This book skips directly to the third.

カスタムチップを使ったコンピュータについて述べている。
It describes a computer built out of custom chips.

「だれでも」つくれるマシンだ。
A machine that 'anyone' can build;

本書にでてくる図面をつかえば、そこそこの値段で DES 鍵をものの数日で見つけられる。
from the plans it presents --- a machine that can extract DES keys in days at reasonable prices,

金さえかければ、ほんの数時間で。
or hours at high prices.

本書と、本書に書かれたマシンの登場で、事態は完全にかわってしまった。
With the appearance of this book and the machine it represents, the game changes forever.

もはや、しらみつぶし探索で DES 鍵が見つかるか、という話ではない。
It is not a question of whether DES keys can be extracted by exhaustive search;

それがどういう目的で、どれだけ安上がりに見つけられるか、という問題になってきている。
it is a question of how cheaply they can be extracted and for what purposes.

自分の持っていない、あるいはコントロールできない汎用マシンをネットワーク化する、というのは暗号解析コンテストに勝つには、とてもよい方法ではあるけれど、業務レベルの暗号解析には役にたたない。
Using a network of general purpose machines that you do not own or control is a perfectly fine way of winning cryptanalytic contests, but it is not a viable way of doing production cryptanalysis.

これをやるには、自分の活動を自分だけにとどめておく必要がある。
For that, you have to be able to keep your activities to yourself.

無用な注意をひかないように保護できるハードでそれを動かせなくてはならない。
You need to be able to run on a piece of hardware that you can protect from unwanted scrutiny.

本書に書かれているのは、まさにそういうマシンだ。
This is such a machine.

DES は過去 20 年以上、標準となっていたわけだけれど、それでどれだけのメッセージが暗号化されたかは見当もつかない。
It is difficult to know how many messages have been encrypted with DES in the more than two decades that it has been a standard.

もっと見当がつかないのは、そのなかにいまだに重要性をもつものがどれだけあって、さらにそのどれだけがディスクやテープ上に落とされて、アクセス可能となっているか、ということだ。
Even more difficult is knowing how many of those messages are of enduing interest and how many have already been captured or remain potentially accessible on disks or tapes,

でもその数は、この質問をどれだけ限定的に考えたにしても、かなり大きいにちがいない。
but the number, no matter precisely how the question is framed must be large.

こうしたメッセージのすべてが、いまや弱点にさらされていると考えるべきである。 
All of these messages must now be considered to be vulnerable. 

しかしながら、弱点はこれで絶えたわけではない。
The vulnerability does not end there, however,

というのも、暗号システムというのは殺しても死なないくらいしぶといものだからだ。
for cryptosystems have nine lives.

DES が安全ではないとどんなに強力に論じたとしても、世界中でDES機器に大量の投資が行われてしまっているために、それをひっくり返すわけにはいかない。
The most convincing argument that DES is insecure would not outweigh the vast investment in DES equipment that has accumulated throughout the world.

人々はどんなに短所があっても DES を使い続け、自分のニーズにはこれでじゅうぶんだと考え続けるわけだ。
People will continue using DES whatever its shortcomings, convincing themselves that it is adequate for their needs.

そして DES は、これだけはっきりと弱点を抱えているのに、今後何十年も情報を守っているかのようなふりを続けるだろう。 
And DES, with its glaring vulnerabilities, will go on pretending to protect information for decades to come. 


脚注
Footnotes

[1]パロアルトのTown and Country Villageにある、Louis Kaoの Hsi-Nan レストラン
[1] Louis Kao's Hsi-Nan restaurant in Town and Country Village, Palo Alto.

[2] 40 Federal Register 12067
[2] 40 Federal Register 12067

[3] Whitfield Diffie and Martin E. Hellman. "Exhaustive cryptanalysis of the NBS data encryption standard". Computer, 10(6):74-84, June 1977. 
[3] Whitfield Diffie and Martin E. Hellman. "Exhaustive cryptanalysis of the NBS data encryption standard". Computer, 10(6):74-84, June 1977. 

[4] R. R. Jueneman, The Data Encryption Standard vs. Exhaustive Search: Practicalities and Politics. 5 Feb 1981. 
[4] R. R. Jueneman, The Data Encryption Standard vs. Exhaustive Search: Practicalities and Politics. 5 Feb 1981. 

[5] Yvo Desmedt, "An Exhaustive Key Search Machine Breaking One Million DES Keys",Eurocrypt 1987で発表。 
[5] Yvo Desmedt, "An Exhaustive Key Search Machine Breaking One Million DES Keys", presented at Eurocrypt 1987.

本書(Cracking DES)の第9章。 
Chapter 9 of this book (Cracking DES). 

Jean-Jacques Quisquater and Yvo G. Desmedt, "Chinese Lotto as an Exhaustive Code-Breaking Machine", Computer, 24(11):14-22, November 1991. 
Jean-Jacques Quisquater and Yvo G. Desmedt, "Chinese Lotto as an Exhaustive Code-Breaking Machine", Computer, 24(11):14-22, November 1991. 

[6] Michael Wiener, "Efficient DES Key Search", Crypto '93 のrump sessionで発表。 
[6] Michael Wiener, "Efficient DES Key Search", presented at the rump session of Crypto '93.

Practical Cryptography for Data Internetworks, W. Stallings, editor, IEEE Computer Society Press, pp. 31-79 (1996)　に再録。
Reprinted in Practical Cryptography for Data Internetworks, W. Stallings, editor, IEEE Computer Society Press, pp. 31-79 (1996).

現在は以下で入手可能：
Currently available at 

http://www.eff.org/pub/Crypto/Crypto_misc/Technical/des_key_search.ps.gz 
http://www.eff.org/pub/Crypto/Crypto_misc/Technical/des_key_search.ps.gz 

[7] Matt Blaze, Whitfield Diffie, Ronald L. Rivest, Bruce Schneier, Tsutomu Shimomura, Eric Thompson, and Michael Wiener. 
[7] Matt Blaze, Whitfield Diffie, Ronald L. Rivest, Bruce Schneier, Tsutomu Shimomura, Eric Thompson, and Michael Wiener.

"Minimal key lengths for symmetric ciphers to provide adequate commercial security: A report by an ad hoc group of cryptographers and computer scientists", January 1996. 
"Minimal key lengths for symmetric ciphers to provide adequate commercial security: A report by an ad hoc group of cryptographers and computer scientists", January 1996.

http://www.bsa.org/policy/encryption/cryptographers_c.htmlにて入手可能。 
Available at http://www.bsa.org/policy/encryption/cryptographers_c.html 

[8] http://www.rsa.com/rsalabs/97challenge/ 
[8] http://www.rsa.com/rsalabs/97challenge/ 

[9] June 17, 1997, http://www.rsa.com/des/、 http://www.frii.com/~rcv/deschall.htm (February 24, 1998)、 http://www.wired.com/news/news/technology/story/10544.html、 http://www.distributed.netでの発表を参照。 
[9] June 17, 1997, See the announcements at http://www.rsa.com/des/ and http://www.frii.com/~rcv/deschall.htm (February 24, 1998), http://www.wired.com/news/news/technology/story/10544.html and http://www.distributed.net 


xiii 
xiii 

はじめに 
Preface 

プライバシーとコンピュータ・セキュリティの分野では、まともな情報を見つけるのは実にむずかしい。
In privacy and computer security, real information is too hard to find.

ほとんどの人は本当に何が起こっているか知らないし、知っている人たちはかたろうとしない。 
Most people don 't know what's really going on, and many people who do know aren't telling. 

この本は、隠された真実を暴露するために書かれた。
This book was written to reveal a hidden truth.

アメリカ政府が、情報を安全かつプライベートにするために使いなさいと推奨している標準的な手段「Data Encryption Standard」またはDESは、実は情報を安全にもプライベートにもしてくれないのである。
The standard way that the US Government recommends that we make information secure and private, the "Data Encryption Standard" or DES, does not actually make that information secure or private.

政府は、隠したはずの情報を復号するそこそこ簡単な方法をちゃんと知っているのだ
The government knows fairly simple ways to reveal the hidden information

（これはDESのクラッキングとか解読とか呼ばれる）。 
(called "cracking" or "breaking" DES). 

多くの科学者やエンジニアは、この事実を知っていたか、あるいはうすうす感じてはいた。
Many scientists and engineers have known or suspected this for years.

政府が何をしているかはっきり知っていた人たちは、「機密」情報漏洩で処罰されるのがこわくて、知っていることをみんなに話すことができなかった。
The ones who know exactly what the government is doing have been unable to tell the public, fearing prosecution for revealing "classified" information.

うすうす感づいただけの人たちは、その推測がまちがっているのではないかと思って、その推測を公表してこなかった。 
Those who are only guessing have been reluctant to publish their guesses, for fear that they have guessed wrong. 

この本では、われわれがDESクラック用に実際に作ったマシンを説明している。
This book describes a machine which we actually built to crack DES.

このマシンは実在するし、その存在も簡単に確認できる。
The machine exists, and its existence can easily be verified.

アメリカではすぐに買えるし、
You can buy one yourself, in the United States;

なんなら自分で作ることもできる。
or can build one yourself if you desire.

このマシンは民間で設計製造されたものなので、機密にはなっていない。
The machine was designed and built in the private sector, so it is not classified. 

われわれはこのマシンをパブリックドメインに寄付したので、もはや独占権が主張されることもない。
We have donated our design to the public domain, so it is not proprietary. 

このマシンが作れるものであり、実際に作られたということも、もはや疑問の余地はない。
There is no longer any question that it can be built or has been built.

細部まで公開してあるので、ほかの科学者やエンジニアたちもわれわれの作業をレビューし、再現し、さらに発展させることもできる。
We have published its details so that other scientists and engineers can review, reproduce, and build on our work.

もう疑問の余地はない。
There can be no more doubt.

DESは安全ではない。 
DES is not secure. 



xiv 
xiv 

各章の概要 
Chapters 

本書の最初の部分は、DESクラック用マシンをつくろうというElectronic Frontier Foundationの研究プロジェクトについての説明である。
The first section of the book describes the Electronic Frontier Foundation's research project to build a machine to crack DES.

次の部分では、われわれのデザインしたマシンの技術的な詳細がすべて記述してある。
The next section provides full technical details on the machine that we designed:

これは暗号研究コミュニティによるレビュー、批判、検討、そしてさらなる発展のためにやったことだ。
for review, critique, exploration, and further evolution by the cryptographic research community. 

最後の部分では、DESを解読するための総当たり方式について、見つけにくい技術報告をいくつか含んでいる。 
The final section includes several hard-to-find technical reports on brute force methods of cracking DES. 

技術的な説明 
Technical description 

第一章 概論ではプロジェクトを紹介して、EFFのDESクラック用マシンの基本的なアーキテクチャを説明している。
Chapter 1, Overview, introduces our project and gives the basic architecture of the Electronic Frontier Foundation's DES-cracking machine. 

第二章 設計仕様（Paul Kocher著、Cryptography Research）は、ソフト作者の観点からマシンの仕様を述べている。 
Chapter 2, Design Specification, by Paul Kocher of Cryptography Research, provides specifications for the machine from a software author's point of view. 

第三章ハード仕様（Advanced Wireless Technologies著）は、ゲートアレイのカスタムチップと、それをのせるボードについて、ハード設計者の観点から説明している。 
Chapter 3, Hardware Specification, by Advanced Wireless Technologies, provides specifications for the custom gate array chips, and the boards that carry them, from a hardware designer's point of view. 

技術的な設計詳細 
Technical design details 

第４章 ソースコードのスキャンでは、この本を光学式のスキャナに通して、われわれの設計したソフトと、専用ゲートアレイチップをつくるためのソースコードを正確に再現する方法を説明している。
Chapter 4, Scanning the Source Code, explains how you can feed this book through an optical scanner and regenerate the exact source code needed to build the software and the specialized gate array chip that we designed. 

第5章ソフトのソースコードには、PC上で走ってDESクラッカーの制御をするC言語のソフトのソースの完全なリストがある。 
Chapter 5, Software Source Code, contains a complete listing of the C-language software that runs on a PC and controls the DES-Cracker. 

第6章チップソースコードには、ゲートアレイのカスタムチップを設計したときのチップデザイン言語（VHDL）コードの完全なリストがある。 
Chapter 6, Chip Source Code, contains a complete listing of the chip design language (VHDL) code that specifies how we designed the custom gate array chip. 

第7章チップシミュレータのソースコードには、チップの働きをシミュレートするC言語のソフトの完全なリストがおかれている。
Chapter 7, Chip Simulator Source Code, contains a complete listing of the C-language software that simulates the operation of the chip,

これはチップの機能を理解して、チップがきちんとつくられたかどうか確認するためのテストベクトルを生成するのに使う。 
for understanding how the chip works, and for generating test-vectors to make sure that the chips are properly fabricated. 

第8章ハード基板の構成では、カスタムチップに電力とコンピュータ用インターフェースを提供する基板の回路図と、基板レイアウトやそれをつなぐバックプレーンの配置などがかかれている。
Chapter 8, Hardware Board Schematics, provides schematic diagrams of the boards which provide power and a computer interface to the custom chips, as well as information on the layout of the boards and the backplanes that connect them.  


xv 
xv 

関連研究論文 
Related Research Papers 

第9章
Chapter 9,

百万DESキーを破るには（Yvo Desmedt著）は1987年の論文で、多くのDESキーを同時に探索できるマシンについて、おもしろいデザインを提案している。
Breaking One Million DES Keys, by Yvo Desmedt, is a 1987 paper proposing an interesting design for a machine that could search for many DES keys simultaneously. 
 
第10章
Chapter 10,

暗号分析ハードのアーキテクチャに関する検討（Ian Goldberg and David Wagner）は1996年の研究で、DESなどの暗号をプログラマブル・ゲートアレイチップを使ってクラックする方法を検討している。
Architectural considerations for cryptanalytic hardware, by Ian Goldberg and David Wagner, is a 1996 study that explores cracking DES and related ciphers by using field-programmable gate array chips. 
 
第11章
Chapter 11,

効率のよいDESキー探索：追補（Michael J. Wiener）は、1993年にかれが発表した重要な論文に含まれた技術的な推定を、1998年のものにアップデートしたものである。
Efficient DES Key Search - An Update, by Michael J. Wiener, revises for 1998 the technology estimates from his seminal 1993 paper, 

この論文は、DESクラック用のカスタムチップについて、完全な回路図を載せた初のものである。 
which was the first to include full schematic diagrams of a custom chip designed to crack DES. 

第12章
Chapter 12,

著者たちについてはこのプロジェクトの構築で協力した組織や企業について説明している。 
About the Authors, describes the foundation and the companies which collaborated to build this project. 


1 
概論 
Overview 

本章の内容:
In this chapter: 

解読の政治性 
Politics of Deception 

ねらい 
Goals 

DES クラッキングの歴史 
History of DES Cracking 

EFFのDESクラッカープロジェクト 
EFF's DES Cracker Project 

アーキテクチャ 
Architecture 

ほかにはだれがDESをクラックしているだろう？ 
Who Else Is Cracking DES? 

DESを使っていたらどうすればいいの？ 
What To Do If You Depend On DES 

結論
Conclusion 

解読の政治性 
Politics of Decryption 

Electronic Frontier FoundationのDESクラッカープロジェクトを開始したのは、解読の政治性に興味があったからだ（脚注）。
We began the Electronic Frontier Foundation's DES Cracker project because of our interest in the politics of decryption.*

DESのように広く使われている暗号規格がどれだけ弱いものかということを社会が理解するのは重要なことである。
The vulnerability of widely used encryption standards like DES is important for the public to understand. 

「DESクラッカー」というのは、データ暗号化規格（DES）で暗号化された情報を、暗号化の際に使われた鍵を発見することで読める機械である。
A "DES Cracker" is a machine that can read information encrypted with the Data Encryption Standard (DES), by finding the key that was used to encrypt it.

「DESクラッキング」はこの探索プロセスの名前だ。
"Cracking DES" is a name for this search process.

これをいちばん簡単に行うには、正しいものがみつかるまで、可能な鍵を片っぱしから試していくことだ。
It is most simply done by trying every possible key until the right one is found, 

手間のかかるやり方で「ばか力探索（brute-force search）」と呼ばれる。
a tedious process called "brute-force search". 

もしDESで暗号化された情報が、それを見ていいことになっていない人物によって、簡単に解読できてしまうなら、DESを使うインフラのプライバシーとセキュリティはリスクにさらされることになる。
If DES-encrypted information can easily be decrypted by those who are not intended to see it, the privacy and security of our infrastructures that use DES are at risk.

多くの政治的、社会的、技術的な意志決定は、DESを解読するのがとてもむずかしいという前提で行われている。
Many political, social, and technological decisions depend on just how hard it is to crack DES. 

われわれは、いろいろな状況で、アメリカ政府のとても有能で尊敬も受けている人々が、DESをクラックするのにどれだけかかるか、という発言を行う事例が増えているのに気がついた。
We noticed an increasing number of situations in which highly talented and respected people from the U.S. Government were making statements about how long it takes to crack DES.

いずれの場合にも、こうした発言はわれわれの推定や、暗号研究者たちの見解とはかなりちがっていた。
In all cases, these statements were at odds with our own estimates and those of the cryptographic research community.

もっとひらたく言ってしまうと、こうした政府の役人は、うそをついているか、無能か、あるいはその両方なわけだ。
A less polite way to say it is that these government officials were lying, incompetent, or both.

かれらは、DESのクラックがわれわれの考えるよりもずっとずっと高価で時間がかかる、と発言していた。
They were stating that cracking DES is much more expensive and time-consuming than we believed it to be.

非常に信頼性の高い研究論文の予言では、DESを3-1/2時間でクラックするマシンは、開発コストまでいれても150万ドルでつくれる、と推計している。
A very credible research paper had predicted that a machine could be built for $1.5 million, including development costs, that would crack DES in 3-1/2 hours.

それなのに政府からでてくる推定では、メッセージ一つを解読するのにコンピュータ何千台も使って、数週間から数年はかかる、ということになっていた。
Yet we were hearing estimates of thousands of computers and weeks to years to crack a single message. 

_______________ 
* DES 
* DES,

（データ暗号化規格）は秘密鍵を使って機密メッセージを暗号化し、スクランブルされた出力に変える。
the Data Encryption Standard, encrypts a confidential message into scrambled output under the control of a secret key.

この入力メッセージは「平文」とも呼ばれ、結果的な出力を「暗号文」とも言う。
The input message is also known as "plaintext", and the resulting output as "ciphertext".

考え方としては、その秘密鍵を知っている受け手だけが暗号文を復号し、もとのメッセージを入手できる、というものだ。
The idea is that only recipients who know the secret key can decrypt the ciphertext to obtain the original message.

DESは56ビットの鍵を使っているので、鍵の可能性は 256 通りある。 
DES uses a 56-bit key, so there are 256 possible keys. 



1997年6月26日木曜日、アメリカ議会下院の国際関係委員会が、非公開の機密証言を受けている。
On Thursday, June 26, 1997 the U.S. House of Representatives' Committee on International Relations heard closed, classified testimony on encryption policy issues.

この委員会は、暗号についての輸出規制を廃止する法案を検討していた。
The Committee was considering a bill to eliminate export controls on cryptography.

この証言のあとで委員会は法案は書き換え、正反対の内容の代替案をかわりに入れた。
After hearing this testimony, the Committee gutted the bill and inserted a substitute intended to have the opposite effect.

一ヶ月後に、公聴会の検閲を受けた議事録が提供された。
A month later, a censored transcript of the hearing was provided;

全文は http://jya.com/hir-hear.htmを見てほしい。
see http://jya.com/hir-hear.htm. 

ここに抜粋を載せる。 
Here are excerpts: 

FBI Director、Louis J. Freehの発言： 
Statement of Louis J. Freeh, Director, Federal Bureau of Investigation 

. . . それにそういう情報に対してリアルタイムのアクセスどころか、まともに使える速度でのアクセスすら、できるようなコンピュータもテクノロジーもないんです。
. . . And we do not have the computers, we do not have the technology to get either real-time access to that information or any kind of timely access. 
 
何千ものコンピュータをつないで、それを4ヶ月まわし続けたら、最近実証されたみたいにメッセージ一つ解読できるかもしれません。
If we hooked together thousands of computers and worked together over 4 months we might, as was recently demonstrated decrypt one message bit.

そんな時間がかかったら、誘拐事件では意味がありませんし、国家安保にかかわる事態でも無意味です。
That is not going to make a difference in a kidnapping case, it is not going to make a difference in a national security case.

そういう情報を得るだけの技術もないし、ばか力式の能力もないのです。 
We don't have the technology or the brute force capability to get to this information. 

国家安全保障機関（National Security Agency）Deputy Director、William P. Crowell, Deputy Directorの発言 
Statement of William P. Crowell, Deputy Director, National Security Agency 

...さらに言わせてもらえればLouis  Freehの組織が単に技術的にもっとレベルをあげればいいのだ、なんていう人がいます。
. . . I would go further and say there have been people who have said that Louis Freeh's organization should just get smarter technically,

もうちょっと技術に明るくなったら、こんなものはすぐに破れる、とね。
and if they were just smarter technically, they would be able to break all of this stuff.

これについては、統計を一つだけあげます。
I would like to leave you with just one set of statistics,

そうしたら法案そのものについてちょっと申し上げておしまいにしましょう。 
and then I think I am going to close with just a few comments on the bill itself. 

法執行機関には、ばか力式の解決はできないのです。 
There is no brute force solution for law enforcement.

[墨ぬり-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --] 
[blacked out ----------------------------------------------]

学生のグループが -- いや、学生ではありません -- インターネットの連中が先週、56ビットDESを使ったメッセージ一つを破りました。
A group of students -- not students -- the Internet gang last week broke a single message using 56-bit DES.

一つ解読するのに、78,000台のコンピュータで96日かかっているのに、新聞の見出しは「DESの暗号は弱い」ですからね。 
It took 78,000 computers 96 days to break one message, and the headline was, DES has weak encryption. 

かれはこれがそんなに弱いとは思いません。
He doesn't consider that very weak.

これが64ビットの暗号なら、そしてそれはいまも輸出できて、さらに国内では自由に使えるわけですが、同じことをやれば7000年かかることになります。
If that had been 64-bit encryption, which is available for export today, and is available freely for domestic use, that same effort would have taken 7,000 years.

そしてこれが128ビット暗号なら、PGP, pretty good privacyがそうですが、宇宙の年齢の8.6兆倍かかったでしょう。 
And if it had been 128-bit cryptography, which is what PGP is, pretty good privacy, it would have taken 8.6 trillion times the age of the universe. 


1-3 
1-3 

公聴会で後出のコメント 
Comments made later in the hearing 

Gilman議長：
Chairman Gilman.

暗号解読の必要があったら、追加のマンパワーと機器が必要になりますか？
Would you need added manpower resource and equipment if there is a need to decrypt?

そしてそれは、いまでもめんどうな盗聴での言語の翻訳の問題を増やすものになりますか？ 
And would that add to your already difficult case of language translation in many of your wiretaps? 

Director Freeh：
Director Freeh.

まちがいなくそういう追加のリソースは必要になりますが、それよりもさっきここで述べた論点のほうがだいじだと思います。
We would certainly need those resources, but I think more importantly is the point that was made here.

National Research Council はFBI にもっとコンピュータを買えとすすめますし、ビル・ゲイツはわたしに、FBIの研究開発をアップグレードしろといいますが、
Contrary to the National Research Council recommendation that the FBI buy more computers and Bill Gates' suggestion to me that we upgrade our research and development 

[墨ぬり------------------------------] 
[blacked out------------------------------]

アメリカの産業界にもできないことで、それは最低限の堅牢さをもって、リアルタイムの暗号を解読することです。
American industry cannot do it, and that is decrypt real time encryption over a very minimal level of robustness.

[墨ぬり---------] 
[blacked out---------]

もし300万ドルもらえて、それでCrayコンピュータを買えたら、それでメッセージ一つ解読するのに何年かかります？ 
If you gave me $3 million to buy a Cray computer, it would take me how many years to do one message bit? 

Mr. Crowell：
Mr. Crowell.

64ビットなら7,000年。 
64 bits, 7,000 years. 

Director Freeh：
Director Freeh.

誘拐事件では、そんな悠長はことはしてられないのです。
I don't have that time in a kidnapping case.

こっちがつぶれてしまいます。 
It would kill us. 

1998年3月17日、On March 17, 1998, Principal Associate Deputy Attorney GeneralのRobert S. Littは、アメリカ議会上院司法委員会の憲法・連邦主義・所有権小委員会で証言した。
On March 17, 1998, Robert S. Litt, Principal Associate Deputy Attorney General, testified to the U.S. Senate Judiciary Committee, Subcommittee on the Constitution, Federalism, and Property.

公聴会のテーマは「デジタル時代のプライバシー：暗号と義務的アクセス」である。
The subject of the hearing was "Privacy in a Digital Age: Encryption and Mandatory Access".

リット氏証言の全文は、以下にある： 
Mr. Litt's whole statement is available at 

http://www.computerprivacy.org/archive/03171998-4.shtml 
http://www.computerprivacy.org/archive/03171998-4.shtml.

DESクラッキングと関係ある部分は以下のとおり： 
The part relevant to DES cracking is: 

なかにはこれが、法執行機関のリソース問題にすぎない、という人もいます。
Some people have suggested that this is a mere resource problem for law enforcement.

この人たちは、犯罪の証拠となっている通信やデータの平文に、法的なアクセスが必要となったら、法執行機関が単に資源を強力暗号コードの解読に集中させて、鍵を全部試してみればいいのだと思っているのです。
They believe that law enforcement agencies should simply focus their resources on cracking strong encryption codes, using high-speed computers to try every possible key when we need lawful access to the plaintext of data or communications that is evidence of a crime.

でも、このアイデアはまったく使い物になりません。
But that idea is simply unworkable,

こういうばか力式の解読は、公安保全に使うには時間がかかりすぎるからです。
because this kind of brute force decryption takes too long to be useful to protect the public safety.

たとえば56ビット鍵のメッセージ一つを解読するだけで、ペンティアム級コンピュータ14,000台で4ヶ月かかりました。
For example, decrypting one single message that had been encrypted with a 56-bit key took 14,000 Pentium-level computers over four months;

これだけのリソースは明らかにFBIにはありませんし、ましてジェファソン市警なんかにあるわけがない。 
obviously, these kinds of resources are not available to the FBI, let alone the Jefferson City Police Department. 

こうした証言のどこがまちがっているのか？ 
What's Wrong With Their Statements? 

ここで引用した証言の一部は、文字通りの意味では正しいものもある。
Some of the testimony quoted may have been literally true;

でも、ここにはごまかしが入っている。
nevertheless, it is deceptive.

政府監督官僚たちが挙げた解読時間推定はすべて、汎用コンピュータを使った数字に基づいている。
All of the time estimates presented by Administration officials were based on use of general-purpose computers to do the job.

でもこれはやりかたとしては根本的にまちがっているし、この役人たちはそれを知っているはずなのだ。 
But that's fundamentally the wrong way to do it, and they know it. 

普通のコンピュータは、DESクラッカーとして使うにはむいていない。
A ordinary computer is ill-suited for use as a DES Cracker.

そもそもDESのデザインからして、ソフトでやるには性質上とても遅いけれど、ハードでやるととてもはやいのである。
In the first place, the design of DES is such that it is inherently very slow in software, but fast in hardware.

さらに、いまのコンピュータは並列処理をほとんどしない。
Second, current computers do very little in parallel; 

チップ設計者たちは、どんな命令が実行されるかわからないので、あらゆる組み合わせに対処できるようにしなくてはならないからだ。
the designers don't know exactly what instructions will be executed, and must allow for all combinations.  


1-4 
1-4 

DESをまともにクラックしようと思ったら、専用ハードを使うことだ。
The right way to crack DES is with special-purpose hardware.

カスタムチップは、クロックが遅くても最高速の汎用コンピュータに楽々勝てる。
A custom-designed chip, even with a slow clock, can easily outperform even the fastest general-purpose computer.

さらには、ボード一枚にチップをたくさんのせることも可能だ。
Besides, you can get many such chips on a single board,

ふつうのコンピュータは、マザーボード上にチップ一つしかない。 
rather than the one or two on a typical computer's motherboard. 

ばか力探索方式でクラックできる鍵のサイズには、現実的に考えれば限界はあるけれど、DESが設計された1970年代に、NSAは意図的にDESの鍵のサイズを56ビットに制限したので、DESはばか力方式でクラックできる。
There are practical limits to the key sizes which can be cracked by brute-force searching, but since NSA deliberately limited the key size of DES to 56 bits, back in the 1970's when it was designed, DES is crackable by brute force.

今日のテクノロジーでは、64ビットや128ビットの鍵をもった暗号方式は、解読できないかもしれない---が、できるかもしれない。
Today's technology might not be able to crack other ciphers with 64-bit or 128-bit keys--or it might.

だれかが試して、その結果を公開し、科学的な検討をうけるまでは、だれにもわからない。
Nobody will know until they have tried, and published the details for scientific scrutiny.

こうした暗号方式は、DESとは内部構造もかなりちがっているので、その方式の構造を利用することでかなりの数の鍵を除外できてしまうかもしれない。
Most such ciphers have very different internal structure than DES, and it may be possible to eliminate large numbers of possible keys by taking advantage of the structure of the cipher.

高名な暗号学者たちが、安全のために必要な鍵のサイズについて1996年の論文で推定を発表している*。
Some senior cryptographers estimated what key sizes were needed for safety in a 1996 paper;*

それによると、ばか力クラッキングに対抗するためには最低でも75ビット、そして20年にわたって情報を保護するには、最低でも90ビットの鍵がいる、とされている。
they suggest that to protect against brute force cracking, today's keys should have a minimum of 75 bits, and to protect information for twenty years, a minimum of 90 bits. 

またばか力方式の探索コストの推定も、現実世界で暗号化テキストを復元するコストを過大に見積もっている。
The cost of brute-force searching also overstates the cost of recovering encrypted text in the real world.

法執行に対して暗号が及ぼす現実的なインパクトについての、重要な報告+によると、警察が暗号化ファイルにアクセスできなかったために、容疑者が釈放される結果となった事例は、実は一つもない。
A key report on the real impact of encryption on law enforcement+ reveals that there are no cases in which a lack of police access to encrypted files resulted in a suspected criminal going free.

多くの場合、平文はほかの手段で復元されている。
In most cases the plaintext was recovered by other means,

たとえば容疑者に鍵を出すよう要求したり、ディスク上でその情報の別のコピーを見つける、などの方式である。
such as asking the suspect for the key, or finding another copy of the information on the disk.

ばか力方式を使わなければならなかったときにさえ、キーが本当にランダムだったことはほとんどなく、ありそうな順に探すことができた。
Even when brute force is the method of choice, keys are seldom truly random, and can be searched in the most likely order.  


輸出規制と DES 
Export Controls and DES 

いまのアメリカ政府は、企業や個人が機密保持のためにDESを使うハードやソフトを輸出することを制限している。
The U.S. Government currently restricts the ability of companies, individuals, and researchers to export hardware or software that includes the use of DES for confidentiality.

こうした「輸出制限（export controls）」は、ネットワーク化されたコンピュータや携帯電話など、一般用の通信装置のセキュリティとプライバシー開発にとって、強烈な阻害要因となってきた。
These "export controls" have been a severe impediment to the development of security and privacy for networked computers, cellular phones, and other popular communications devices.

DESより強い暗号化アルゴリズムの使用も規制されている。 
The use of encryption algorithms stronger than DES is also restricted. 

1996年12月、政府は正式に輸出業者に対し、DESを製品に含めていいという許可を与えた。
In December 1996, the government formally offered exporters the ability to incorporate DES, 

ただしそれより強いものは認められない。
but nothing stronger, into their products.

そしてこの許可の代償として、こうした企業は政府との同意書に署名しなくてはならず、その同意書はその企業たちに、2年以内に製品に「キーリカバリ」を含めるよう義務づけるものとなっていた。
The catch is that these companies would have to sign an agreement with the government, obligating them to install "key recovery" into their products within two years. 

___________________ 
* Minimal Key Lengths For Symmetric Ciphers To Provide Adequate Commercial Security: 
A Report By An Ad Hoc Group Of Cryptographers And Computer Scientists. 
Matt Blaze, Whitfield Diffie, Ronald L. Rivest, Bruce Schneier, Tsutomu Shimomura, Eric Thompson, Michael Wiener, January 1996. 
Available at http://www.bsa.org/policy/encryption/index.html. 
+ Encryption and Evolving Technologies: Tools of Organized Crime and Terrorism, by Dorothy E. Denning and William E. Baugh, Jr. National Strategy Information Center, 1997. 
ISSN 1093-7269. 



1-5 
1-5 

キーリカバリは、各メッセージに使った鍵のコピーを提出させて、政府が好きなだけメッセージを解読できるようにして、しかもそれを製品のユーザは防止したりコントロールしたりできないという方式である。
Key recovery technology provides a way for the government to decrypt messages at will, by offering the government a copy of the key used in each message, in a way that the product's user cannot circumvent or control.

一言で、政府が要求していたのは：
In short, the government's offer was:

おれたちと野合して顧客のプライバシーを侵害させろ、さもないと高セキュリティ製品はいっさい輸出させてやらない、ということだ。
collude with us to violate your customers' privacy, or we won't let you export any kind of secure products.  

同時に、各個別業の暗号製品輸出申請書を検討するグループにFBIも加えられた。
At the same time, the FBI was let into the group that reviews each individual company's application to export a cryptographic product.

あらゆる報告が指摘しているのは、FBIが強力なおどしをかけていて、国家の安全保障に対していっさい脅威とならないようなさまざまな製品（というのも、それらの製品はFBIが口出しするようになるまでは輸出できていたから）についても、輸出に反対しているということだ。
All reports indicate that the FBI is making good on the threat, by objecting to the export of all kinds of products that pose no threat at all to the national security (having been exportable in previous years before the FBI gained a voice).

FBIはどうやら、自分が嫌われ、おそれられるようになれば、会社たちが命令にしたがうようになる、と考えているらしい。
The FBI appears to think that by making itself hated and feared, it will encourage companies to follow orders.

ところが実際はかえって、企業たちはFBIが輸出規制を悪用できるようにした規制法規の撤回を求めるようになってしまった。
Instead it is encouraging companies to overturn the regulatory scheme that lets the FBI abuse the power to control exports. 

業界は大規模なロビイング団体Americans for Computer Privacy (http://www.computerprivacy.org)を設立しているが、これは民生暗号輸出についてはいっさい規制がかからないように、法改正を求めている。
Industry started a major lobbying group called Americans for Computer Privacy (http://www.computerprivacy.org), which is attempting to change the laws to completely decontrol nonmilitary encryption exports. 

何十かの企業がキーリカバリに合意したようだが、キーリカバリを導入するという約束を本気で守るつもりの企業が、実際にはいくつあるのかははっきりしない。
Some dozens of companies to signed up for key recovery, though it is unclear how many actually plan to follow through on their promise to deploy the technology.

こうした企業のなかで、製品の広告にキーリカバリをうたったものはほとんどない。
You will not find many of these companies trumpeting key recovery in their product advertisements.

ユーザは、キーリカバリがセキュリティに制限をつけるものなのを知っているので、あまり歓迎しない。
Users are wary of it since they know it means compromised security.

もし顧客がそういう製品を買わないのなら、開発しても意味がない。 
If customers won't buy such products, companies know it makes no sense to develop them. 

企業としていちばんいいのは、おそらくは本当のセキュリティを提供できるような製品を、世界の中で輸出制限のかからない地域で開発することだ。
The best course for companies is probably to develop products that provide actual security, in some jurisdiction in the world which does not restrict their export.

すでにこれをやっている企業もある。
Some companies are doing so.

でも政府が「妥協案」を提供しているため、足踏みしている企業はあえてここまでやろうとしない。
The government's "compromise" offer discourages hesitant companies from taking this step,

この妥協案では、もっと穏健な折衷案を採用してもいいよ、というものだ。
by providing a more moderate and conciliatory step that they can take instead.

わざわざ外国に暗号開発力をおくだけの手間をかけた企業は、みんなDESより強い技術を使っている。
Companies that go to the effort to build overseas cryptographic expertise all use stronger technology than DES,

これはセールスポイントでもあり、また技術の陳腐化を防ぐことにもなる。
as a selling point and to guard against early obsolescence.

もしこういう企業がアメリカ国内にとどまり、政府のキーリカバリに参加し、DESを見放さないように説得できるなら、政府の勝利は続き、市民のプライバシーは負け続ける。
If those companies can be convinced to stay in the US, play the government's key-recovery game, and stick with DES, the government continues to win, and the privacy of the public continues to lose.  

この政府のニンジンぶら下げ方式の成否は、業界と市民たちがDESのセキュリティについて誤解したままでいてくれるかどうかにかかっている。
The success or failure of the government's carrot-and-stick approach depends on keeping industry and the public misled about DES's security.

もしDESを使った製品がセキュリティが低いと思われてしまえば、会社はDESなどというろくでもない代物ごときのために、顧客の生得のプライバシー権を譲り渡すのに同意する理由はない。
If DES-based products were perceived as insecure, there would be little reason for companies to sign away their customers' privacy birthrights in return for a mess of DES pottage.

もしDESを使った製品が高セキュリティと思われていて、でも政府が実はそれが低セキュリティなのを知っているとしたら、政府は企業から譲歩を引き出せる一方で、自分は通信を傍受できる能力を温存できる。
If DES-based products are perceived as secure, but the government actually knows that the products are insecure, then the government gets concessions from companies, without impacting its ability to intercept communications.

そして市民にそれを知られなければ、政府としてはいちばんいい思いができるわけだ。 
Keeping the public ignorant gives the government the best of both worlds. 



1-6 
1-6 

政治的な動機とEFFの対応 
Political Motivations and EFF's Response 

われわれは、アメリカ政府官僚が意図的にDES暗号の強さについて誤解するようにしむけているのだと考える。
その狙いは： 
We speculate that government officials are deliberately misleading the public about the strength of DES encryption: 

市民たちにDESを使い続けさせて、政府機関が市民たちを盗聴できるようにする。 
To encourage the public to continue using DES, so their agencies can eavesdrop on the public. 

政府が解読に苦労するような、DESよりもっと強力な暗号規格が広がるのを防ぐ。 
To prevent the widespread adoption of stronger standards than DES, which the government would have more trouble decrypting. 

DESの輸出可能性を取引材料としてちらつかせる。
To offer DES exportability as a bargaining-chip,

これは政府にとってはコストがほとんどないけれど、価値があると思われている。 
which actually costs the government little, but is perceived to be valuable. 

議員や大統領など、政策立案者たちに、法執行機関が暗号化データでとても困っていて、それを解読する現実的な方法がないと思わせることで、キーリカバリなどのとんでもない手法を採択させる。
To encourage policy-makers such as Congressmen or the President to impose drastic measures such as key recovery, in the belief that law enforcement has a major encrypted-data problem and no practical way to crack codes. 

暗号政策推進者として、われわれはつらい立場におかれることとなった。
As advocates on cryptography policy, we found ourselves in a hard situation. 

非常に地位の高い人たちが、自分たちの有害な狙いを推進するために、議会や市民に対して意図的にウソをついているか、あるいはそこに含まれる問題について無知なために、市民の自由を深刻なかたちで侵害しようと主張しているとしかわれわれには思えなかった。
It appeared that highly credible people were either deliberately lying to Congress and to the public in order to advance their own harmful agendas, or were advocating serious infringement of civil liberties based on their own ignorance of the underlying issues.

かれらがウソをついているという可能性がいちばんこわかった。
Most troubling is the possibility that they were lying.

こうした政府官僚は、単に価値の高い機密作業を公開しないための盾になっているつもりだったのかもしれない。
Perhaps these government executives merely saw themselves as shielding valuable classified efforts from disclosure.

よい政府を支持する者として、われわれはプログラムを機密にしたいからといって、官僚がそれについて証言するときに自らを欺くようなことは正当化されないと考える。
As advocates of good government, we do not see that classifying a program is any justification for an official to perjure themselves when testifying about it.

（意見を述べるのを拒否するというならまだわかるが、
(Declining to state an opinion is one thing;

真実でない発言を事実であるかのように述べるとなると、話はまったく別だ）。
making untruthful statements as if they were facts is quite another.)  


National Research Councilは、暗号問題について研究して、1996年に非常に充実した報告を発表した*。
The National Research Council studied encryption issues and published a very complete 1996 report.*

この報告でいちばん興味深い結論は、「国家の暗号政策に関する議論は、機密としない状態でもじゅうぶんに実施できる」というものだった。
The most interesting conclusion of their report was that "the debate over national cryptography policy can be carried out in a reasonable manner on an unclassified basis".

これは、機密の影に隠れている政府機関が誠実に対応してくれるものという前提があってのことである。
This presumes good faith on the part of the agencies who hide behind classified curtains, though.

もしかれらの声明が、世論を操作しようとするウソであるなら、正直でまともな一般議論は絶対にかれらを不正直でまともでない参加者として排除しなくてはならない。
If it turns out that their public statements are manipulative falsehoods, an honest and reasonable public debate must necessarily exclude them, as dishonest and unreasonable participants.  

一方で、もし政府高官が無知または無能なために劣悪な政策決定が行われているのであれば、正直な支持者の役割は、議論に貢献することだろう。
In the alternative, if poor policy decisions are being made based on the ignorance or incompetence of senior government officials, the role of honest advocates should be to inform the debate.  

_________________ 
* Cryptography's Role In Securing the Information Society, Kenneth W. Dam and Herbert S. Lin, editors. National Academy Press, Washington, DC, 1996. 



1-7 
1-7 

こうした懸念に答えるため、EFFは研究プログラムを開始した。
In response to these concerns, EFF began a research program.

この研究結果で、DESが短期間で安上がりにクラックできることが証明された。
Our research results prove that DES can be cracked quickly on a low budget.

これは、役人たちがうそをついていたか、無能だったということを証明している。
This proves that these officials were either lying or incompetent.

本書はその研究を記述したもので、ほかの科学者がそれを確認できるようにするためのものだ。 
The book you are holding documents the research, and allows it to be validated by other scientists. 

ねらい 
Goals 

EFFのDESクラッカー研究プロジェクトのねらいは、DESをつかいものになるかたちでクラックするマシンをつくるのが、どれだけ安上がりか高価かを見極めることだ。
The goal of EFF's DES Cracker research project is to determine just how cheap or expensive it is to build a machine that cracks DES usefully. 
 
技術的には、平文認識装置の優れた設計を検討することにも興味があった。
Technically, we were also interested in exploring good designs for plaintext recognizers.

平文認識装置とは、復号結果が正しいものである可能性が高く、専用ソフト（または人間）が見てる価値があると認識してくれる回路だ。
These are circuits that can notice when the result of decryption is likely enough to be correct that specialized software--or a human--should look at it.

これについてはほとんど研究が発表されていないものの*、暗号解析の有効なシステムにおいてはかならず重要な位置を占める回路だ。
Little research has been published on them,* yet they are a vital part of any efficient system for cryptanalysis.  

この研究をするだけでも、EFFはDESをクラックする費用についての真相を知ることができる。
Merely doing the research would let EFF learn the truth about the expense of cracking DES.

でも、その研究を公表して機械をデモすることでのみ、DESの強さについての真相を一般に報せることができる。
But only publishing the research and demonstrating the machine would educate the public on the truth about the strength of DES.

プレス発表や技術論文だけでは不十分だ。
Press releases and even technical papers would not suffice;

もしそれでいいなら、Michael Wienerのすばらしい1993年論文に100万ドルのDESクラッカーの回路が登場しているのだから、すでに用は足りているはずだ。
the appearance of schematics for a million-dollar DES Cracker in Michael Wiener's excellent 1993 paper should have been enough.

でも、人々はいまだにDESを導入し、議員たちはその強さについて、高官たちの保証をめくら滅法にうのみにし続けている。 
But people still deploy DES, and Congressmen blindly accept the assurances of high officials about its strength. 

自分の目で実際に見るまで、真実であっても信用しないという人は多い。
There are many people who will not believe a truth until they can see it with their own eyes.

DESをものの数日でクラックできる物理的なマシンを本当に見せるというのは、DESにセキュリティを託すことはできないというのを、そういう人たちに納得させる唯一の方法だ。
Showing them a physical machine that can crack DES in a few days is the only way to convince some people that they really cannot trust their security to DES. 

別の人々は、ほかのチームが何度かそのマシンを再現しない限り、われわれの主張を信用しないだろう
Another set of people might not believe our claims unless several other teams have reproduced them.

（これは科学的手法の基本的な部分である）。
(This is a basic part of the scientific method.)

それに、多くの人はこういうボックスがどういう仕組みで動くのか、そしてどうやってそれがたった20万ドルでつくれたのか、当然ながら興味を持つだろう。
And many people will naturally be interested in how such a box works, and how it was built for only about $200,000.

この本はそういう人たちのためにかかれた。
This book was written for such people.

ここにはDESクラッカーの完全な仕様と設計書が掲載されているし、基板の回路図も、ソフトやゲートアレイの設計についても完全なリストがあがっている。
It contains the complete specifications and design documents for the DES Cracker, as well as circuit diagrams for its boards, and complete listings of its software and its gate array design.

われわれの設計をすべて公開したことで、ほかのチームは短時間でこれを再現し、確認し、さらに設計を改善させることができる。
The full publication of our design should enable other teams to rapidly reproduce, validate, and improve on our design.  

_________________ 
* しかしながら、 David A. Wagner and Steven M. Bellovin, "A Programmable Plaintext Recognizer," 1994 （http://www.research.att.com/~smb/papers/recog.psまたはrecog.pdf）を見よ。 
* But see: David A. Wagner and Steven M. Bellovin, "A Programmable Plaintext Recognizer," 1994. Available at http://www.research.att.com/~smb/papers/recog.ps or recog.pdf. 



1-8 
1-8 

DES クラッキングの歴史 
History of DES Cracking 

DESクラッカーは、1970年代から科学文献や一般文献でなんどか言及されてきた。
DES Crackers have been mentioned in the scientific and popular literature since the 1970s.

Whitfield Diffieの序文にもそのいくつかがかかれている。
Whitfield Diffie's Foreword describes several of them.

近年で、いちばん詳細にそれを記述したのは、1993年にBell Northern ResearchのMichael Wienerが発表したものである。
The most recent detailed description was in a paper by Michael Wiener of Bell Northern Research in 1993.

Wienerの論文は、カスタムチップで作ったDESクラッカーの詳細設計をふくんでいた。
Wiener's paper included a detailed hardware design of a DES Cracker built with custom chips.

チップは基板にのり、そのボードが電話交換機みたいに機械的な「フレーム」におさまることになっている、
The chips were to be built into boards, and the boards into mechanical "frames" like those of telephone central office switches.

この設計を実現しようと思ったら100万ドルほどかかり、平文と暗号文が与えられていれば、平均3-1/2時間（最悪7時間）でDES鍵を見つけられる。
A completed design would have cost about a million dollars and would determine a DES key from known plaintext and known ciphertext in an average of 3-1/2 hours (7 hours in the worst case). 

Wiener氏はこの論文の結論を1998年に更新した。
Mr. Wiener updated his conclusions in 1998,

5年間の技術的な変化を反映させるためである。
adjusting for five years of technological change.

この更新した論文も本書に含まれている。
His update paper is included in this book,

この更新版をもともと刊行したRSA Data Securityには、許可を与えてくれて感謝したい。
thanks to the courtesy of RSA Data Security, which originally published his update. 

カリフォルニア大学バークレー校のIan Goldberg と David Wagner は、別のアプローチをとっている。
Ian Goldberg and David Wagner of the University of California at Berkeley took a different approach.

かれらの設計では、「現場プログラム可能ゲートアレイ（field programmable gate array, FPGA)を使っている。
Their design used a "field programmable gate array" (FPGA),

これは、製造したあとからプログラミングして、いろいろな回路にしたてることができるチップだ。 
which is a chip that can be reprogrammed after manufacturing into a variety of different circuits. 


FPGA チップは、Wienerの設計に使ってあるカスタムチップよりもおそいけれど、少量でもすぐに買えて、設計に大きな初期投資がいらない。
FPGA chips are slower than the custom chips used in the Wiener design, but can be bought quickly in small quantities, without a large initial investment in design.

でっかいマシンを設計するのに、百万ドルのかなりの部分を使ってしまうよりも、この研究者たちは汎用チップをいくつか買ってきて、それをおそいDESクラッカーになるようにプログラムした。
Rather than spend a big chunk of a million dollars to design a big machine, these researchers bought one or two general purpose chips and programmed them to be a slow DES Cracker.

このおかげで、この遅いチップをどれだけ積み上げれば、つかいものになるDESクラッカーがつくれるかをすぐに計測できた。
This let them quickly measure how many slow chips they would need to pile up to make a practical DES Cracker. 

この論文も本書に収録されている。 
Their paper is also included in this book. 


EFFのDESクラッカープロジェクト 
EFF's DES Cracker Project 

Electronic Frontier FoundationがDESクラッキングの検討をはじめたのは、1997年のことだった。
The Electronic Frontier Foundation began its investigation into DES Cracking in 1997.

最初の計画では、FPGAをたくさん使ったDESクラッカーができないかと考えていた。 
The original plan was to see if a DES Cracker could be built out of a machine containing a large number of FPGA's. 

FPGAでできた大規模マシンは、商業市場に存在している。
Large machines built out of FPGAs exist in the commercial market

これはチップ製造前に、大規模な新チップをシミュレートするために使われる。
for use in simulating large new chip designs before the chip is built.

比較的能力の低いFPGAを何千も集めれば、非常に性能の高いカスタムチップをシミュレートできる。
A collection of thousands of relatively incapable FPGA chips can be put together to simulate one very capable custom chip,

ただし速度は、実際のカスタムチップの1/10から1/100になる。
although at 1/10th or 1/100th of the speed that the eventual custom chip would run at.

この機能を使って、チップ設計者は高価で時間のかかる物理チップをつくる前に、チップの「バグ」を取り除く。 
This capability is used by chip designers to work the "bugs" out of their chip before committing to the expensive and time-consuming step of fabricating physical chips from their design. 

EFFは、結局そんなチップシミュレータは調達しなかった。
EFF never got access to such a chip simulator.

かわりに、検討をすすめるなかで、Cryptography ResearchのPaul Kocherに出会った。
Instead, our investigations led us to Paul Kocher of Cryptography Research.

ポールはこれまでに、カスタムゲートアレイチップを、何千個単位のバッチで安くつくってくれる、ハード設計者といっしょに仕事をしたことがあったのだ。
Paul had previously worked with a team of hardware designers who knew how to build custom gate array chips cheaply, in batches of a few thousand chips at a time.  


1-9 
1-9 

ポールとEFFは、Advanced Wireless Technologiesの技術者と会って、20万ドルくらいの予算でつかいものになるDESクラッカーがつくれると見積もった。
Paul and EFF met with the chip designers at Advanced Wireless Technologies, and determined that a workable DES Cracker could be built on a budget of about $200,000.

できるマシンは、例となる8バイトの平文と暗号文が一つわかっていれば、平均で一週間以下でキーをつきとめられる。
The resulting machine would take less than a week, on average, to determine the key from a single 8-byte sample of known plaintext and ciphertext.

さらに平文の統計的な特徴がわかっていれば、そのキーを16ビットの暗号文から推定するのも、ほとんど同じくらいしかかからない。
Moreover, it would determine the key from a 16-byte sample of ciphertext in almost the same amount of time, if the statistical characteristics of the plaintext were known or guessable.

たとえばもし平文が電子メールのメッセージなのがわかっていれば、このマシンは文字や数字や記号しかない平文をうみだすキーをすべて発見できる。
For example, if the plaintext was known to be an electronic mail message, it could find all keys that produce plaintext containing nothing but letters, numbers, and punctuation.

こうすればこのマシンは、現実世界の暗号解読問題を解決するのに使いでが高まる。 
This makes the machine much more usable for solving real-world decryption problems. 

われわれのDESクラッカーに、革命的な部分はなにもない。
There is nothing revolutionary in our DES Cracker.

DESをどうクラックすればいいかについて、暗号研究コミュニティでは何年もまえからでまわっていたふつうのアイデアを使っている。
It uses ordinary ideas about how to crack DES that have been floating around in the cryptographic research community for many years.

唯一のちがいは、われわれは論文を書くだけでなく、それを本当に作ってしまったということだ。
The only difference is that we actually built it, instead of just writing papers about it.

ほとんど同じマシンは、去年だろうと一昨年だろうと、5年前、10年前だろうとつくれた。
Very similar machines could have been built last year, or the year before, or five or ten years ago;

ただ、速度は遅くてもっと高価だったかもしれないけれど。 
they would have just been slower or more expensive. 


アーキテクチャ 
Architecture 

EFFのDESクラッカーの設計は、考え方は簡単だ。
The design of the EFF DES Cracker is simple in concept.

ふつうのパソコンを、大規模なカスタムチップ・アレイにつないだだけである。
It consists of an ordinary personal computer connected with a large array of custom chips. 

パソコン側のソフトは、カスタムチップに探索をはじめろと告げて、ユーザとのやりとりも担当する。
Software in the personal computer instructs the custom chips to begin searching, and interacts with the user.

カスタムチップはその後は、おもしろそうな鍵を見つけるか、あるいは探索用に鍵空間の新しい部分を指定してもらうまで、ソフトからは指図を受けない。
The chips run without further help from the software until they find a potentially interesting key, or need to be directed to search a new part of the key space.

ソフトはたまにチップにお伺いをたてて、おもしろそうな鍵がみつかったかどうかを調べる。 
The software periodically polls the chips to find any potentially interesting keys that they have turned up. 

ハードウェアの仕事は、答えを見つけることではない。
The hardware's job isn't to find the answer.

むしろ、正しくない答えの大部分を排除することだ。
but rather to eliminate most of the answers that are incorrect.

そうすれば、残りのただしいかもしれない鍵を検索する仕事は、ソフトの速度でも十分に対応できる。
Software is then fast enough to search the remaining potentially-correct keys, 

ソフトが、「もっともらしいもの（false positives）」を本当の答えから仕分けしてくれるわけだ。
winnowing the false positives" from the real answer.

このマシンの強みは、単純だが強力な探索回路が何千回も使われるため、ソフトで鍵空間のごく一部を探索するだけで答えがみつかる、という点にある。
The strength of the machine is that it replicates a simple but useful search circuit thousands of times, allowing the software to find the answer by searching only a tiny fraction of the key space.  

ちょっとのソフトで協調させるだけで、DESキーの探索問題は「高度に並列処理可能（highly parallelizable)」である。
As long as there is a small bit of software to coordinate the effort, the problem of searching for a DES key is "highly parallelizable".

つまり、たくさんのマシンを同時に動かすことで、問題を効率よく解決できるということだ。
This means the problem can be usefully solved by many machines working in parallel, simultaneously.

たとえば、DESクラッカーチップ一つでなら、鍵を探すのに何年もかかる。
For example, a single DES-Cracker chip could find a key by searching for many years.

DESチップを千個使えば、同じ問題を千分の一の時間で解決できる。
A thousand DES-Cracker chips can solve the same problem in one thousandth of the time.

DESチップが100万個あれば、理論的には同じ問題が100万分の一の時間で解決できる。
A million DES-Cracker chips could theoretically solve the same problem in about a millionth of the time,

ただしこの場合には、各チップをスタートさせるときのオーバーヘッドが必要時間にきいてきてしまうだろう。
though the overhead of starting each chip would become visible in the time required.

われわれの作った実際のマシンは、チップ1536個を使っている。 
The actual machine we built contains 1536 chips. 


1-10 
1-10 

ばか力式の探索を行うときには、もちろん鍵をかたっぱしから探していくことになるわけだが、多少のコツはある。
When conducting a brute-force search, the obvious thing to do is to try every possible key, but there are some subtleties.

キーはどんな順番で探してもいい。
You can try the keys in any order.

もしキーがランダムではないと思ったら、可能性の高そうなものから試していくといい。
If you think the key isn't randomly selected, start with likely ones. 

正しいキーがみつかれば、そこで止めればいい。
When you finally find the right key, you can stop;

残りはためさなくていい。
you don't have to try all the rest of the keys.

最初の百万回で見つかるかもしれないし、
You might find it in the first million tries;

最後の百万回でみつかるかもしれない。
you might find it in the last million tries.

平均では、道半ばで見つかることになる
On average, you find it halfway through 

（つまり可能な鍵を半分までためしたところで）。
(after trying half the keys).

だから、バカ力方式の所要時間は、ふつうは鍵をみつける平均時間で示される。
As a result, the timings for brute-force searches are generally given as the average time to find a key.

最大必要時間は、平均時間の二倍だ。 
The maximum time is double the average time. 


探索ユニット（search unit） 
Search units 

EFF DESクラッカーの核となるのは、探索ユニットだ。
The search unit is the heart of the EFF DES Cracker;

DESクラッカーには探索ユニットが何千も入っている。 
it contains thousands of them. 

探索ユニットは小さなハードウェアで、鍵と暗号文の64ビットブロックを2つとってくる。
A search unit is a small piece of hardware that takes a key and two 64-bit blocks of ciphertext.

その暗号文を鍵で復号してみて、でてきた結果が「おもしろい」かどうかを調べる。
It decrypts a block of ciphertext with the key, and checks to see if the resulting block of plaintext is "interesting".

おもしろくなければ、鍵に1を足して同じことを繰り返し、鍵空間をずっと探していく。 
If not, it adds 1 to the key and repeats, searching its way through the key space. 

もしこの最初の復号が「おもしろい」結果をうみだせば、同じ鍵で暗号文の次のブロックを復号してみる。
If the first decryption produces an "interesting" result, the same key is used to decrypt the second block of ciphertext.

もしどっちの結果もおもしろければ、探索ユニットは止まって、ソフトに対しておもしろい鍵を見つけたよ、と連絡する。
If both are interesting, the search unit stops and tells the software that it has found an interesting key.

二番目のブロックの復号結果がおもしろくなければ、探索ユニットはまた鍵に1を足して、鍵空間の探索を続ける。 
If the second block's decryption is uninteresting, the search unit adds one to the key and goes on searching the key space. 

おもしろい結果をみつけて探索ユニットが止まったら、ホストのコンピュータは結果を検討して、それが本物の答えか、それともただの「もっともらしいもの」かどうかを検討しなくてはならない。
When a search unit stops after finding an interesting result, software on the host computer must examine the result, and determine whether it's the real answer, or just a "false positive".

もっともらしいものというのは、ハードが見たらおもしろそうに見えたけれど、実際には問題の答えではない平文のことだ。
A false positive is a plaintext that looked interesting to the hardware, but which actually isn't a solution to the problem.

ハードウェアは、本物の答えとならんで、ある程度はもっともらしいだけの結果を出してくるように設計されている。
The hardware is designed to produce some proportion of false positives along with the real solution.

（ハードウェアの仕事は、答えを見つけることではなくて、絶対に答えではない大半のものを排除することだ）。
(The job of the hardware isn't to find the answer, but to eliminate the vast majority of the non-answers.)

もっともらしいものがたくさん出てきすぎて、ソフトがそれをチェックしてはねられなくなると困るけれど、そうでなければもっともらしいものがあっても別にかまわないし、それを許せばハードも簡単になって、汎用性が高くなる。
As long as the false positives don't occur so rapidly that they overwhelm the software's ability to check and reject them, they don't hurt, and they simplify the hardware and allow it to be more general-purpose.

われわれが解こうとしているような問題では、ハードがもっともらしいもので無駄にする時間は、探索時間の1％以下になるよう設計されている。
For the kinds of problems that we're trying to solve, the hardware is designed to waste less than 1% of the search time on false positives.  


1-11 
1-11 

おもしろい平文の識別 
Recognizing interesting plaintext 

おもしろい結果って、どういうことだろう。
What defines an interesting result?

もし平文があらかじめわかっていれば、おもしろい結果というのは、その鍵で得られた平文が、わかっている平文とマッチする、ということだ。
If we already know the plaintext, and are just looking for the key, an interesting result would be if the plaintext from this key matches our known block of plaintext.

もしもとの平文がわからなければ、それが全部、文字や数字や記号だけでできていれば「おもしろい」といえるかもしれない。
If we don't know the plaintext, perhaps the guess that it's all composed of letters, digits, and punctuation defines "interesting".

この検討は、簡単にして柔軟でなくてはならない。
The test has to be simple yet flexible.

結局われわれが使ったのは、ハードにとっては単純だけれど、ソフトのほうにはちょっと負担がかかるものだ。 
We ended up with one that's simple for the hardware, but a bit more complicated for the software. 

それぞれの結果は、8ビット長バイトを8個ふくむ。
Each result contains eight 8-bit bytes.


First, the search unit looks at each byte of the result.


それぞれのバイトがとれる値は、256とおりある。
Such a byte can have any one of 256 values.

探索ユニットは、この256個のうちでどの値が「おもしろい」もので、どれがつまらないかを定義した表をもっている。
The search unit is set up with a table that defines which of these 256 byte values are "interesting" and which are uninteresting.

たとえば平文が全部数字だというのがわかっていれば、ソフトはこの表で、数字10個（0から9まで）がおもしろくて、それ以外の値はぜんぶつまらない、と定義する。
For example, if the plaintext is known to be all numeric, the software sets up the table so that the ten digits (0 to 9) are interesting, and all other potential values are uninteresting.  

まちがった鍵で復号してやると、結果はほとんどランダムといっていいものになる。
The result of decrypting with the wrong key will look pretty close to random. 

だから一つのバイトが「おもしろい」ものとなる確率は、256通りの可能性のうち、「おもしろい」と定義された部分がどれだけあるかによって変わってくる。
So the chance of having a single byte look "interesting" will be based on what fraction of the 256 values are defined to be "interesting".

たとえば、69文字がおもしろいとされていたら（A-Z, a-z, 0-9, 空白, その他句読点など）、ランダムなバイトがおもしろいものになる確率は、69/256 で、つまり約1/4ということになる。
If, say, 69 characters are interesting (A-Z, a-z, 0-9, space, and a few punctuation characters), then the chance of a random byte appearing to be interesting is 69/256 or about 1/4.

これだとあまり分がいいようには見えないでしょう。
These don't look like very good odds;

チップは鍵の4つに一つで止まって、ソフトに「おもしろい」けれどまちがった鍵を見せることになる。
the chip would be stopping on one out of every four keys, to tell the software about "interesting" but wrong keys.  

でも「おもしろい」判定は、結果のすべてのバイトに適用される。
But the "interest" test is repeated on each byte in the result.

もしまちがった鍵のバイトがおもしろい確率が1/4なら、2バイトがおもしろい可能性は1/4のそのまた1/4, つまり1/16になる。
If the chance of having a wrong key's byte appear interesting is 1/4, then the chance of two bytes appearing interesting is 1/4 of 1/4, or 1/16th.

3バイトなら、1/4の1/4の1/4、つまり1/64だ。
For three bytes, 1/4th of 1/4th of 1/4th, or 1/64th.

この調子で、チップが結果の8バイトを検討し終わると、まちがった鍵は全体の1/65536(l/48)に限られてくる。
By the time the chip examines all 8 bytes of a result, it only makes a mistake on 1/65536th of the keys (l/48 keys).  

これはかなり小さい数に思えるけれど、なにせ今は 2,057,594,037,927,936個の鍵 (256の鍵、または7.2京の鍵）を探しているので、もっともっと手助けが要る。
That seems like a pretty small number, but when you're searching through 72,057,594,037,927,936 keys (256 keys, or 72 quadrillion keys), you need all the help you can get.

ソフトに可能な鍵の1/65536をチェックさせるだけでも、1,099,511,627,776個の鍵（240 または1兆個の鍵）を調べなくてはならないことになる。
Even having the software examine 1/65536th of the possible keys would require looking at 1,099,511,627,776 keys (240 or about a trillion keys).

そこでチップが、もうすこし手助けをするようになっている。 
So the chip provides a bit more help. 

この助けを提供してくれるのが、暗号文の2つめのブロックだ。
This help comes from that second block of ciphertext.

もし暗号文の最初のブロックで、結果のバイトがすべておもしろかったら、チップは今度は、同じ鍵で二番目の暗号文を復号してみる。
If every byte of a result looks interesting when the first block of ciphertext is decrypted, the chip goes back around and decrypts the second block of ciphertext with the same key.

これで「まちがい率」はさらに65536分の一になって、ソフトはたった16,777,216 (224または1600万くらい）の鍵を見るだけですむ。
This divides the "error rate" by another factor of 65536, leaving the software with only 16,777,216 (224 or about sixteen million) keys to look at.

いまのコンピュータのソフトは、このくらいならそこそこの時間で見てしまえる。 
Software on modern computers is capable of handling this in a reasonable amount of time. 

(もし暗号文が1ブロックしかわかっていなければ、同じ暗号文を両方に入れるだけだ。
(If we only know one block of ciphertext, we just give the chip two copies of the same ciphertext.

チップは同じものをテストして、いずれおもしろいブロックを教えてくれる。
It will test both copies, and eventually tell us that the block is interesting.

同じことを二回やるわけだけれど、これで無駄にする時間というのは、探索の総時間のなかでほんのわずかだ。） 
The amount of time it spends checking this "second block" is always a tiny fraction of the total search time.) 


1-12 
1-12 

また平文認識の部分には、平文のどのバイトを調べるとおもしろいかを指定できる8ビットがある。
In the plaintext recognizer there are also 8 bits that lets us specify which bytes of a plaintext are interesting to examine.

たとえば、平文の値の最初の6バイトの中身は知っているか見当がついて、残りの2バイトについてはなにも知らないなら、その6バイトのところだけマッチする鍵を探すことができる。
For example, if we know or suspect the contents of the first six bytes of a plaintext value, but don't know anything about the last two bytes, we can search for keys which match in just those six bytes.  


平文がわかっているとき 
Known plaintext 

もし、平文についておおまかな性質だけでなく、それ自体がわかっていたら、チップから出てくる「もっともらしいもの」はぐっと減ってくる。
The chips will have many fewer "false positives" if the plaintext of the message is known, instead of just knowing its general characteristics.

この場合、「おもしろい」ものとなるバイト値はごく少数しか出てこない。
In that case, only a small number of byte values will be "interesting".

もし平文に繰り返されるバイト値がなければ、おもしろいバイト値は、上の69個ではなく、8個にしぼられる。 
If the plaintext has no repeated byte values, only eight byte values will be interesting, instead of 69 as above. 

たとえば、もし平文のブロックが「hello th」だったとしよう。
For example, if the plaintext block is "hello th",

するとおもしろいのは「h」「e」「l」「o」「t」空白だけがおもしろい。
then only the six byte values "h", "e", "l", "o", space, and "t" are interesting.

もし平文がこういうバイトだけを含んでいたら、それはおもしろいことになる。
If a plaintext contains only these bytes, it is interesting.

もっともらしいものはいくつか出てくるだろう。
We'll get some "false positives" 

「theolo tt」などというのも、正解ではなくても「おもしろい」と見られるからだ。 
since many plaintexts like "tholo tt" would appear "interesting" even though they don't match exactly. 

この「おもしろい」の定義を使うと、まちがった鍵で出てくるバイトがおもしろくなる可能性は、8/256または1/32だけになる。
Using this definition of "interesting", a byte resulting from a wrong key will look interesting only about 8/256ths of the time, or 1/32nd of the time.

8バイトすべてがおもしろくなる可能性は、1/32の8乗(1/32の1/32の1/32の1/32の1/32の1/32の1/32の1/32)、つまりは1/1,099,511,627,776(1/240)しかなくなる。
All eight bytes resulting from a wrong key will look interesting only 1/32nd to the eighth power (1/32nd of 1/32nd of 1/32nd of 1/32nd of 1/32nd of 1/32nd of 1/32nd of 1/32nd) of the time, or 1/1,099,511,627,776th of the time (1/240 of the time).

つまり、探索ユニットは、おもしろそうな鍵を報告するまでに、平均で1兆個くらいの鍵を試せるわけだ。
In other words, a search unit can try an average of a trillion keys before reporting that a wrong key looks interesting.

だから、止まったり、ソフトにかまったりして速度を落とさずに、かなり長時間探索を続けられることになる。 
This lets it search for a long time without slowing down or bothering the software. 

Speed 
Speed 

いったん動き始めたら、探索ユニットは16クロックサイクルで復号を一つできる。
Once you get it going, a search unit can do one decryption in 16 clock cycles. 

われわれの作ったチップは40MHz（1秒に4000万ヘルツ）で動ける。
The chips we have built can run with a clock of 40 Mhz (40 million cycles per second).

16を4000万で割ると、各探索ユニットは毎秒だいたい250万鍵くらいを試せるのがわかる。 
Dividing 16 into 40 million shows that each search unit can try about 2.5 million keys per second. 

探索ユニットをつくるにあたり、鍵に1を足すときの回路を簡単にすればスピードをあげられることを発見した。
In building the search units, we discovered that we could make them run faster if we used simpler circuitry for adding 1 to a key.

全ビットゼロの鍵から、全ビット1の鍵までずっと数えられるようなしかけにせずに、鍵の下32ビットだけ数えるような加算回路を採用してある。
Rather than being able to count from a key of O all the way up to a key of all ones, we limited the adder so that it can only count the bottom 32 bits of the key.

てっぺんの24ビットはずっと同じままだ。
The top 24 bits always remain the same.

毎秒250万鍵という速度だと、てっぺん24ビットが同じ鍵をすべて探索しつくすのには1717秒（約30分）かかる。
At a rate of 2.5 million keys per second, it takes a search unit 1717 seconds (about half an hour) to search all the possible keys that have the same top 24 bits.

その30分が終わったら、ソフトがチップを止めて、24ビットに新しい値を入れ直して、またチップを走らせる。 
At the end of half an hour, the software has to stop the chip, reload it with a new value in the top 24 bits, and start it going again. 


1-13 
1-13 

フィードバックモード 
Feedback Modes 

チップはまた、「暗号ブロック連鎖モード（Cipher Block Chaining）」モードで暗号化された暗号も復号できる設計となっている。
The chip can also decrypt ciphertext that was encrypted in "Cipher Block  Chaining" mode.

このモードでは、各ブロックの暗号文は、暗号化される前に次のブロックの平文にXORされる
In this mode, the ciphertext of each block is exclusive-OR'd into the plaintext of the next block before it is encrypted.

（平文の最初のブロックには「初期化ベクトル」がXORされる）。
(An "initialization vector" is exclusive-OR'd into the first block of plaintext.) 

探索ユニットは、最初の暗号文を復号してから、初期化ベクトル（IV）をXORしてはずすやりかたを知っているし、さらに二番目の暗号文を復号してから最初の暗号文をXORしてはずす方法も知っている。
The search unit knows how to exclusive-OR out an Initialization Vector (IV) after decrypting the first ciphertext, and to exclusive-OR out the first ciphertext after decrypting the second one.

IVの指定は、暗号文の値を指定するときと同時にソフトが指定する。 
The software specifies the IV at the same time it provides the ciphertext values. 

Blaze 式チャレンジ 
Blaze Challenge 

1997年6月には、AT&Tの暗号研究者のMatt Blazeが、別の種類の暗号問題を提案した。
In June, 1997 Matt Blaze, a cryptography researcher at AT&T, proposed a different sort of cryptographic challenge.

かれが考えていたのは、提案者ですら解決方法を知らず、鍵空間を大量に探索したり、DESの構造を暗号解析しないでもいいような問題だった。
He wanted a challenge that not even the proponent knew how to solve, without either doing a massive search of the key-space, or somehow cryptanalyzing the structure of DES. 

かれの問題というのは、 XXXXXXXX という形式の鍵が復号されるとYYYYYYYYのようなかたちになる鍵をみつける、というだけのものだ。
His challenge is merely to find a key such that a ciphertext block of the form XXXXXXXX decrypts to a plaintext block of the form YYYYYYYY, 

このとき、XとYはそれぞれ任意の固定8ビット値で、それがブロックの8バイトすべてで繰り返されているわけだ。 
where X and Y are any fixed 8-bit value that is repeated across each of the eight bytes of the block. 

探索ユニットにちょっとハードを追加して、この問題の解決も手伝うことにした。
We added a small amount of hardware to the search units to help with solving this challenge.

ユニットには、復号した平文がおもしろいかどうかを調べる前に、平文の右半分を左半分にXORするオプションがつけてある。
There is an option to exclusive-OR the right half of the plaintext into the left half, before looking to see if the plaintext is "interesting".

YYYYYYYYという形式の平文では、これは平文の左半分がすべてゼロになるということだ。
For plaintexts of the form YYYYYYYY, this will result in a left half of all zeros.

こうすれば平文認識を設定するときに、左半分だけを見て、おもしろいのはゼロだけ、ということにしておく。
We can then set up the plaintext recognizer so it only looks at the left half, and only thinks zeroes are interesting.

これは大量の「もっともらしい」結果を作り出す（右半分と左半分が同じになっている平文、たとえばABCDABCDなどはすべてあてはまる）ことになるけれど、でもそれは、パフォーマンスを1%くらい下げるだけで、ソフトによってスクリーニングできる。
This will produce a large number of false positives (any plaintext where the left and right halves are equal, like ABCDABCD), but software can screen them out with only about a 1% performance loss.  


マシンの構成 
Structure Of The Machine 

これで探索ユニット一つの仕組みはわかってもらえたので、これを組み立ててマシン全体を作ってみよう。 
Now that you know how a single search unit works, let's put them together into the whole machine. 

各探索ユニットは、カスタムチップの中におさまっている。
Each search unit fits inside a custom chip.

チップ一つには、探索ユニットが24個入っている。
In fact, 24 search units fit inside a single chip.

一つのチップ内部の探索ユニットは、すべて同じ暗号文ブロックと、初期化ベクトルと、同じ「おもしろい」結果値の表を共有している。
All the search units inside a chip share the same ciphertext blocks. initialization vector, and the same plaintext-recognizer table of "interesting" result values.

各検索ユニットは独立した鍵をもって、独立にとめたり走らせたりできる。 
Each search unit has its own key, and each can be stopped and started independently. 

チップのピンは簡単なインターフェースだけを提供する。
The chip provides a simple interface on its wires.

探索ユニットのどれかが止まったかを告げる信号がいくつか、ソフトが探索ユニットに読み書きできるような、アドレスとデータ用のピンがいくつか、そして電源と設置用のピンがある。 
There are a few signals that say whether any of the search units are stopped, some address and data wires so that the software can read and write to the search units, and wires for electrical power and grounding. 

1-14 
1-14 

各探索ユニットは毎秒250万鍵を探索するので、24の探索ユニットを持ったチップは毎秒6000万鍵をためせる。
Since each search unit tries 2.5 million keys per second, a chip with 24 search units will try 60 million keys per second.

でも、相手にしている鍵もたくさんある。
But there are a lot of keys to look at.

チップ一個なら、平均で鍵を見つけるのに6,950日かかる（約19年だ）。
For a single chip, it would take 6,950 days (about 19 years) to find the average key,

鍵空間全体を探すには38年かかる。
or 38 years to search the entire key space.

そんなに待つのはいやだったから、チップはもっとたくさん使うことにした。 
Since we don't want to wait that long, we use more than one chip. 

各チップは、大きな回路基板にマウントされている。
Each chip is mounted onto a large circuit board that contains 64 chips,

基板一枚に64チップがのり、さらにインターフェース用の回路も少々のっている。
along with a small bit of interface circuitry.

基板は、ソフトがその基板とやりとりしているときにはLEDが光るようになっている。
The board blinks a light whenever the software is talking to that board.

ほかにランプが64個あって、各チップの探索ユニットが止まったときには光ってわかるようになっている。
64 other lights show when some search unit in each chip has stopped.

ふつうの使用だと、ソフトは数秒ごとに基板とやりとりをして、チップを調べてまわる。
In normal operation the software will talk to the board every few seconds, to check up on the chips.

チップはほんのたまにしか止まらず、さらにすぐにソフトで再起動がかけられなくてはならない。 
The chips should only stop every once in a while, and should be quickly restarted by the software. 

基板は、「9U」VMEバスの基板の仕様にあわせて設計されている（約38センチx38センチ）。
The boards are designed to the mechanical specifications of "9U" VMEbus boards (about 15" by 15").

VMEバスはコンピュータ基板用の工業規格で、1980年代にはよく使われた。
VMEbus is an industrial standard for computer boards, which was popular in the 1980s.

VMEバスのサイズを使ったのは、そういう基板を差し込める装置が簡単に手に入るからだ。
We used the VMEbus form factor because it was easy to buy equipment that such boards plug into;

VMEバス自体の電気仕様は使っていない。 
we don't actually use the VMEbus electrical specifications. 

9U VMEバス基板は、汎用PCにささるふつうのインターフェースカードよりずっと大きいので、一枚にのるチップの数もずっと多くなる。
9U VMEbus boards are much larger than the average interface card that plugs into a generic PC, so a lot more chips can be put onto them.

さらに9U VMEバス基板は大量の電源が供給できる設計になっていて、DESクラッカーチップにはこれが必要だ。 
Also, 9U VMEbus boards are designed to supply a lot of power, and our DES Cracker chips need it. 

各チップは毎秒6000万鍵を探索するので、チップ64個のった基板は、毎秒38億鍵を探索してくれる。
Since each chip searches 60 million keys per second, a board containing 64 chips will search 3.8 billion keys per second.

鍵空間を半分探索しつくすには、この基板一枚で109日かかる。
Searching half the key space would take the board about 109 days.

これでもまだ、そんなには待ちたくなかったから、基板ももっとたくさん使うことにした。 
Since we don't want to wait that long either, we use more than one board. 

基板はラック、またの名を「カードケージ」にさした。
The boards are mounted into chassis, also called "card cages".

現在の設計では、このラックは1990年頃のSunワークステーションパッケージをリサイクルしたものを使っている。
In the current design, these chassis are recycled Sun workstation packages from about 1990. 

Sun Microsystemsは、大型の9U VMEバス基板を使うシステムをたくさんつくっており、こういうシステムは基板の電源と冷却の点でもきわめて優れている。
Sun Microsystems built a large number of systems that used the large 9U VMEbus boards, and provide excellent power and cooling for the boards.

Sun-4/470 のシャーシはVMEバス基板のスロットを12個分持っていて、こちらの要件にあうようにすぐに改造できた。
The Sun-4/470 chassis provides twelve slots for VMEbus boards, and can easily be modified to handle our requirements.

今後のモデルは、物理的なパッケージはちがったものになるだろう。 
Subsequent models may use other physical packaging. 

各ラックにはコネクタがついていて、そこにはリボンケーブルが2本ついて、となりのラックや、ソフトを動かす汎用PCと接続するようになっている。
Each chassis has a connector for a pair of "ribbon cables" to connect it to the next chassis and to the generic PC that runs the software.

最後のラックは、次のラックがないので、「ターミネータ」（末端抵抗）がついている。
The last chassis will contain a "terminator", rather than a connection to the next chassis,

信号がリボンケーブルの終端にきたとき、そこではねかえって信号をゆがませないようにするために、そういう抵抗をつけておくわけだ。 
to keep the signals on the ribbon cable from getting distorted when they reach the end of the line. 

各基板は一秒で38億鍵を探索するので、基板12枚をさしたラックは、毎秒460億鍵を探索することになる。
Since each board searches 3.8 billion keys per second, a chassis containing 12 boards will search 46 billion keys per second.

このスピードだと、鍵空間の半分を探索しつくすのには9日くらいかかることになる。
At that rate, searching half the key space takes about 9 days.

このラック一つに基板をいっぱいにさせば、1998年2月にRSAの「DES-II」チャレンジを解決した全世界のコンピュータを上回る速度となる。
One chassis full of boards is about 25% faster than the entire worldwide network of machines that solved the RSA "DES-II" challenge in February 1998,

このコンテストに参加した全世界のコンピュータ群は、ピーク時に秒速340億鍵をためしていた。 
which was testing about 34 billion keys per second at its peak. 


1-15 
1-15 

最初のDESクラッカーの非公式な目標としては、平均的なDES鍵を1週間以下でクラックすることだったので、基板は12枚以上必要ということになる。
Since an informal design goal for our initial DES Cracker was to crack an average DES key in less than a week, we need more than 12 boards.

じゅうぶんに余裕をみて、基板を24枚使って、それをラック2つにおさめた。
To give ourselves a comfortable margin, we are using 24 boards, which we can fit into two chassis.

これで毎秒920億の鍵を探索してくれるので、鍵空間の半分を4.5日でカバーする。
They will search 92 billion keys per second, covering half the key space in about 4.5 days.

チップがラック一つに入れるには消費電力が大きすぎたり、発熱が大きすぎたりしたら*、基板24枚をラック3つにわければいい。 
If the chips consume too much power or produce too much heat for two chassis to handle,* we can spread the 24 boards across three chassis. a

Table 1-1: DES クラッカー性能のまとめ
Table 1-1: Summary of DES Cracker performance

デバイスその下のデバイスあたりの数鍵/秒探索あたり平均所要日数
DeviceHow Many In Next DeviceKeys/SecDays/avg search

探索ユニット242,500,000166,800 
Search Unit242,500,000166,800

チップ6460,000,0006,950 
Chip6460,000,0006,950

基板123,840,000,000109 
Board123,840,000,000109

ラック246,080,000,0009.05 
Chassis246,080,000,0009.05

EFF DES クラッカー92,160,000,0004.524
EFF DES Cracker92,160,000,0004.524
        
まず、探索ユニットを一回設計した。
We designed the search unit once.

そしてそれを各チップごとに24回コピーして、さらにはそのチップを1,500個作っただけで、処理能力は36,000倍になった。
Then we got a speedup factor of more than 36,000 to 1 just by replicating it 24 times in each chip and making 1500 chips.a

これが「高度に並列処理可能（highly parallelizable)」ということだ。 
This is what we meant by "highly parallelizable" 


予算 
Budget 

プロジェクト全体で予算は21万ドルほどだった。
The whole project was budgeted at about US$210,000.

このうち8万ドルはDESクラッカーの設計、組み立て、テストにかかった労働コストである。
Of this, $80,000 is for the labor of designing, integrating, and testing the DES Cracker.

残り13万はチップ、基板、その他基板のコンポーネント、基板のラック、電源、冷却装置、そしてPCなどの直接コストである。 
The other $130,000 is for materials, including chips, boards, all other components on the boards, card cages, power supplies, cooling, and a PC. 

DESクラッカーの制御用ソフトは別個にボランティアプロジェクトとしてかかれた。
The software for controlling the DES Cracker was written separately, as a volunteer project.

作業としては二三週間ほどかかっている。 
It took two or three weeks of work. 

プロジェクト全体は、全部で18ヶ月ほどで完成した。
The entire project was completed within about eighteen months.

その時間の大半は、初期のリサーチに費やされたもので、カスタムチップではなくFPGAを使おうとしていた時間が多い。
Much of that time was used for preliminary research, before deciding to use a custom chip rather than FPGA's.

カスタムチップをつくるための契約は1997年8月にかわされた。
The contract to build custom chips was signed in September, 1997,

プロジェクトがはじまって8ヶ月くらいたってからだ。
about eight months into the project.

チームは全部で10人以下、しかもフルタイムでこのプロジェクトに取り組んだ者は一人もいない。
The team contained less than ten people, none of whom worked full-time on the project.

チームメンバーは、プロジェクトマネージャ、ソフトデザイナー、プログラマ、チップ設計者、基板設計者、ハード技術者、ハードマネージャから構成される。 
They include a project manager, software designer, programmer, chip designer, board designer, hardware technicians, and hardware managers. 

_________________ 
* 
刊行時点では、ここのチップはテストが終わっていたけれど、マシン全体はまだ作り終えていなかった。
* At publication time, we have tested individual chips but have yet not built the full machine

もしチップの消費電力か発熱が大きすぎて、チップ1500個を使ったマシンが無理なら、チップのクロックを40 MHz から、たとえば 30 MHz まで下げるという手もある。
If the chips' power consumption or heat production is excessive in a machine containing 1500 chips, we also have the option to reduce the chips' clock rate from 40 MHz down to, say, 30 MHz.

こうすれば熱と消費電力の問題は相当へる。
This would significantly reduce the power and heat problems,

ただしこの場合、探索時間は33%よけいにかかることになる
at a cost of 33% more time per search 

（つまり平均で6日よけいにかかることになる）。 
(6 days on average). 


1-16 
1-16 

もし設計にもっとお金をかける気があれば、チップあたりのコストを下げたり、チップ密度を上げたり、探索速度を向上させることもできたはずだ。
We could have reduced the per-chip cost, or increased the chip density or search speed, had we been willing to spend more money on design.

もっと複雑な設計にすれば、ほかの暗号アルゴリズムをクラックできるだけの柔軟性ももてただろう。
A more complex design could also have been flexible enough to crack other encryption algorithms. 

ここでほんとうに大事な点というのは、どんな政府でも、ほとんどの企業でも、そして何万人もの個人ですら手が届くような予算で、使い物になるDESクラック用マシンがつくれた、ということだ。
The real point is that for a budget that any government, most companies, and tens of thousands of individuals could afford, we built a usable DES Cracking machine.

この設計を公開したことで、将来のマシンの設計コストはもっと下がるだろうし、半導体技術の進歩も、コスト低下に貢献するはずだ。
The publication of our design will probably in itself reduce the design cost of future machines, and the advance of semiconductor technology also makes this cost likely to drop.

5年もすれば、10代の子でも、高校の科学博覧会で自前のDESクラッカーがつくれるようになることは、じゅうぶんに考えられる。 
In five years some teenager may well build her own DES Cracker as a high school science fair project. 

ほかにはだれがDESをクラックしているだろう? 
Who Else Is Cracking DES? 

もし市民自由団体がDESクラッカーを20万ドルでつくれるなら、おそらく政府機関でも100万ドル以下で同じものをつくれるはずだ
If a civil liberties group can build a DES Cracker for $200,000, it's pretty likely that governments can do the same thing for under a million dollars. 

（いまのは冗談）。
(That's a joke.)

US National Security Agency の予算と使命を考えると、おそらくかれらは何年も前にDESクラッカーをつくりはじめているはずだ。
Given the budget and mission of the US National Security Agency, they must have started building DES Crackers many years ago.

われわれの見当では、おそらくそういうマシンの4世代目か5世代目にかかっているだろう。
We would guess that they are now on their fourth or fifth generation of such devices. 

われわれのものよりかなり高速なチップも使っているはずだ。
They are probably using chips that are much faster than the ones we used; 

現在のプロセッサは300MHz以上で走る。
modern processor chips can run at more than 300 Mhz,

われわれの40MHzチップの8倍以上のはやさだ。
eight times as fast as our 40 Mhz chips.

おそらくはスーツケースにおさまるような「野戦用」ユニットもあって、それでもDESを一日でクラックできるだろう。
They probably have small "field" units that fit into a suitcase and crack DES in well under a day;

フォート・ミードの地下にはすさまじい中央ユニットがあって、ふつうのDES鍵をものの数秒でやぶり、しかも同時に独立に傍受したメッセージを何千も解読しているだろう。 
as well as massive central units buried under Ft. Meade, that find the average DES key in seconds, or find thousands of DES keys in parallel, examining thousands of independent intercepted messages. 

もし基板5200枚上にチップ33.3万個を載せて使えば、DES鍵は30分くらいでみつかる。
Our design would scale up to finding a DES key in about half an hour, if you used 333,000 chips on more than 5,200 boards.

基板はおそらく、通信用にパラレルポート200くらいが必要だろう。
The boards would probably require about 200 parallel port cards to communicate with them;

IBM互換パソコンがそういう基板4枚を同時に相手にできるので、これはパソコン50台ということだ。
an IBM-compatible PC could probably drive four such cards, thus requiring about 50 PC's too.

必要なソフトはごく簡単になる。
The software required would be pretty simple:

いちばん難しいのは、物理的な配置と修理の物資移動に関わる部分だ。
the hard part would be the logistics of physical arrangement and repair.

これはわれわれがつくったものの200倍のハードとなる。
This is about 200 times as much hardware as the project we built.

そういうシステムの値段として、とんでもない上限値をあげるとすれば、われわれのプロジェクトコストを単純に200倍して、4000万ドルとなる。 
A ridiculously high upper bound on the price of such a system would be 200 times the current project price, or $40 million. 

もちろん、もしチップ30万個を使ってDESを30分でクラックするシステムを作る気なら、設計を白紙に戻して一からやりなおしたほうがいいだろう。
Of course, if we were going to build a system to crack DES in half an hour or less, using a third of a million chips, it would be better to go back to the drawing board and design from scratch.

もっと先進的なチップ製造プロセスを使うだろう。
We'd use more modern chip fabrication processes;

大量に発注すればこれは要求できる。
a higher-volume customer can demand this.

初期デザインとソフトにももっとお金をかけて、全体システムをもっと安く単純にして、おそらくはもっと高密・高速・低消費電力チップを使って、それをボードにもっと高密に実装し、さらにプロセッサもオンボードにして、直接イーサネットにつながるようにするだろう。
We'd spend more on the initial design and the software, to produce a much cheaper and simpler total system, perhaps allowing boards full of denser, faster, lower-voltage chips to use a small onboard processor and plug directly into an Ethernet.

各チップのコストをがんばってもっと下げるだろう。
We'd work hard to reduce the cost of each chip,

これだけ数があるとそれが大きい。
since there would be so many of them. 

さらには複数のDES鍵を同時にクラックすることも考えるだろう。 
We'd think about how to crack multiple DES keys simultaneously. 

1-17 
1-17 

大国ならどこでもDESクラック用マシンをすでに持っていると考えていいはずだ。
It would be safe to assume that any large country has DES Cracking machines. 

本書の刊行で目をさました小国も、さらに一部の犯罪組織もDESクラッカーをつくるか買うかするはずだ。
After the publication of this book wakes them up, probably more small countries and some criminal organizations will make or buy a few DES Crackers. 

それは別に本書の目的ではない。
That was not the intent of the book;

われわれの意図としては、この諜報監視の標的や、機器のメーカ、さらには政策立案者など、暗号問題と取り組んでいる人々に情報と警告を与えることだ。 
the intent was to inform and warn the targets of this surveillance, the builders of equipment, and the policy makers who grapple with encryption issues. 

DESを使っていたらどうすればいいの？ 
What To Do If You Depend On DES 

シングルDESを使うような設計は、これからいっさいしないこと。 
Don't design anything else that depends on single DES. 

完全に固定されたシングルDES鍵を使うシステムは、すべて廃棄すること。
Take systems out of service that use permanently fixed single-DES keys,

あるいはそのトラヒックをさらにもう一段暗号化すること。
or superencrypt the traffic at a higher level.

もう一段の暗号化には、特別な配慮が必要となる。
Superencryption requires special care, though,

外のDES暗号をクラックするのに使われそうな、わかりやすいヘッダをさけなくてはならない。 
to avoid providing any predictable headers that can be used to crack the outer DES encryption. 

ソフトとハードを換えて、だんだんDESより強い暗号アルゴリズムを使っていくようにしよう。 
Start changing your software and/or hardware to use a stronger algorithm than DES.

鍵3つのトリプルDESが無難な線だろう。
Three-key Triple-DES is an obvious choice,

同じブロックサイズを使うし、ハードも同じものが使えるかもしれない。
since it uses the same block size and can possibly use the same hardware;

単に、鍵を3つ使ってDESを3回かけるというだけだ
it just uses three keys and runs DES three times

（つまり各ブロックをまず最初の鍵で暗号化し、それをさらに2番目の鍵で暗号化し、そしてそれを3番目の鍵で暗号化する）。
(encrypting each block with the first key, decrypting it with the second, then encrypting it with the third).

トリプルDESの強さについては、確実なことはなにもわかっていないけれど、シングルDESより弱くはないのは確実だし、おそらくかなり強いはずではある。
The strength of Triple-DES is not known with any certainty, but it is certainly no weaker than single DES, and is probably substantially stronger.

ただしトリプルDESでも、「ごたまぜ」変種やモードには要注意。
Beware of "mixed up" variants or modes of Triple-DES;

Eli Biham* とDavid Wagner+の研究によれば、これはふつうのトリプルDESにくらべてずっと弱いことがわかっていて、下手をするとシングルDESにすら劣るかもしれない。
research by Eli Biham* and David Wagner+ shows that they are significantly weaker than the straightforward Triple-DES, and may be even weaker than single-DES.

基本的なプリミティブとして、DESを3つ、 Electronic Code Book (ECB) モードで使うこと。
Use three copies of DES in Electronic Code Book (ECB) mode as a basic primitive.

そこからECB 3DESプリミティブを使うことで、Cipher Feedbackモードのようなモードを構築できる。 
You can then build a mode such as Cipher Feedback mode using the primitive ECB 3DES. 

アメリカ政府は、DESを新方式と置き換えるための公式なプロセスを、遅々としつつも実施しているところだ。
The US Government is tardily going through a formal process to replace the DES.

この試みは高度暗号規格（Advanced Encryption Standard, AEC）と呼ばれているが、最終的なアルゴリズムが決まるまでにはあと数年かかるし、それが実際の現場で、使い物になると証明され、世の暗号解析者たちの慎重な検討をうけて隠れた弱点がないか確認されるまでにはさらに何年もかかるだろう。
This effort, called the Advanced Encryption Standard, will take several years to decide on a final algorithm, and more years for it to be proven out in actual use, and carefully scrutinized by public cryptanalysts for hidden weaknesses.

もし、5年後か10年後に世に出る製品を設計しているなら、暗号化アルゴリズムとしてAESを考えてみてもいいかもしれない。 
If you are designing products to appear five to ten years from now, the AES might be a good source of an encryption algorithm for you. 

AESが遅々としている理由というのは、NSAが過去10年に、このプロセスを始めようとしたときにかならずそれをつぶしてきたからだ、と言われている。
The reason that the AES is tardy is because the NSA is believed to have blocked previous attempts to begin the process over the last decade.

最近ではNSAは、SkipjackのようなNSA設計の機密になった暗号化アルゴリズムを技術コミュニティに使わせようとしたが、ユーザにそのアルゴリズムを公開検討する機会を与えなかったので失敗している。
In recent years NSA has tried, without success, to get the technical community to use classified, NSA-designed encryption algorithms such as Skipjack, without letting the users subject these algorithms to public scrutiny.

これが失敗したので、やっとNSAもNational Institute of Standards and TechnologyがAES標準化プロセスを開始するのを認めた。 
Only after this effort failed did they permit the National Institute of Standards and Technology to begin the AES standardization process. 

_______________ 
* "Cryptanalysis of Triple-Modes of Operation", Eli Biham, Technion Computer Science Department Technical Report CS0885, 1996. 
* "Cryptanalysis of Triple-Modes of Operation", Eli Biham, Technion Computer Science Department Technical Report CS0885, 1996. 

+"Cryptanalysis of some Recently Proposed Multiple Modes of Operation", David Wagner, University of California at Berkeley, http://www.cs.berkeley.edu/~daw/multmode-fse98.ps. 1998 Fast Software Encryption ワークショップで発表。 
+"Cryptanalysis of some Recently Proposed Multiple Modes of Operation", David Wagner, University of California at Berkeley, http://www.cs.berkeley.edu/~daw/multmode-fse98.ps. Presented at the 1998 Fast Software Encryption workshop. 


1-18 
1-18 

結論 
Conclusion 

データ暗号化規格（Data Encryption Standard, DES）は1975年以来、なかなか公共の役にたってきたことは事実だ。
The Data Encryption Standard has served the public pretty well since 1975.

だがこれが設計されたのは、計算コストがすさまじく高くて、巨大コンピュータが専用の二重床の上に鎮座して、専用空調つきの屋内聖域にすえられていた時代である。
But it was designed in an era when computation cost real money, when massive computers hunkered on special raised flooring in air-conditioned inner sanctums.

いまやスーパーコンピュータがバックパックにおさまり、インターネットで何百万というマシンにアクセスできる時代だ。
In an era when you can carry a supercomputer in your backpack, and access millions of machines across the Internet,

DESはもはや時代遅れなのだ。 
the Data Encryption Standard is obsolete. 

Electronic Frontier Foundationは、本書が暗号に関わる政策論争にとって、真実の新しい水準をもたらしてくれることを期待している。
The Electronic Frontier Foundation hopes that this book inspires a new level of truth to enter the policy debates on encryption.

われわれの社会にとって賢い選択をするためには、きちんとした情報に基づく選択をしなくてはならない。
In order to make wise choices for our society, we must make well-informed choices.

こうした論争においては、National Security Agency （NSA）と Federal Bureau of Investigation（FBI）の見解と経験がきわめて重視されてきた。
Great deference has been paid to the perspective and experience of the National Security Agency and Federal Bureau of Investigation in these debates.

政策立案者や市民が、かれらの発言の多くがどのくらい正確かをチェックしていないということを考えると、きわめて驚くべきことである* 
This is particularly remarkable given the lack of any way for policy-makers or the public to check the accuracy of many of their statements.*

(市民はかれらの発言のほとんどについては、きくことさえできない。
(The public cannot even hear many of their statements,

国家機密とされているからである）。
because they are classified as state secrets.)

暗号政策論争が、もっと成功した、一般に指示される政策に向かって移行することを期待したい。
We hope that the crypto policy debate can move forward to a more successful and generally supported policy.

こうした機関がもっと正直になろうかと検討してくれたり、政策立案者たちが、かれらの裏付けのない発言を信じるのをやめたりしてくれれば、このプロセスはすぐにもそうした方向に向かえるのである。
Perhaps if these agencies will consider becoming more truthful, or policy-makers will stop believing unverified statements from them, the process can move more rapidly to such a conclusion. 

_________________ 
* 政府機関の信頼性が疑問視されているのは、なにもDES クラッキングだけではない。
* DES cracking is not the only issue on which agency credibility is questionable.

たとえば、暗号によって政府機関が直面している問題が実際にはどのていどのものかという問題は、これまた公式にはとんでもない推定が出されているのに、もっと慎重でバイアスのない調査ではほとんど影響がないとされている。
For example, the true extent of the law enforcement problem posed by cryptography is another issue on which official dire predictions have been made, while more careful and unbiased studies have shown little or no impact.

こうした政府機関の行いに関する合憲性についての見解がどこまで有効かについても、疑わしい面がある。
The validity of the agencies' opinion of the constitutionality of their own regulations is also in doubt,

これは司法省によって20年前にその見解が却下されているし、1997年には連邦地方裁判所で違憲判決がおりている。
having been rejected two decades ago by the Justice Department, and declared unconstitutional in 1997 by a Federal District Court.

政府職員による非合法の盗聴と通信傍受の多発も、問題となっている。
The prevalence of illegal wiretapping and communications interception by government employees is also in question;

たとえばLos Angeles Timesの1998年4月26日記事 "Can the L.A. Criminal-Justice System Work Without Trust?" を見よ。 
see for example the Los Angeles Times story of April 26, 1998, "Can the L.A. Criminal-Justice System Work Without Trust?" 


2 
2 

DES 鍵探索アレイのデザイン 
Design for DES Key Search Array 

本章の内容: 
In this chapter: 

チップのレジスタ 
On-Chip Registers 

コマンド 
Commands 

探索ユニットのはたらき 
Search Unit Operation 

見本プログラムの説明 
Sample Programming Descriptions 

スケーラビリティと性能 
Scalability and Performance 

ホストコンピュータのソフト 
Host Computer Software 

用語集 
Glossary 

Cryptography Research and Advanced Wireless Technologies, Inc.
Cryptography Research and Advanced Wireless Technologies, Inc. 


チップのレジスタ 
On-Chip Registers 

各チップには、以下のレジスタがある。
Each chip contains the following registers.

それぞれのアドレス指定については、Figure 2-1を参照。 
They are addressed as specified in Figure 2-1. 

Ciphertext0 (64 bits = 8 bytes) 
Ciphertext0 (64 bits = 8 bytes) 

探索される最初の暗号テキスト。
The value of the first ciphertext being searched.

Ciphertext0はチップ上のすべての探索ユニット共通であり、セットされるのは一回だけ
Ciphertext0 is identical in all search units and is set only once

（探索システムが最初に初期化されるとき）。 
(when the search system is first initialized). 

Ciphertext1 (64 bits = 8 bytes) 
Ciphertext1 (64 bits = 8 bytes) 

探索される2番目の暗号テキスト。
The value of the second ciphertext being searched.

Ciphertext1はチップ上のすべての探索ユニット共通であり、セットされるのは一回だけ
Ciphertext1 is identical in all search units and is set only once

（探索システムが最初に初期化されるとき）。 
(when the search system is first initialized). 

PlaintextByteMask (8 bits) 
PlaintextByteMask (8 bits) 

平文バイトのセレクタ。
The plaintext byte selector.

このレジスタのビットは、あるキーをつかって復号して出てきた平文のうち、無視するべきバイトを示す。
One-bits in this register indicate plaintext bytes that should be ignored when deciding whether or not the plaintext produced by a particular key is possibly correct.

このマスクは、平文の値の一部しかわかっていないときに便利だ。
This mask is helpful when only a portion of the plaintext's value is known.

たとえば、最初の5バイトがなにかのヘッダでわかっていて、残りの3バイトがわからないときには、 PlaintextByteMask に 0x07 を入れればいい。 
For example, if the first 5 bytes equal a known header but the remaining three are unknown, a PlaintextByteMask of 0x07 would be used. 

PlaintextXorMask (64 bits = 8 bytes) 
PlaintextXorMask (64 bits = 8 bytes) 

このレジスタは、ciphertext0の復号結果とXORされれる。
This register is XORed with decryption of ciphertext0.

このレジスタはふつうはCBC mode IV のときにつかわれる。 
This is normally filled with the CBC mode IV. 

2-1 
2-1 


2-2 
2-2 

Figure 2-1: レジスタのアドレッシング 
Figure 2-1: Register Addressing 

レジスタ　      説明とコメント
Register(s)      Description & Comments

0x00-0x1F        PlaintextVector
0x00-0x1F        PlaintextVector

0x20-0x27        PlaintextXorMask
0x20-0x27        PlaintextXorMask

0x28-0x2F        Ciphertext0
0x28-0x2F        Ciphertext0

0x30-0x37        Ciphertext1
0x30-0x37        Ciphertext1

0x38             PlaintextByteMask
0x38             PlaintextByteMask

0x39-0x3E        未使用 (reserved)
0x39-0x3E        Unused (reserved)

0x3F             SearchInfo
0x3F             SearchInfo

0x40-0x47        探索ユニット  0 キーカウンタ (0x40-0x46) とSearchStatus (0x47)
0x40-0x47        Search unit  0 key counter (0x40-0x46) and SearchStatus (0x47)

0x48-0x4F        探索ユニット  1 キーカウンタ (0x48-0x4E) とSearchStatus (0x4F)
0x48-0x4F        Search unit  1 key counter (0x48-0x4E) and SearchStatus (0x4F)

0x50-0x57        探索ユニット  2 キーカウンタ (0x50-0x56) とSearchStatus (0x57)
0x50-0x57        Search unit  2 key counter (0x50-0x56) and SearchStatus (0x57)

0x58-0x5F        探索ユニット  3 キーカウンタ (0x58-0x5E) とSearchStatus (0x5F)
0x58-0x5F        Search unit  3 key counter (0x58-0x5E) and SearchStatus (0x5F)

0x60-0x67        探索ユニット  4 キーカウンタ (0x60 0x66) とSearchStatus (0x67)
0x60-0x67        Search unit  4 key counter (0x60 0x66) and SearchStatus (0x67)

0x68-0x6F        探索ユニット  5 キーカウンタ (0x68 0x6E) とSearchStatus (0x6F)
0x68-0x6F        Search unit  5 key counter (0x68 0x6E) and SearchStatus (0x6F)

0x70-0x77        探索ユニット  6 キーカウンタ (0x70-0x76) とSearchStatus (0x77)
0x70-0x77        Search unit  6 key counter (0x70-0x76) and SearchStatus (0x77)

0x78-0x7F        探索ユニット  7 キーカウンタ (0x78-0x7E) とSearchStatus (0x7F)
0x78-0x7F        Search unit  7 key counter (0x78-0x7E) and SearchStatus (0x7F)

0x80-0x87        探索ユニット  8 キーカウンタ (0x80-0x86) とSearchStatus (0x87)
0x80-0x87        Search unit  8 key counter (0x80-0x86) and SearchStatus (0x87)

0x88-0x8F        探索ユニット  9 キーカウンタ (0x88 0x8E) とSearchStatus (0x8F)
0x88-0x8F        Search unit  9 key counter (0x88 0x8E) and SearchStatus (0x8F)

0x90-0x97        探索ユニット 10 キーカウンタ (0x90-0x96) とSearchStatus (0x97)
0x90-0x97        Search unit 10 key counter (0x90-0x96) and SearchStatus (0x97)

0x98-0x9F        探索ユニット 11 キーカウンタ (0x98-0x9E) とSearchStatus (0x9F)
0x98-0x9F        Search unit 11 key counter (0x98-0x9E) and SearchStatus (0x9F)

0xA0-0xA7        探索ユニット 12 キーカウンタ (0xA0-0xA6) とSearchStatus(0xA7)
0xA0-0xA7        Search unit 12 key counter (0xA0-0xA6) and SearchStatus (0xA7)

0xA8-0xAF        探索ユニット 13 キーカウンタ (0xA8-0xAE) とSearchStatus (0xAF)
0xA8-0xAF        Search unit 13 key counter (0xA8-0xAE) and SearchStatus (0xAF)

0xB0-0xB7        探索ユニット 14 キーカウンタ (0xB0 0xB6) とSearchStatus (0xB7)
0xB0-0xB7        Search unit 14 key counter (0xB0 0xB6) and SearchStatus (0xB7)

0xB8-0xBF        探索ユニット 15 キーカウンタ (0xB8-0xBE) とSearchStatus (0xBF)
0xB8-0xBF        Search unit 15 key counter (0xB8-0xBE) and SearchStatus (0xBF)

0xC0-0xC7        探索ユニット 16 キーカウンタ (0xC0-0xC6) とSearchStatus (0xC7)
0xC0-0xC7        Search unit 16 key counter (0xC0-0xC6) and SearchStatus (0xC7)

0xC8-0xCF        探索ユニット 17 キーカウンタ (0xC8-0xCE) とSearchStatus (0xCF)
0xC8-0xCF        Search unit 17 key counter (0xC8-0xCE) and SearchStatus (0xCF)

0xD0-0xD7        探索ユニット 18 キーカウンタ (0xD0-0xD6) とSearchStatus (0xD7)
0xD0-0xD7        Search unit 18 key counter (0xD0-0xD6) and SearchStatus (0xD7)

0xD8-0xDF        探索ユニット 19 キーカウンタ (0xD8-0xDE) とSearchStatus (0xDF)
0xD8-0xDF        Search unit 19 key counter (0xD8-0xDE) and SearchStatus (0xDF)

0xE0-0xE7        探索ユニット 20 キーカウンタ (0xE0-0xE6) とSearchStatus (0xE7)
0xE0-0xE7        Search unit 20 key counter (0xE0-0xE6) and SearchStatus (0xE7)

0xE8 0xEF        探索ユニット 21 キーカウンタ (0xE8-0xEE) とSearchStatus (0xEF)
0xE8 0xEF        Search unit 21 key counter (0xE8-0xEE) and SearchStatus (0xEF)

0xF0-0xF7        探索ユニット 22 キーカウンタ (0xF0-0xF6) とSearchStatus (0xF7)
0xF0-0xF7        Search unit 22 key counter (0xF0-0xF6) and SearchStatus (0xF7)

0xF8-0xFF        探索ユニット 23 キーカウンタ (0xF8-0xFE) とSearchStatus (0xFF)
0xF8-0xFF        Search unit 23 key counter (0xF8-0xFE) and SearchStatus (0xFF)


PlaintextVector (256 bits = 8 bytes) 
PlaintextVector (256 bits = 8 bytes) 

許される平文バイトの値を指定
Identifies allowable plaintext byte values

（PlaintextByteMaskでマスクされたものをのぞく）。
(ignoring those masked by the PlaintextByteMask).

どの平文テキストのバイト P[i=0..7]についてもP[i]ビットがセットされていなければ、その復号キーははねられる。
If, for any plaintext byte P[i=0..7], bit P[i] is not set, the decryption key will be rejected.

PlaintextVectorチップ上のすべての探索ユニット共通であり、セットされるのは一回だけ
PlaintextVector is identical in all search units and is set only once

（探索システムが最初に初期化されるとき）。 
(when the search system is first initialized). 

SearchInfo (8 bits) 
SearchInfo (8 bits) 

SearchInfoのビットは、正しい平文同定機能がどういうふうに機能するかを示す。
The bits in SearchInfo describe how the correct plaintext identification function works.

SearchInfoのビットはそれぞれ次のように定義される： 
Bits of SearchInfo are defined as follows: 


2-3 
2-3 

bit 0 = UseCBC 
bit 0 = UseCBC 

このビットがセットされていると、平文がチェックされる前に、Ciphertext0 が Ciphertext1を復号してできた平文にXORされる。
If this bit is set, Ciphertext0 is XORed onto the plaintext produced by decrypting Ciphertext1 before the plaintext is checked.

このビットは、CBCモードの暗号文をチェックするときに使う。 
This bit is used when checking CBC-mode ciphertexts. 

bit 1 = ExtraXOR 
bit 1 = ExtraXOR 

このビットがセットされていると、復号結果の平文の右半分が、左半分にXORされてから平文チェックがおこなれれる。
If set, the right half of the resulting plaintext is XORed onto the left before any plaintext checking is done.

ExtraXOR と UseCBC は同時には使用できない。 
ExtraXOR and UseCBC cannot be used together. 

bit 2 = ChipAllActive 
bit 2 = ChipAllActive 

これがクリアされていると、チップ上の探索ユニットのどれか（複数可）が止まっている
If cleared, one or more search units in this chip have halted

（つまり SearchActiveがゼロになっている）。
(e.g., SearchActive is zero).

このレジスタの値は、すべての探索ユニットの SearchStatus バイトをANDして得ている。
This value is computed by ANDing the SearchActive bits of all search units' SearchStatus bytes.

この値の逆が専用ピンに出ていて、チップがとまったときにLEDが点灯できるようにしてある。 
The inverse of this value is sent out on a dedicated pin, for use in driving a status LED which lights up whenever the chip halts. 

bit 3 = BoardAllActive 
bit 3 = BoardAllActive 

このピンは、このチップと基板上でそれより奥にあるチップすべてのChipAllActive信号をANDしたもの。
This pin is the AND of the ChipAllActive lines of this chip and all later chips on the board.

実装方法としては、n番目のチップがn+1番目のチップのBaordAllActive線を見て、それを自分のChipAllActive線とANDして、その結果をn-1番目のチップにわたしてBoardAllActiveの計算をさせる、というかたちで実装されている。
This is implemented by having each chip n take in chip n+1's BoardAllActive line, AND it with its own ChipAllActive line, and output the result to chip n-1 for its BoardAllActive computation.

これによって、基板上のどのチップがとまっているかを調べるときに、log2N個のチップをたたけばすむ。
This makes it possible to find which chip on a board has halted by querying log2N chips, 

このときNは基板上のチップの数になる。
where N is the number of chips on the board.

もしBoardAllActiveEnableが1になっていなければ、BoardAllActiveはチップの内部状態にかかわらずBoardAllActiveInputピンと同じになる。 
If BoardAllActiveEnable is not set to 1, BoardAllActive simply equals the BoardAllActiveInput pin, regardless of the chip's internal state. 

bit 4 = BoardAllActiveEnable 
bit 4 = BoardAllActiveEnable 

この値がゼロなら、BoardAllActiveはその基板上の探索ユニットがすべてアクティブかどうかにかかわらず、常に BoardAllActiveInput ピンと等しくなる。
If this value is set to 0 then BoardAllActive always equals the BoardAllActiveInput pin, regardless of whether all search units on the board are active.

もしこのビットが1にセットされていれば、BoardAllActiveレジスタ（と出力）はチップの内部状態を反映した値が入力ピンとANDされてセットされる。 
If this bit is set to 1, then the BoardAllActive register (and output) are set to reflect the internal state of the chip ANDed with the input pin. 

bits 5-7 = 未使用 
bits 5-7 = Unused 

キーカウンタ (56 bits) 
KeyCounter (56 bits) 

いまチェックされている鍵の値。
The value of the key currently being checked

キーカウンタはしょっちゅう更新される
The KeyCounter is updated very frequently

（つまりテストされる鍵が変わるごとに更新）。
(i.e., once per key tested).

各探索ユニットごとに、わりあてられるキーカウンタの値はちがう。
A unique KeyCounter value is assigned to every search unit.

探索ユニットが、マッチするものをみつけて止まった時点で、すでにキーカウンタは次の鍵にインクリメントされている。
When the search unit halts after a match, KeyCounter has already been incremented to the next key;

一致した鍵は、一つ前のものとなる。 
the match was on the previous key. 

SearchCommandAndStatus (8 bits) 
SearchCommandAndStatus (8 bits) 

SearchStatusのビットは、各探索ユニットの現在の状態を指名している。
The bits in SearchStatus describe the current search state of a specific search unit.

各探索ユニットごとに、別々のSearchStatusレジスタが割り当てられている。
A unique SearchStatus register is allocated for each search unit. 

SearchStatus の美とは次のようにわりあてられる: 
Bits of SearchStatus are allocated as follows: 


2-4 
2-4 

bit 0 = SearchActive 
bit 0 = SearchActive 

探索が現在とまっているかどうかを示す
Indicates whether the search is currently halted

（0=停止、1=アクティブ)。
(0=halted, 1=active).

コンピュータは、探索を始めるときにこのビットをセットして、マッチする候補鍵が見つかったらこれをクリアする。
The computer sets this bit to begin a search, and it is cleared by the search unit if a matching candidate key is found.

ホストコンピュータは定期的にこのビットの状態をチェックして、ゼロならキーを読み出して探索を再開させる。
The host computer checks the status of this bit periodically and, if it is zero, reads out the key then restarts the search.

（SearchInfoレジスタのなかのChipAllActive と BoardAllActive も参照）。 
(See also ChipAllActive and BoardAllActive in the SearchInfo register.) 

bit 1 = CiphertextSelector 
bit 1 = CiphertextSelector 

探索エンジンがチェックしているのが、Ciphertext0かCiphertext1かを示す
Indicates whether the search engine is currently checking Ciphertext0 or Ciphertext1.

(0=Ciphertext0, 1=Ciphertext1)。
(0=Ciphertext0, 1=Ciphertext1).

このビットがゼロなら、探索エンジンはCiphertext0を復号して、CiphertextSelectorを1にする（平文がチェックにパスすれば）か、あるいはキーカウンタをインクリメントする（もし平文がチェックにパスしない場合）。
If this bit is clear, the search engine decrypts Ciphertext0 and either sets CiphertextSelector to 1 (if the plaintext passes the checks) or increments KeyCounter (if the plaintext does not pass).

このビットが1なら、探索エンジンはCiphertext1を復号して、SearchActiveを0にする（平文がチェックにパスすれば）か、あるいはキーカウンタをインクリメントする（もし平文がチェックにパスしない場合）。 
If this bit is set, the search engine decrypts Ciphertext1 and either sets SearchActive to 0 (if the plaintext passes the checks) or sets CiphertextSelector to 0 and increments KeyCounter (if the plaintext does not pass). 

bits 2-7 = 未使用 
bits 2-7 = Unused 


コマンド 
Commands 

各探索ユニットを別々に指定できるように、それぞれはチップ上の位置とそのチップの基板上の位置、そして基板のidによって識別できる。
In order to be able to address each search unit separately, each can be addressed uniquely by the combination of its location on the chip, the location of the chip on the board, and board's identifier.

基板IDはチップ外で解釈される。
The BoardID is interpreted off-chip;

各チップは基板セレクトピンを持っていて、基板がセレクトされたらチップにわかるようになっている。
each chip has a board select pin, which notifies the chip when the board has been selected.

チップIDのマッチングは各ASIC内で行われる。
Chip ID matching is done inside each ASIC;

ASICのIDピンはチップのIDに配線されている。 
the ID pins of the ASIC are wired to the chip's ID. 

コンピュータの発したすべてのコマンドは、バス経由で運ばれる。
All commands are originated by the computer go via a bus

このバスには、基板ID／チップID／レジスタ・アドレス用に8ビット、データ用に8ビット、そしてその他制御用に何ビットかが使われている。
which carries 8 bits for BoardID/ChipID/Register address, 8 bits for data, and a few additional bits for controls .  

探索をするには、ホストコンピュータは探索ユニットをFigure 2-2に示したような形でプログラムする。
To do a search, the host computer will program the search units as shown in Figure 2-2.

(Nは探索ユニット総数で、これは0からN-1まで番号がわりふられており、それぞれが固有の基板ID/チップID/レジスタ・アドレスを持っている。) 
(N is the total number of search units, numbered from 0 to N-1, each with a unique BoardID/ChipID/Register address.) 


探索ユニットのはたらき 
Search Unit Operation 

各探索ユニットはDESエンジンを持っていて、キーカウンタの値を使ってL/Rの二つの32ビットレジスタにDESを行う。
Each search unit contains a DES engine, which performs DES on two 32-bit registers L/R using the key value in KeyCounter.

各探索ユニットは、Figure 2-3にくわしく書いたプロセスを実行して、決して止まる必要はない。
Each search unit goes through the process detailed in Figure 2-3, and never needs to halt.

もしレジスタがこのプロセスの途中で更新されたら、出力は無意味になる
If registers are updated during the middle of this process, the output is meaningless

（これは問題にはならない。
(which is fine,

まちがった結果は統計的にみて、マッチしないのがほぼ確実だからだ）。 
since an incorrect output is statistically almost certain to not be a match). 


2-5 
2-5 

Figure 2-2: ホストコンピュータを使って探索アレイをプログラムするアルゴリズムの見本
Figure 2-2: Example algorithm for programming the search array using host computer 

これはとても単純なアルゴリズムで、見本用のものでしかない。
This is a very simple algorithm intended only as an example.

実際のソフトは、BoardAllActiveとChipAllActiveラインをつかって、もっとかしこい探索技法を使う。 
The actual software will use more intelligent search techniques, using the BoardAllActive and ChipAllActive lines. 

Ciphertext0, Ciphertext1, PlaintextXorMask, PlaintextByteMask, PlaintextVector, SearchInfo を各チップにロードする。 
Load Ciphertext0, Ciphertext1, PlaintextXorMask, PlaintextByteMask, PlaintextVector, and SearchInfo into each chip. 

For i = 0 upto N-1 
For i = 0 upto N-1 

鍵をロードしながら、探索ユニットiのSearchStatusを0にする。
Set SearchStatus in search unit i to 0 while loading the key. 

探索ユニットiのキーカウンタを((256)(i) / N)にセットする。
Set KeyCounter of search unit i to ((256)(i) / N). 

探索ユニットiのSearchStatusを1にしてSearchActiveをエネーブルする。 
Set SearchStatus in search unit i to 1 to enable SearchActive. 

EndFor 
EndFor 

While 正しいキーがみつからないうちは: 
While correct key has not been found: 

For i = 0 upto N-1: 
For i = 0 upto N-1: 

探索ユニット i の SearchStatus を読む。
Read SearchStatus from search unit i.

SearchActive ビットをチェック。
Check SearchActive bit. 

If SearchActive が0なら: 
If SearchActive is set to 0: 

ユニット i の KeyCounter を読む。
Read KeyCounter from search unit i. 

鍵の下32ビットから 1 を引く。
Subtract 1 from the low 32 bits of the key. 

ローカルコンピュータで DES 操作をして鍵をチェック。
Perform a DES operation at the local computer to check the key.

鍵が正しければ探索おしまい。
If the key is correct, the search is done. 

さもなければ、SearchStatus の SearchActive ビットをたてて探索を再開。 
Set the SearchActive bit of SearchStatus to restart the search. 

EndIf 
EndIf 

EndFor 
EndFor 

EndWhile
EndWhile 


見本プログラムの説明 
Sample Programming Descriptions 

ここでは、システムが通常のオペレーションでどうプログラムされるかを説明する。 
This section describes how the system will be programmed for some typical operations.

Known ciphertext/plaintext (ECB, CBC, etc.) 
Known ciphertext/plaintext (ECB, CBC, etc.) 

完全な暗号文／平文ブロックがわかっていたら、このモードが使われる。
If a complete ciphertext/plaintext block is known, this mode is used.

これはほとんどのDESモード（ECB、CBC、カウンタなど）で使えるけれど、いずれの場合にも暗号文と平文の完全なペアが必要となる。 
This works for most DES modes (ECB, CBC, counter, etc.), but does require a full plaintext/ ciphertext pair. 

PlaintextVector 
PlaintextVector 

この探索では、わかっている平文のなかに、固有の平文バイトが8個（またはそれ以下）ある。
For this search, there are 8 (or fewer) unique plaintext bytes in the known plaintext.

PlaintextVectorでわかっているそれぞれのバイトに対応したビットが立てられ、それ以外はゼロとなる。 
The bits corresponding to these bytes are set in PlaintextVector, but all other bits are set to 0. 


2-6 
2-6 

Figure 2-3: 探索ユニットのはたらき 
Figure 2-3: Search unit operation 

1. もし CiphertextSelector=0 なら、 L/R = Ciphertext0にする。
1. If CiphertextSelector is 0, then Let L/R = Ciphertext0. 

もし CiphertextSelector が 1 なら L/R = Ciphertext1にする。 
If CiphertextSelector is 1, then Let L/R = Ciphertext1. 

2. キーカウンタの鍵を使って L/R を復号し、候補となる平文をL/Rにつくる。 
2. Decrypt L/R using the key in KeyCounter, producing a candidate plaintext in L/R. 

3. もし ExtraXOR = 1 なら、 L = L XOR Rにする。
3. If ExtraXOR is 1, then Let L = L XOR R.

もし CiphertextSelector = 0 なら 
If CiphertextSelector is 0, then

L/R = L/R XOR PlaintextXorMaskにする。 
Let L/R = L/R XOR PlaintextXorMask. 

もし CiphertextSelector = 1 かつ UseCBC = 1 なら: 
If CiphertextSelector is 1 and UseCBC is 1, then: 

L/R = L/R XOR Ciphertext0にする。 
Let L/R = L/R XOR Ciphertext0. 

4. If SearchActive = 1 AND (
4. If SearchActive = 1 AND ( 

(PlaintextByteMask[0x80] = 0 AND PlaintextVector[byte 0 of L] is 0) OR 
(PlaintextByteMask[0x80] = 0 AND PlaintextVector[byte 0 of L] is 0) OR 

(PlaintextByteMask[0x40] = 0 AND PlaintextVector[byte 1 of L] is 0) OR 
(PlaintextByteMask[0x40] = 0 AND PlaintextVector[byte 1 of L] is 0) OR 

(PlaintextByteMask[0x20] = 0 AND PlaintextVector[byte 2 of L] is 0) OR 
(PlaintextByteMask[0x20] = 0 AND PlaintextVector[byte 2 of L] is 0) OR 

(PlaintextByteMask[0x10] = 0 AND PlaintextVector[byte 3 of L] is 0) OR 
(PlaintextByteMask[0x10] = 0 AND PlaintextVector[byte 3 of L] is 0) OR 

(PlaintextByteMask[0x08] = 0 AND PlaintextVector[byte 0 of R] is 0) OR 
(PlaintextByteMask[0x08] = 0 AND PlaintextVector[byte 0 of R] is 0) OR 

(PlaintextByteMask[0x04] = 0 AND PlaintextVector[byte 1 of R] is 0) OR 
(PlaintextByteMask[0x04] = 0 AND PlaintextVector[byte 1 of R] is 0) OR 

(PlaintextByteMask[0x02] = 0 AND PlaintextVector[byte 2 of R] is 0) OR 
(PlaintextByteMask[0x02] = 0 AND PlaintextVector[byte 2 of R] is 0) OR 

(PlaintextByteMask[0x01] = 0 AND PlaintextVector[byte 3 of R] is 0)) なら: 
(PlaintextByteMask[0x01] = 0 AND PlaintextVector[byte 3 of R] is 0)) then: 

CiphertextSelector = 0にする。
Let CiphertextSelector = 0. 

キーカウンタをインクリメント。 
Increment KeyCounter. 

そうでなければ： 
else 

もし CiphertextSelector = 1 なら SearchActive = 0にする。
If CiphertextSelector is 1 then Let SearchActive = 0. 

CiphertextSelector = 1にする。 
Let CiphertextSelector = 1. 

5. Step 1にもどる。
5. Go to step 1. 

Ciphertext0 
Ciphertext0 

暗号文ブロックに等しい。 
Equals the ciphertext block. 

Ciphertext1 
Ciphertext1 

暗号文ブロックに等しい。 
Equals the ciphertext block. 

SearchInfo 
SearchInfo 

UseCBC と ExtraXOR はどちらも 0 
UseCBC and ExtraXOR are both set to 0. 

PlaintextByteMask 
PlaintextByteMask 

0x00 に設定（全バイトを使う） 
Set to 0x00 (all bytes used). 


2-7 
2-7 

PlaintextXorMask 
PlaintextXorMask 

Set to 0x0000000000000000. 
Set to 0x0000000000000000. 

平文バイトの順序はどうでもいいので、各暗号テキストのバイトには、可能なものが8通りある。
Because the plaintext byte order does not matter, there are 8 acceptable values for each ciphertext byte,

つまり探索のチェック基準を満たす暗号文は 88 = 224 = 1.67億通りある。
or 88 = 224 = 16.7 million possible ciphertexts which will satisfy the search criteria.

まちがった暗号文がチェックをとおり可能性は 224 / 264 なので、255 通りの鍵を探索する間に、もっともらしい鍵は平均で (255)( 224 / 264), つまり32768通り出てくることになって、これらはコントロールしているコンピュータが排除しなくてはならない。
The probability that an incorrect ciphertext will pass is 224 / 264, so over a search of 255 keys there will be an average of (255)( 224 / 264), or 32768 false positives which will need to be rejected by the controlling computer.

Ciphertext0 と Ciphertext1 は同じ内容にしてあるので、最初のテストをパスするもっともらしい結果は、すべて二番目のテストもパスすることになる。
Because the Ciphertext0 and Ciphertext1 selections are identical, any false positives that pass the first test will also pass the second test.

（これが速度に与えるペナルティは、ほとんどない。
(The performance penalty is negligible;

探索システムは、32768のもっともらしい鍵についてはDES操作を二回やることになるけれど、それ以外の正しくないキーについては一通りしかやらないからだ。） 
the search system will do two DES operations on each of the 32768 false positive keys, but only one DES operation on all other incorrect keys.) 

ASCII テキスト (ECB or CBC) 
ASCII text (ECB or CBC) 

ASCIIのみのアタックの場合には、最低でも2つのとなりあった暗号テキスト（全部で16バイト）が必要になる。 
A minimum of two adjacent ciphertexts (16 bytes total) are required for ASCII-only attacks. 

PlaintextVector 
PlaintextVector 

認められるASCII文字の入ったビットだけをたてる。
Set only the bits containing acceptable ASCII characters.

通常のテキストの場合、これはふつうは256通りの文字のうち、55通りを含むものとなる
For normal text, this would normally include 55 of the 256 possible characters occur

（10=LF、13=CR, 32=空白、65-90=大文字, 97-122=小文字）。 
(10=line feed, 13=carriage return, 32=space, 65-90=capital letters, and 97-122=lowercase letters). 

Ciphertext0 
Ciphertext0 

最初の暗号テキスト。 
Equals the first ciphertext. 

Ciphertext1 
Ciphertext1 

二番目の暗号テキスト。 
Equals the second ciphertext. 

SearchInfo 
SearchInfo 

UseCBC は ECBなら0にセットされ、暗号文がCBCを使ってつくられたものなら1にセットされる。
UseCBC is set to 0 if ECB, or set to 1 if the ciphertext was produced using CBC. 

ExtraXOR は 0にセット。 
ExtraXOR is set to 0. 

PlaintextByteMask 
PlaintextByteMask 

0x00にセット (全バイト使用). 
Set to 0x00 (all bytes used). 

PlaintextXorMask 
PlaintextXorMask 

ECBなら 0x0000000000000000 にセット、CBC なら IV（初期化ベクトル） にセット。 
Set to 0x0000000000000000 for ECB, to IV for CBC. 

まちがった鍵によって復号された二つの（ランダムな）候補となる平文が、上で述べたASCII文字だけになる可能性は (55/256)16 だ。
The probability that the two (random) candidate plaintexts produced by an incorrect key will contain only the ASCII text characters listed above is (55/256)16.

したがって探索では、コンピュータがはねるべきもっともらしい結果が平均で 255 (55/256)16 = 742358 通りあることになる。
In a search, there will thus be an average of 255 (55/256)16 = 742358 false positives which need to be rejected by the computer.

22万鍵に一つは、最初のチェックをパスして、二回目のDESが必要になる
For one key in about 220,000, the first check will pass and an extra DES will be required. 

（こうした追加のDESの時間は無視できる）。
(The time for these extra DES operations is insignificant.)

もっともらしい結果がはねられるのを待つ時間も無視できる。
Idle time lost while waiting for false positives to be cleared is also insignificant.

もしコンピュータが各探索ユニットのSearchActiveフラグを一秒に一回ずつチェックするとしたら、もっともらしい結果一つあたりで、0.5探索ユニット秒が無駄になるだけ。
If the computer checks each search unit's SearchActive flag once per second, a total of 0.5 search unit seconds will be wasted for every false positive,

つまり探索全体では、400万探索ユニット・時間がかかることになるが、そのなかの103探索ユニット時間が無駄になるだけだ。 
or a total of 103 search-unit hours, out of about 4 million search-unit hours for the whole search. 


2-8 
2-8 

CBCモードのプログラミングでは、 PlaintextXorMask は初期化ベクトル（あるいは攻撃している暗号文が最初のブロックでない場合には、前の暗号文）にセットしなくてはならない。 
When programming CBC mode, note that the PlaintextXorMask must be set to the IV (or the previous ciphertext, if the ciphertext being attacked is not in the first block). 

Matt Blaze式チャレンジ 
Matt Blaze's Challenge 

目標は、すべての平文バイトが等しくて、すべての暗号文のバイトも等しいような場合を見つけることだ。 
The goal is to find a case where all plaintext bytes are equal and all ciphertext bytes are equal. 

PlaintextVector 
PlaintextVector 

ビット0だけをセット。 
Set only bit 0. 

Ciphertext0 
Ciphertext0 

すべてのバイトを等しくした固定値に。 
Set to a fixed value with all bytes equal 

Ciphertext1 
Ciphertext1 

Ciphertext0と同じ。 
Same as Ciphertext0. 

SearchInfo 
SearchInfo 

UseCBC は0にセット。
UseCBC is set to 0.

ExtraXOR は1にセット。 
ExtraXOR is set to 1. 

PlaintextByteMask 
PlaintextByteMask 

0x0Fにセット (左半分だけがチェックされる） 
Set to 0x0F (only left half examined). 

PlaintextXorMask 
PlaintextXorMask 

0x0000000000000000にセット。 
Set to 0x0000000000000000. 

平文のバイトがすべて等しければ、つまり右半分と左半分は等しくなる。
If the right and left half are equal, as must be the case if all plaintext bytes are the same,

このとき、 ExtraXOR ビットのステータスのために L=L XOR R となったら、Lは0になる。
then when the ExtraXOR bit's status causes the L=L XOR R step, L will become equal to 0.

平文マスクは左半分だけを選び、 PlaintextVector で、それが0かどうか確認できる。 
The plaintext byte mask selects only the left half and the PlaintextVector makes sure the 4 bytes are 0. 

もっともらしいケースは、L=Rのときに起こる。
False positives occur whenever L=R,

これは232に一つの鍵で起こるわけだ。
or with one key in 232.

この探索は256通りためして終わるという保証はないので、平均時間は256になる (255ではない)。
Because this search is not guaranteed to terminate after 256 operations, the average time is 256 (not 255).

もっともらしいケースの数は 256 / 232 = 224 = 1.68 億通りとなる。
The number of false positives is expected to be 256 / 232 = 224 = 16.8 million.

したがって各探索ユニットは、平均で 232 鍵ごとにもっともらしいものにあたる。
Each search unit will thus find a false positive every 232 keys on average, 

つまりは30分に一回ずつくらい、ということだ。
or about once every half hour.

各探索ユニットを1秒に1回調べるとすると、アイドリング状態になるのは (0.5)(16.8 million)/3600 = 2333 探索ユニット時間
At 1 second polling of search units, (0.5)(16.8 million)/3600 = 2333 search unit hours will be idle

（これでも全体の1％以下）。
(still under 1% of the total).

ホストコンピュータは、1.68億通り（平均）のDES操作をやらなくてはならいが、かなり下手なDES実装でも、数分あればこれは可能だ。 
The host computer will need to do the 16.8 million DES operations (on average), but even a fairly poor DES implementation can do this in just a few minutes. 


2-9 
2-9 

スケーラビリティと性能 
Scalability and Performance 

このアーキテクチャは、DES鍵を平均で10日以下で見つけるように意図されている。
The architecture was intended to find DES keys in less than 10 days on average.

Figure 2-4に最初の実装の性能を示す。
The performance of the initial implementation is specified in Figure 2-4.

ハードをふやせば、もっと高速な結果は簡単に得られる。
Faster results can be easily obtained with increased hardware;

ハードの量を増やせば結果を出すのに必要な時間は半分になる。
doubling the amount of hardware will halve the time per result.

キー探索ASICの基板は簡単に足したり減らしたりできるような設計になっていて、システムを大規模にも小規模にもできる。
Within the design, boards of keysearch ASICs can be added and removed easily, making it simple to make smaller or larger systems,

大規模システムはコストはかかるが、結果はもっとはやくわかる。
where larger systems cost more but find results more quickly.

またシステムが大きくなると、電源と冷却も強力なものが必要となる。 
Larger systems will have additional power and cooling requirements. 

Figure 2-4: 推定性能 
Figure 2-4: Performance Estimate 

ASIC総数1536
Total ASICs1536

ASICあたりの探索ユニット24
Search units per ASIC24

探索ユニット総数36864
Total search units36864

クロック速度 (Hz)4.00E+07
Clock speed (Hz)4.00E+07

キーあたり必要クロック（平均）16
Clocks per key (typical)16

探索ユニットあたり毎秒処理DES鍵数2.50E+06
DES keys per search unit per second2.50E+06

システム全体での毎秒処理DES鍵9.22E+10
Total DES keys per second9.22E+10

探索サイズ（最悪ケース）7.21E+16
Search size (worst case)7.21E+16

結果が出るまでの必要秒数（最悪ケース）7.82E+05
Seconds per result (worst case)7.82E+05

結果が出るまでの必要日数（最悪ケース）9.05
Days per result (worst case)9.05

探索サイズ（平均）3.60E+16
Search size (average case)3.60E+16

結果が出るまでの必要秒数（平均）3.91E+05
Seconds per result (average case)3.91E+05

結果が出るまでの必要日数（平均）4.52
Days per result (average case) 4.52 

ホストコンピュータのソフト 
Host Computer Software 

Cryptography Research が以下のソフトを書く予定。 
Cryptography Research will write the following software: 

シミュレーション 
Simulation 

Cryptography Research は、チップデザインがファブリケーションに送られる前にチップをテストするための、テストベクトル生成ソフトを書く。
Cryptography Research will develop software to generate test vectors for the chip for testing before the design is sent to the fab.

このソフトはチップ上のあらゆる機能をテストし、あらゆるオペレーションのモードをチェックする。
This software will test all features on the chip and all modes of operation.

このプログラムは、簡単なコマンドライン・インターフェースを持つ。 
This program will have a simple command line interface. 

ホストコンピュータ 
Host computer 

ホストコンピュータ用のソフトウェアは、平文がわかっている場合の鍵派遣、暗号化されたASCII文の解読（ECBとCBCモード）、Matt Blaze式チャレンジ解決をする通常の探索タスクを実装する。
The host computer software program will implement the standard search tasks of breaking a known plaintext, breaking encrypted ASCII text (ECB and CBC modes), and solving the Matt Blaze challenge.

このソフトはプラットホーム固有の I/O コードをのぞけば、ふつうの ANSI C でかかれる。 
These programs will be written in standard ANSI C, except for platform-specific I/O code.

2-10 
2-10 

ホストプログラムにはまたテストモードも持つ。
The host program will also have a test mode,

これは探索ユニットに、すぐ止まるのがわかっているようなタスク（たとえばほんの数百万鍵を探せばすむようなタスク）をロードしてみて、出てきた結果を確認してどこか異常はないかを検出する。
which loads search units with tasks that are known to halt reasonably quickly (e.g., after searching a few million keys) and verifies the results to detect any failed parts.

（ソフトには、探索の途中で不良探索ユニットをバイパスする機能がついている）。
(The software will include the capability of bypassing bad search units during search operations.)

通常以外の探索をしたいユーザは、カスタム関数を付け加えて、候補として出てきたキーが本当に正しいかがチェックできるようにしたうえで、コードをコンパイルしなおすこと。 
Users who wish to perform unusual searches will need to add a custom function to determining whether candidate keys are actually correct and recompile the code. 

このプログラムの最初のバージョンは、単純なコマンドライン式のインターフェースを持ち、DOS用に書かれる。
The initial version of this program will have a simple command line interface and will be written for DOS.

Linuxへの移植もされるが、最初の目標完成日には間に合わないかもしれない。
A Linux port will also be written, but may not be ready by the initial target completion date.

（プラットホームに依存するコードというのは、I/O部分だけなので、まともなコンパイラがあればどんなプラットホームへも簡単に移植できるはずだ）。
(Because the only platform-specific code will be the I/O functions, it should be very easy to port to any platform with an appropriate compiler.)

ソフトプログラムは、プロジェクト参加者 (AWT, EFF, and Cryptography Research) を明示する。 
Software programs will identify the participants in the project (AWT, EFF, and Cryptography Research). 

Cryptography Research はまた、もっときれいなインターフェースを持ったバージョンをつくる。
Cryptography Research will also produce a version with a prettier user interface

これは、デモをもっとかっこよくできるようにするためのモノだ
to make the demonstration more elegant

（プラットホームは未定）。 
(platform-to-be-determined). 

ソフトとソースコードはすべてパブリックドメインにおかれる。 
All software and source code will be placed in the public domain. 


用語集 
Glossary 

基板ID 
BoardID 

各基板ごとに与えられる、固有の8ビットid。
An 8-bit identifier unique for each board.

これは基板上のdipスイッチでセットする。
This will be set with a DIP switch on the board.

ホストコンピュータはチップをアクセスするのに、チップIDと基板IDを使う。 
The host computer addresses chips by their ChipID and BoardID. 

CBC モード 
CBC mode 

DESモードの一つ。
A DES mode

最初の平文ブロックが、初期化ベクトル（IV）とXORされ、その後の平文ブロックは、その前の暗号文とXORされる。 
in which the first plaintext block is XORed with an initialization vector (IV) prior to encryption, and each subsequent plaintext is XOR with the previous ciphertext. 

チップID 
ChipID 

ホストコンピュータが、基板上のどのチップをアクセスするか指定するときに使う値。 
A value used by the host computer to specify which chip on a board is being addressed.

暗号文 
Ciphertext 

暗号化されたデータ。 
Encrypted data. 

Ciphertext0 
Ciphertext0 

攻撃する暗号文のうち最初のもの。 
The first of the two ciphertexts to be attacked. 

Ciphertext1 
Ciphertext1 

攻撃する暗号文のうち2番目のもの。 
The second of the two ciphertexts to be attacked. 

_________________ 
必要なら、ANSI C 以前のものもサポート可能。
Pre-ANSI C can be supported if required.

GUIコードはおそらくすべてC++で書かれるはず。 
Any GUI code will probably be written in C++ . 


2-11 
2-11 

CiphertextSelector 
CiphertextSelector 

現在攻撃されている暗号文を選ぶためのレジスタ。
A register used to select the current ciphertext being attacked.

各DESエンジンは、あるキーが見込みありそうだと判断するときに、暗号文を2つテストして両方とも見込みある結果が出ていることを確認するので、このセレクタが必要になる。 
The selector is needed because a single DES engine needs to be able to test two ciphertexts to determine whether both are acceptable matches before deciding that a key is good match. 

DES 
DES 

データ暗号化規格（The Data Encryption Standard） 
The Data Encryption Standard. 

ExtraXOR 
ExtraXOR 

復号結果の右半分と左半分をXORをする追加操作を探索ユニットにさせるためのレジスタ。
A register to make the search units perform an extra operation which XORs the right and left halves of the result together.

Matt BlazeのDES問題の解決をサポートできるように追加された。 
This is used to add support for Matt Blaze's DES challenge. 

ホストコンピュータ 
Host computer 

DES探索アレイをコントロールするコンピュータ。 
The computer that controls the DES search array. 

キーカウンタ 
KeyCounter 

各探索ユニットにはキーカウンタ・レジスタがあって、現在チェック中の鍵がおさめられている。
Each search unit has a KeyCounter register which contains the current key being searched.

このレジスタはそれぞれ7バイトあり、56ビットの鍵がおさまるようになっている。 
These registers are each 7 bytes long, to hold a 56-bit key. 

平文（Plaintext） 
Plaintext 

暗号文に対応した、暗号化されていないデータ。 
Unencrypted data corresponding to a ciphertext. 

PlaintextByteMask 
PlaintextByteMask 

8ビットのレジスタで、平文のバイトにマスクをかけるために使う。
An 8-bit register used to mask off plaintext bytes.

平文で、値のわかっていないバイトをマスクしておいたり、わかってはいてもPlaintextVectorに記述できるほど明確ではない場合に使う。 
This is used to mask off bytes in the plaintext whose values aren't known or are too variable to list in the PlaintextVector. 

PlaintextVector 
PlaintextVector 

256-bit のレジスタで、見込みある平文でどのバイト値があり得るかを指定するためのもの。
A 256-bit register used to specify which byte values can be present in valid plaintexts.

ホストコンピュータは、PlaintextVectorのまともな数のビットがセットされているのを自分で確認する必要がある。
It is the host computer's responsibility to ensure that only a reasonable number of bits are set in the PlaintextVector;

セットされているビットが多すぎれば、DESの探索が止まる回数が多くなりすぎる。 
setting too many will cause the DES search units to halt too frequently. 

PlaintextXorMask 
PlaintextXorMask 

Ciphertext0 を復号した結果にXORされる64-bit レジスタ。
A 64-bit register XORed onto the value derived by decrypting ciphertext 0. 

ふつうは、このマスクは0ｓｗ、CBCモードのときには初期化ベクトル（IV）にセットされる。 
Normally this mask is either zero or set to the CBC mode initialization vector (IV). 

SearchActive 
SearchActive 

各探索ユニット上のビットで、現在探索を行っているか、それとも候補鍵を見つけて止まっているかを示す。
A bit for each search unit which indicates whether it is currently searching, or whether it has stopped at a candidate key.

止まった探索ユニットを再開するには、止まらない鍵をロードして、このビットをリセットする。 
Stopped search units can be restarted by loading a key which does not halt and resetting this bit. 

SearchInfo 
SearchInfo 

DESの結果をどのように事後処理するかについて、各種の情報を入れておくレジスタ。
A register containing miscellaneous information about how DES results should be post-processed

さらに、チップ上または基板上の探索ユニットがどれか止まったかどうかも示す。 
and also indicating whether any search units on the chip or on the board have halted.


2-12 
2-12 

UseCBC 
UseCBC 

SearchInfo の中のビットで、探索エンジンが復号後にCBCモードの事後処理を行うように指示する
A bit in SearchInfo which directs the search engine to do CBC-mode post-processing after decryption

（つまりciphertext1の復号結果をciphertext0とXORしてplaintext1をつくるようにする）。 
(e.g., XOR the decryption of ciphertext1 with ciphertext0 to produce plaintext1). 


3 
3 

DES 鍵探索アレイの設計：チップレベルの仕様 
Design for DES Key Search Array Chip-Level Specification 

本章の内容: 
In this chapter: 

ASICの説明 
ASIC Description 

基板の説明 
Board description 

リード／ライトのタイミング 
Read and Write Timing 

アドレス指定用レジスタ 
Addressing Registers 

All-active 信号 
All-active Signal 

ASIC レジスタのわりあて 
ASIC Register Allocation 

Advanced Wireless Technologies, Inc. and Cryptography Research
Advanced Wireless Technologies, Inc. and Cryptography Research 


ASIC の説明 
ASIC Description 

Select1 
Select1 

Cipher text 1 を選ぶ 
Selects Cipher text 1 

C0 
C0 

Cipher text 0 
Cipher text 0 

C1 
C1 

Cipher text 1 
Cipher text 1 

Search 
Search 

探索がアクティブ 
Search is active 

K 
K 

鍵 
Key 

Mask 
Mask 

平文ビットマスクとDES出力 
Plain text bit mask and DES output 

Match=0 
Match=0 

「探索ユニットの仕組み」のStep 4で指定された平文ベクトルのビット位置すべてにゼロが入る（第二章参照） 
a Zero is found in any bit position of plain text vector as specified in step 4 of Search Unit Operation (see Chapter 2) 

CBC & Extra XOR 
CBC & Extra XOR 

「探索ユニットの仕組み」のStep 3で指定された操作を行う。（第二章参照） 
Perform step 3 of Search Unit Operation (see Chapter 2) 


3-1 
3-1 

3-2 
3-2 
 
Figure 3-1. 探索ユニットの動きのフローチャート
Figure 3-1. Search Unit Operation Flow Chart 

鍵に必要な最大のビット数を決めるために： 
To determine the maximum number of bit required for the Key: 

K= log2(最大組み合わせ数/チップ数) 
K= log2(Maximum combinations/number of chips) 

= log2(256/(24 cpc * 64 cpb * 24 基板) = log2(1. 95E12) = 42 ビット 
= log2(256/(24 cpc * 64 cpb * 24 boards) = log2(1. 95E12) = 42 bits 

32ビットカウンタを使う場合には、これは以下の間隔でオーバーフローすることになる： 
If we are going to use 32-bit counters, then it will overflow every: 

232 * 16 cycles * 25ns = 1. 72 * 1012ns = 1720 sec = 28. 7 minutes 
232 * 16 cycles * 25ns = 1. 72 * 1012ns = 1720 sec = 28. 7 minutes 


3-3 
3-3 

Figure 3-2 探索ユニットの状態ダイヤグラム
Figure 3-2 State Diagram tor the Search Unit 

基板の説明 
Board description 

コンピュータはパラレルカード経由でASICとインターフェースする。
The PC will interface with the ASICs through a parallel card.

パラレルカードにはポートが3つあり、以下のように割り当てられている： 
The parallel card has three ports, assigned: 

Port A: アドレス(7:0)
Port A: Address(7:0) 

Port B: データ(7:0)
Port B: Data(7:0) 

Port C: 制御信号 8 本 
Port C: Control, 8 signals 

基板とASICのルーティングリソースを減らすために、アドレス線は多重化してある。
To reduce the routing resources on the boards and ASICs we multiplex the address lines.

ASIC上のレジスタをアクセスするためには、ソフトはアドレスを3回ラッチする必要がある。
To access a register on the ASIC, it is required that the software latch the address three times:

基板-ID(7:0), チップ-ID(6:0) 最後にレジスタアドレスである。 
Board-ID(7:0), Chip-ID(6:0) and then Register address. 


3-4 
3-4  

Figure 3-3: 探索ユニットのブロックダイヤグラム
Figure 3-3: Search Unit's Block Diagram 

基板上にスイッチを持つことで、設計が柔軟で拡張しやすいものになる。
Having switches on the board makes the design flexible and expandable.

各基板には、固有の基板 ID があって、これがスイッチで設定できるようになっている。
Each board has its own unique Board-ID configured on switches:

たとえば16進で 5F の基板 ID を持つ基板は、基板 ID スイッチを以下のように設定することなる： 
for example a board with an ID of hexadecimal 5F has its board ID switches configured as follows: 

3-5 
3-5 

リード／ライトのタイミング 
Read and Write Timing 

3-6 
3-6 

tas1 10 ns Min Board-ID and Chip-ID Address setup 
tas1 10 ns Min Board-ID and Chip-ID Address setup 

tas2 10 ns Min Write Register-Address setup 
tas2 10 ns Min Write Register-Address setup 

tas3 10 ns Min Read Register-Address setup 
tas3 10 ns Min Read Register-Address setup 

tah1 10 ns Min Board-ID and Chip-ID Address invalid (hold) 
tah1 10 ns Min Board-ID and Chip-ID Address invalid (hold) 

tah2 10 ns Min Write strobe trailing edge to Address invalid (hold) 
tah2 10 ns Min Write strobe trailing edge to Address invalid (hold) 

tav 10 ns Min ALE valid 
tav 10 ns Min ALE valid 

tds 10 ns Min Data valid to Write strobe goes low (setup) 
tds 10 ns Min Data valid to Write strobe goes low (setup) 

tch 10 ns Min Chip select hold 
tch 10 ns Min Chip select hold 

tdh 10 ns Min Write strobe goes high to data invalid (Data hold) 
tdh 10 ns Min Write strobe goes high to data invalid (Data hold) 

trv 10 ns Min Read strobe duration 
wtrv 10 ns Min Read strobe duration 

tdv 100 ns Max Read strobe goes low to data valid 
tdv 100 ns Max Read strobe goes low to data valid 

tdh 100 ns Max Read strobe goes high to data invalid (Data hold) 
tdh 100 ns Max Read strobe goes high to data invalid (Data hold) 


3-7 
3-7 

アドレス指定用レジスタ 
Addressing Registers 

Figure 3-4 アドレスバスのダイヤグラム
Figure 3-4 Address Bus Scheme

All-active 信号 
All-active Signal 

この信号がlowなら、探索ユニットのどれか（複数可）がとまったことになる。
If low the SearchActive bit together [?]. 


この値は、SearchActive ビットをすべてANDして得られる結果である。


ASICごとにANDゲートを一つおいて、それをカスケード接続している。 
We will place one AND gate per ASIC and cascade them. 


3-8 
3-8 

ASIC レジスタわりあて 
ASIC Register Allocation 

全探索ユニットに共通するレジスタ
Registers Common to All Search Units 

0x00-0x1fPlaintextVector
0x00-0x1fPlaintextVector

0x20-0x27PlaintextXorMask
0x20-0x27PlaintextXorMask

0x28-0x2fCipherText0
0x28-0x2fCipherText0

0x30-0x37CipherText1
0x30-0x37CipherText1

0x38PlaintextByteMask
0x38PlaintextByteMask

0x39-0x3e予約済み
0x39-0x3eReserved

0x3fSearchInfo
0x3fSearchInfo

探索ユニットのその他レジスタ
Additional Registers for Search Units 

0x40-0x47探索ユニット 0: キーカウンタ (最初の 7 バイト) と Search Status
0x40-0x47Search Unit 0: Key counter (first 7 bytes) and Search Status

0x48-0x4f探索ユニット 1: キーカウンタ (最初の 7 バイト) と Search Status
0x48-0x4fSearch Unit 1: Key counter (first 7 bytes) and Search Status

      . . .

0xf8-0xff探索ユニット 23: キーカウンタ (最初の 7 バイト) と Search Status
0xf8-0xffSearch Unit 23: Key counter (first 7 bytes) and Search Status

必要なレジスタ数： 
Number of register required: 

共通レジスタ 58 + 8 * n レジスタ; n = ASIC内の探索ユニットの総数。
58 common registers + 8 * n registers; n = the total number of search units in an ASIC

この倍には n = 24 なので、 58 + 192 = 250 レジスタが必要となる。 
In this case n = 24, therefore 58 + 192 = 250 registers 


3-9 
3-9 

Note: 指定のないピンは接続なし 
Note: The unspecified pins are Non-Connects 

CNTRL0 = ALE = ADDSEL1 
CNTRL0 = ALE = ADDSEL1 

CNTRL1 = CSB = ADDSEL2 
CNTRL1 = CSB = ADDSEL2 


4 
4 

ソースコードのスキャン 
Scanning the Source Code 

本章の内容: 
In this chapter: 

暗号ソースコードの政治性 
The Politics of Cryptographic Source Code 

紙の出版物は例外 
The Paper Publishing Exception 

スキャン 
Scanning 

ブートストラップ 
Bootstrapping 

この先の何章かは、DESクラッカーの設計のためにわれわれが書いたドキュメントを、特別な書式で掲載している。
The next few chapters of this book contain specially formatted versions of the documents that we wrote to design the DES Cracker.

これらのドキュメントは、ばか力方式暗号解析研究におけるわれわれの主要なソースであり、ほかの研究者はわれわれの研究結果を再現したり追試したりするためにこれが必要となる。 
These documents are the primary sources of our research in brute-force cryptanalysis, which other researchers would need in order to duplicate or validate our research results. 

暗号ソースコードの政治性 
The Politics of Cryptographic Source Code 

われわれは暗号の科学の急速な進歩に関心があるし、さらには市民にたいして暗号技術のメリットや危険性について啓蒙することにも関心がある。
Since we are interested in the rapid progress of the science of cryptography, as well as in educating the public about the benefits and dangers of cryptographic technology,a

したがって、できればこうした情報をすべてWorld Wide Webに載せたいと思っていた。
we would have preferred to put all the information in this book on the World Wide Web.

そうすれば、暗号の勉強をしたいと思う世界中の人が、だれでもすぐにアクセスできるようになる。 
There it would be instantly accessible to anyone worldwide who has an interest in learning about cryptography. 

残念ながら、著者たちの住んで働いている国では、暗号に関する政策は何十年にもわたる秘密主義と隠密統制のもとで形成されてきている。
Unfortunately the authors live and work in a country whose policies on cryptography have been shaped by decades of a secrecy mentality and covert control.

強力な政府機関が業務のために盗聴を利用している
Powerful agencies which depend on wiretapping to do their jobs

――そして業務以外の、自分の権力を温存するための目的でも。
--as well as to do things that aren't part of their jobs, but which keep them in power

こうした機関が、議会や政府の重要機関を操ってきた。
--have compromised both the Congress and several Executive Branch agencies.

かれらは議会を説得して、研究者――われわれのような――が自分の研究成果を公開する自由を制限するような、憲法違反の法律を可決させてしまった。
They convinced Congress to pass unconstitutional laws which limit the freedom of researchers--such as ourselves--to publish their work.

（議会に憲法違反をするよう説得するのは、ネコにキイキイいう缶切りの音を聞いて（エサがもらえると思って）寄ってくるように説得するのとおなじくらい簡単なことが多いのだけれど、だからといってそういう機関がそういうまねをしていいということにはならない。）
(All too often, convincing Congress to violate the Constitution is like convincing a cat to follow a squeaking can opener, but that doesn't excuse the agencies for doing it.)

商務省や国務省、法務省などに圧力をかけて、こうした違憲な法律を支持するようにさせて職務上の宣誓を破らせただけでなく、その抑圧的な検閲方式の窓口にさせて、違憲な規制をつくらせ、ふつうの研究者やソフト作者を弾圧するようにさせている。 
They pressured agencies such as the Commerce Department, State Department, and Department of Justice to not only subvert their oaths of office by supporting these unconstitutional laws, but to act as front-men in their repressive censorship scheme, creating unconstitutional regulations and enforcing them against ordinary researchers and authors of software. 

4-1 
4-1 

4-2 
4-2 

これに関与している主要政府機関は、National Security Agencyであるが、ここ数年はFBIもリクルートされたらしい。
The National Security Agency is the main agency involved, though they seem to have recruited the Federal Bureau of Investigation in the last several years. 

外側にいるわれわれとしては、この機関たちが、政府のほかの部分にたいしてどんな圧力をかけているのか、推測するしかない。
From the outside we can only speculate what pressures they brought to bear on these other parts of the government.

FBIは、違法な盗聴をながいことつづけているし、盗聴のあとは、その情報を脅迫（議員や大統領に対する脅迫も含め）に使っている。
The FBI has a long history of illicit wiretapping, followed by use of the information gained for blackmail, including blackmail of Congressmen and Presidents.

FBI のスポークスマンは、それが「むかしのわるいFBI」の話であって、J. エドガー・フーヴァーが死んで、ニクソン大統領が失脚してからはもうそういうのは一掃された、と言う。
FBI spokesmen say that was "the old bad FBI" and that all that stuff has been cleaned up after J. Edgar Hoover died and President Nixon was thrown out of office.

でもこうした機関は、ふつうの市民がかれらの活動を調べようとすると、あらゆる手を使ってこれを妨害する。
But these agencies still do everything in their power to prevent ordinary citizens from being able to examine their activities,

Freedom of Information 法を使って、かれらがやっていることをはっきり知ろうとすると、協力を拒否するわけだ。 
e.g. stonewalling those of us who try to use the Freedom of Information Act to find out exactly what they are doing. 

とにかく、こうした機関は法や規制に影響を与えて、アメリカの暗号研究家たちがその結果をWorld Wide Web (あるいはそれ以外の電子的な形）で公開するのを非合法にしてしまった。 
Anyway, these agencies influenced laws and regulations which now make it illegal for U.S. crypto researchers to publish their results on the World Wide Web (or elsewhere in electronic form). 

紙の出版物は例外暗号学者のなかには、アメリカ政府に対する訴訟をおこした人たちもいる。
The Paper Publishing Exception Several cryptographers have brought lawsuits against the U.S. Government 

暗号の輸出を禁止する法律のために、自分たちの研究成果が検閲されてしまっているからだ。 
because their work has been censored by the laws restricting the export of cryptography.

(Electronic Frontier Foundation は、こうした訴訟の一つ Bernstein v. Department of Justice, et al を資金援助している)*。 
(The Electronic Frontier Foundation is sponsoring one of these suits, Bernstein v. Department of Justice, et al ).*

こうした慣行を、裁判で検討してもらうことの結果の一つとして、かつて存在していたきわめてあくどいやり口が使われなくなってきた、ということがある。
One result of bringing these practices under judicial scrutiny is that some of the most egregious past practices have been eliminated. 
 
たとえば、1970年代から1980年代初期にかけて、ある種の科学論文を刊行したり、それを図書館においたりした研究者にたいして、NSAは刑事訴訟をちらつかせて脅しをかけている。
For example, between the 1970s and early 1990s, NSA actually did threaten people with prosecution if they published certain scientific papers, or put them into libraries.

また、協力しようという人々に対しては「自主的」検閲方式も用意していた。
They also had a "voluntary" censorship scheme for people who were willing to sign up for it.

でも訴えられると、政府としては、こうした本や論文などを検閲し続ければ、輸出制限での法廷闘争においてとても不利になることを理解したわけだ。
Once they were sued, the Government realized that their chances of losing a court battle over the export controls would be much greater if they continued censoring books, technical papers, and such. 

判事は、本ならわかる。
Judges understand books.

政府が人々にたいして、本を書いたり頒布したり販売したりするのを禁止するというのは、なにか怪しげなことが行われているのだ、というのも、判事たちは理解できる。
They understand that when the government denies people the ability to write, distribute, or sell books, there is something very fishy going on.

政府は、インターネットやフロッピーディスク、ファックスや電話といった派手な現代技術についてなら、判事数人の目をくらませることはできるだろう。
The government might be able to pull the wool over a few judges' eyes about jazzy modern technologies like the Internet, floppy disks, fax machines, telephones, and such.

でも、この自由な国で、紙にインクをのせただけでだれかを牢屋にぶちこんだり、処罰したりするというのが憲法にてらして正しいかどうか、という点については、ごまかされる判事はいないだろう。
But they are unlikely to fool the judges about whether it's constitutional to jail or punish someone for putting ink onto paper in this free country.  

_________________ 
* http://www.eff.org/pub/Privacy/ITAR_export/Bernstein_case/を見よ。 
* See http://www.eff.org/pub/Privacy/ITAR_export/Bernstein_case/. 


4-3 
4-3 

したがって、暗号の輸出禁止に関する最新の重要なアップデート（1996）では、こうした輸出規制は、情報を本（あるいはそれ以外のあらゆる形式の紙）として出版することに対しては適用されないことが明記されることになった。
Therefore, the last serious update of the cryptography export controls (in 1996) made it explicit that these regulations do not attempt to regulate the publication of information in books (or on paper in any format).

政府機関のほうは、いずれ本も規制の対象にする「かもしれない」――おそらくは、いまの法廷闘争すべてに勝ったら、ということだろう――と煮え切らないことを言ってはいる。
They waffled by claiming that they "might" later decide to regulate books--presumably if they won all their court cases

でもそれまではアメリカ合州国憲法の修正第一条がまだ本に対しては適用されているので、われわれは本の形でなら、どんな暗号に関する情報を出版するのも自由である。
-- but in the meantime, the First Amendment of the United States Constitution is still in effect for books, and we are free to publish any kind of cryptographic information in a book.

たとえば、いまごらんになっている本書のような。 
Such as the one in your hand. 

したがって、暗号研究はこれまで紙ベースで発表されてきたけれど、今後も紙での発表が続くトレンドを見せている。
Therefore, cryptographic research, which has traditionally been published on paper, shows a trend to continue publishing on paper,

ほかの科学研究は急速にオンライン化されつつあるのだが。 
while other forms of scientific research are rapidly moving online. 

Electronic Frontier Foundation はこれまで、情報のほとんどを電子的に公開してきた。
The Electronic Frontier Foundation has always published most of its information electronically.

定期的な電子ニュースレターを出し、メンバーや一般市民とのやりとりもほとんどが電子メールと電話で、市民の権利と責任についての電子保存情報をの膨大な資料庫をつくりあげてきた。
We produce a regular electronic newsletter, communicate with our members and the public largely by electronic mail and telephone, and have built a massive archive of electronically stored information about civil rights and responsibilities,

これは世界中から、すぐにWebやFTP経由でアクセスできるようになっている。 
which is published for instant Web or FTP access from anywhere in the world.

この本も、おなじ形式で出版したいと思ったけれど、でもまだそれは不可能だ。
We would like to publish this book in the same form, but we can't yet,

このためには、われわれの法廷闘争で、研究に対する検閲を認める法律が却下されなくてはならない。
until our court case succeeds in having this research censorship law overturned. 

アメリカでは、暗号ソフトが入った本とまったくおなじ情報を電子的に公開すると、深刻な非合法行為となってしまう。
Publishing a paper book's exact same information electronically is seriously illegal in the United States, if it contains cryptographic software.

それを個人的に、友だちや同僚に教えるだけでも、それが電子的に行われる場合でその相手がアメリカに住んでいない場合には、政府に非合法であるとされてしまう。
Even communicating it privately to a friend or colleague, who happens to not live in the United States, is considered by the government to be illegal in electronic form.  

アメリカ商務省は、暗号ソフトのある外国のロケーションへのリンクを含んだWorld Wide Web ページを公開しても、それは「輸出監督規制（Export Administration Regulations, EAR）の対象となる輸出にはならない」と公式に発表している。* 
The U.S. Department of Commerce has officially stated that publishing a World Wide Web page containing links to foreign locations which contain cryptographic software "is not an export that is subject to the Export Administration Regulations (EAR)."*

これはわれわれにも納得がいく
This makes sense to us

――ちょっと「極論にまで誇張」reductio ad absurdum 式の思考実験をしてみれば、リンク禁止が実質的に意味を持つためには、外国の Universal Resource Locatorsを表示すること自体を禁止しなくてはならないことがわかる。
--a quick reductio ad absurdum shows that to make a ban on links effective, they would also have to ban the mere mention of foreign Universal Resource Locators.

URL というのはただの文字が並んでいるだけだ。
URLs are simple strings of characters,

たとえば http://www.eff.orgのように。
like http://www.eff.org;

アメリカの法廷が、どこか情報がみつかる場所の名前を挙げるだけの行為を禁止するようなことは、おそらくあり得ないだろう。 
it's unlikely that any American court would uphold a ban on the mere naming of a location where some piece of information can be found. 

したがって、Electronic Frontier Foundation は自由な国でこの本の電子的なコピーが存在するところへのリンクを公開するのは自由である。
Therefore, the Electronic Frontier Foundation is free to publish links to where electronic copies of this book might exist in free countries.

もしそうした本書の電子バージョンが海外にあることがわかれば、それに対するリンクを http://www.eff.org/pub/Privacy/Crypto_misc/DESCracker/のページで公開する。 
If we ever find out about such an overseas electronic version, we will publish such a link to it from the page at http://www.eff.org/pub/Privacy/Crypto_misc/DESCracker/. 

___________________ 
* これは、 http://samsara.law.cwru.edu/comp_law/jvd/pdj-bxa-gjs070397.htmに含まれている。
* In the letter at http://samsara.law.cwru.edu/comp_law/jvd/pdj-bxa-gjs070397.htm,

これは、Peter Junger教授の暗号輸出制限規制に対する修正第一条訴訟の一部である。 
which is part of Professor Peter Junger's First Amendment lawsuit over the crypto export control regulations. 


スキャン 
Scanning 

この本を印刷するときには、Pretty Good Privacy, Inc のツールを使った。
When printing this book, we used tools from Pretty Good Privacy, Inc

(同社は後に、Network Associates, Incに統合された。) 
(which has since been merged into Network Associates, Inc.).

PGPは、ソースコードをスキャンし、さらにスキャン用にソースコードを印刷するための、なかなかすぐれたツール群をつくっている。
They built a pretty good set of tools for scanning source code, and for printing source code for scanning.

本書で公開しているドキュメントを扱ういちばん簡単な方法は、かれらのツールと、スキャン上の指示を利用することだ。 
The easiest way to handle the documents we are publishing in this book is to use their tools and scanning instructions. 

PGP は、もちろんこうしたツールを本の形で公開している。 
PGP published the tools in a book, naturally,

"Tools for Publishing Source Code via OCR", by Colin Plumb, Mark H. Weaver, and Philip R. Zimmermann, ISBN # 1-891064-02-9 だ。
called "Tools for Publishing Source Code via OCR", by Colin Plumb, Mark H. Weaver, and Philip R. Zimmermann, ISBN # 1-891064-02-9.

この本は1997年に発行されて、 Printers Inc. Bookstore, 301 Castro St, Mountain View, California 94041 USA; phone +1650 961 8500; http://www.pibooks.comが販売している。
The book was printed in 1997, and is sold by Printers Inc. Bookstore, 301 Castro St, Mountain View, California 94041 USA; phone +1650 961 8500; http://www.pibooks.com. 

OCRツール本におさめられたツールや指示は、PGPの本だけでなく、インターネット上でも入手できる。 
The tools and instructions from the OCR Tools book are now available on the Internet as well as in PGP's book.

http://www.pgpi.com/project/, で、「proof-reading utilities」（校正用ユーティリティ）を見てほしい。
See http://www.pgpi.com/project/, and follow the link to "proof-reading utilities".

ページが移動したり、構成が変わったりしてこれではうまくいかない場合には、International PGP ページ http://www.pgpi.comからさがしていってほしい。 
If that doesn't work because the pages have been moved or rearranged, try working your way down from the International PGP page, http://www.pgpi.com. 

PGP のツールは、行ごととページごとにチェックサムを出してくれるし、ふつうは目に見えない、tabや複数の空白といった文字もはっきりわかるようにしてある。
PGP's tools produce per-line and per-page checksums, and make normally invisible characters like tabs and multiple spaces explicit.

このツールを入手したら、その本にある説明文を読むか、あるいはオンラインで配布されているREADMEファイルを読むことを強く推奨する。
Once you obtain these tools, we strongly suggest reading the textual material in the book, or the equivalent README file in the online tool distribution.

本書などのようなプログラムリストをスキャンして構成するための、とても詳しい指示が書いてある。
It contains very detailed instructions for scanning and proofreading listings like those in this book.

本書でこの先に書いた指示は、それをごくごく簡略化したものだ。 
The instructions that follow in this chapter are a very abbreviated version. 

このプログラムリストを電子化する手順は2つある。
The first two parts of converting these listings to electronic form is

まず最初に、ページの画像をスキャンすること、そしてその画像を、ページ上のテキストに近いものに変換することだ。
to scan in images of the pages, then convert the images into an approximation of the text on the pages.

さいしょの部分は機械的なスキャナで行われる。
The first part is done by a mechanical scanner;

二番目の部分は、光学式文字認識（Optical Character Recognition, OCR) プログラムで行う。
the second is done by an Optical Character Recognition (OCR) program.

ちかくの「コピー屋」などで、スキャナとOCRソフトがついているコンピュータを借りられることもある。 
You can sometimes rent time at a local "copy shop" on a computer that has both a scanner and an OCR program. 

ソースをスキャンするときには、まずOCRソフトを「訓練」してやろう。
When scanning the sources, we suggest "training" your OCR program

まず、以下のテストファイルのページやプログラムの一部をスキャンして、OCRがそれぞれのテキストをどう判断するかをいろいろ手直ししてやればいい。
by scanning the test-file pages that follow, and some of the listings, and correcting the OCR program's idea of what the text actually said.

これをどうやるかは、使うOCRソフトにもよる。
The details of how to do this will depend on your particular OCR program.

でも、われわれの使っているそれぞれの文字や記号の形についてきちんと識別できるように教え込んでおけば、その後のページをスキャンして修正するときの手間はずっと省けるようになる。
But if you straighten it out first about the shapes of the particular characters and symbols that we're using, the process of correcting the errors in the rest of the pages will be much easier.  

プログラムリストには、独特な文字がいくつか使われている。
Some unique characters are used in the listings;

OCRソフトに、それぞれつぎのように変換しろと教えておこう。 
train the OCR program to convert them as follows: 


4-5 
4-5 

右向き三角形（タブとして使用）：通貨記号（バイト値は8進で244） 
Right pointing triangle (used for tabs) - currency symbol (byte value octal 244) 

小さなまん中の三角形「ドット」（複数スペースとして使用）：ナカグロ (バイト値は8進で 267) 
Tiny centered triangle "dot" (used for multiple spaces) - center dot or bullet (byte value octal 267) 

フォームフィード：円記号（バイト値は8進で 245) 
Form feed - yen (byte value octal 245) 

大きな黒い四角形（行が続くことを示す）： pilcrow または paragraph symbol (バイト値は8進で266). 
Big black square (used for line continuation) - pilcrow or paragraph symbol (byte value octal 266). 

ページのスキャンとOCR処理がすんだら、それをPGPのツールにかけて、まちがいをみつけて訂正すれば、きれいなオンラインのコピーをつくれる。
Once you've scanned and OCR'd the pages, you can run them through PGP's tools to detect and correct errors, and to produce clean online copies. 
 
ブートストラップ 
Bootstrapping 

Philip R. Zimmermann と Network Associates の好意により、PGP OCRツールをもっていない人たちを支援するために、ここにPGPのbootstrapとbootstrap2ページを載せておこう。
By the courtesy of Philip R. Zimmermann and Network Associates, to help people who don't have the PGP OCR tools, we have included PGP's bootstrap and bootstrap2 pages.

（「ブートストラップ」ということばは、「自分のブーツのひもをもって自分を引っ張り上げる」という話から出ている。
(The word bootstrap refers to the concept of "pulling yourself up by your bootstraps",

つまり、外からの助けを借りずに自分を起動する、という意味で使われている）
i.e. getting something started without any outside help.)

まともなかたちで以下のページをスキャンしてOCRにかければ、この本とPerlさえあれば、修正済みのファイルを抽出できる。
If you can scan and OCR the pages in some sort of reasonable way, you can then extract the corrected files using just this book and a Perl interpreter.

ただしこれは、PGPツールを使ったときよりも手作業が増える。 
It takes more manual work than if you used the full set of PGP tools. 

さいしょのブートストラッププログラムは、そこそこ読みやすいPerlのコードが1ページほどだ。
The first bootstrap program is one page of fairly easy to read Perl code.

このページをできるだけ慎重にスキャンすること。
Scan in this page, as carefully as you can:

校正は手作業でやらなくてはならない。
you'll have to correct it by hand.

OCRから出てきた結果をファイルに保存して、手でチェックサムを取り除いてやれば、Perlスクリプトとして実行できるようになる。
Make a copy of the file that results from the OCR, and manually delete the checksums, so that it will run as a Perl script.

そうしたら、このPerlスクリプトを、OCR結果（チェックサムつきのもの）を引数にして実行しよう。
Then run this Perl script with the OCR result (with checksums) as the argument.

もし手作業の校正がうまくいっていれば、きちんと実行されて、自分自身のきれいなコピーが「bootstrap」というファイルになってできるはずだ。
If you've corrected it properly, it will run and produce a clean copy of itself, in a file called bootstrap.

（ほかにそういうファイル名のファイルがないことを事前に確認しておくこと）。
(Make sure none of your files have that name.)

もし校正がちゃんとしていなければ、Perlスクリプトは途中で死ぬので、印刷されたものと比べて、見逃したところがないか確かめることになる。
If you haven't corrected it properly, the perl script will die somehow and you'll have to compare it to the printed text to see what you missed.  

ブートストラップのスクリプトを実行すると、入力ファイルの行ごとにチェックサムを調べる。
When the bootstrap script runs, it checks the checksum on each line of its input file.

チェックサムがあわない行があるごとに、スクリプトはエディタをたちあげて停止する。
For any line that is incorrect, the script drops you into a text editor

（エディタは環境変数EDITORで指定しておく）。
(set by the EDITOR environment variable)

エディタで問題の行をなおそう。
so you can fix that line.

エディタをとじると、またスクリプトの実行が再開する。 
When you exit the editor, it starts over again. 

ブートストラップのスクリプトが、自分自身をきれいに再現してくれたら、bootstrap2のページをスキャンしてOCRにかけて、それをこのbootsrtapにかけてやろう。
Once the bootstrap script has produced a clean version of itself, you can run it against the scanned and OCR'd copy of the bootstrap2 page.

同じように一行ずつ校正していって、bootstrapスクリプトが文句をいわないようになるまでつづける。
Correct it the same way, line by line until bootstrap doesn't complain.

これでbootstrap2がきれいに再現できるはずだ。 
This should leave you with a clean copy of bootstrap2. 

bootstrap2 スクリプトを使って、この本の残りの部分をスキャンしよう。
The bootstrap2 script is what you'll use to scan in the rest of the book.

はたらきはbootstrapスクリプトと似ているけれど、ページチェックサムも使うので、もっとまちがいをたくさん発見できる。
It works like the bootstrap script, but it can detect more errors by using the page checksum.

これも、自分でまちがいをなおしてはくれないけれど、手動でまちがいをなおせるようにエディタをたちあげてくれる。
Again, it won't correct most errors itself, but will drop you into an editor to correct them manually.

（自動エラー訂正がほしければ、PGPの本やツールを入手すること。） 
(If you want automatic error correction, you have to get the PGP book.) 


4-6 
4-6 

この本にある、スキャン可能なプログラムリストは、すべてパブリック・ドメインに属している。
All the scannable listings in this book are in the public domain,

テストファイル、ブートストラップ、ブートストラップ2は著作権があるが、（著作権保持者の）Network Associatesはそれを自由に複製していいと認めているので、
except the test-file, bootstrap, and bootstrap2 pages, which are copyrighted, but which Network Associates permits you to freely copy.

著者たちはあなたがこのプログラムリストを友だちにコピーしてあげたり、なにかに採録したり、スキャンしたり、出版したり、製品で使ったりすることについて、一切の制限をつけていない。
So none of the authors have put restrictions on your right to copy their listings for friends, reprint them, scan them in, publish them, use them in products, etc.

しかしながら、もしあなたが自由でない国に住んでいる場合には、こうした情報を入手してからそれを使ってなにができるかについては、制限がかけられているかもしれない。
However, if you live in an unfree country, there may be restrictions on what you can do with the listings or information once you have them.

これについては、現地の思考警察に確認すること。 
Check with your local thought police. 

pp. 4-7 to 4-14 はまだ準備中:
pp. 4-7 to 4-14 in preparation:

内容は、テストファイルが6ページ、ブートストラップが1ページ、ブートストラップ2が1ページ。 
Six pages of test files, 1 page of bootstrap, 1 page of bootstrap2.

[Note: ブートストラップの1と2は、OCRツールのなかにも含まれている。
[Note: see bootstrap and bootstrap 2 as part of OCR tools,

ツールは以下から入手可能。http://www.pgpi.com/project/] 
http://www.pgpi.com/project/] 


5 
5 

ソフトのソースコード 
Software Source Code 

この章は、DESクラッカーのハードウェアを制御するためにわれわれが書いた、C言語によるソフトのプログラムリストがすべて掲載されている。


ソフトには簡単なユーザインターフェースがついていて、ハードをテストし、可能な鍵を探索して解決すべき問題を設定し、探索を実装できるようになっている。


これを公開することで、人とマシンの両方に、DESクラッカーをどう制御するかを示すわけだ。


このバージョンのソフトは、ごくごく基本的なものでしかない。


グラフィカル・ユーザ・インターフェースもないし、ばか力式の探索を高速化するために、インターネット上でほかのマシンと協力する、などということもできない。


本書をお読みになるころには、おそらくもっとすぐれたバージョンのソフトができているはずだ。


これについてはわれわれのウェブページ、http://www.eff.org/pub/Privacy/Crypto_misc/DES_Cracking/に説明があるはずだ。


このソフトは、Windows95の「DOS窓」で、Borland C++ V3.1を使ってビルドしてうごくことが確認されている。


また、Microsoft Visual C++バージョン5でもきれいにコンパイルできる。


ソフトについての説明は、付属のreadme.txtファイルを参照。


この文書がなぜこういう印刷のされかたになっていて、それをどうやってコンピュータにスキャンすればいいのかについては、第4章「ソースコードのスキャン」を参照。


（ソースコードの実物はftp://ftp.nic.surfnet.nl/surfnet/net-security/encryption/cracking_DES/で入手可能。)



6 
6 

チップのソースコード
Chip Source Code 

この章には、われわれの書いたチップデザイン言語（VHLD）文書の完全なリストが掲載されている。


われわれのDESクラッカー上のカスタム・ゲートアレイチップをどう設計したか、人々とマシンに知ってもらうためである。


今日では、テキストファイルでふつうの文書を書くだけで、完全なチップが設計できる。


これは、特別なハードウェアプログラミング言語VHDLで書かれている。


この言語はチップシミュレーションソフトが理解できるようになっていて、このシミュレーションソフトは、ふつうのプログラミング言語のインタープリタのように機能する。


設計者がその設計で満足したら、このVHDLプログラムのテキストは「チップコンパイラ」に読み込まれる。


このコンパイラは、バイナリのプログラムをつくるのではなく、チップのローレベル設計情報を出力する。


チップのコンパイルプロセスは、ふつうのバイナリソフトのコンパイルよりも、ずっと細かいところに気をつかう必要がある。


たとえば、現代のコンピュータでは、バイナリプログラムがメモリ上のどこに置かれても、あまり関係はない。


どこにあってもプログラムはだいたいおなじ動きを示す。


チップを作る際には、チップの構成ブロックを「レイアウト」して「ルーティング」するのに、人間が手をくわえたり、工夫をしたりしなくてはならない。


そうしないと結果が高性能、低消費電力、ローコストなどの望ましい性質を持たなくなってしまう。


どのくらい細かく手を入れるかは、チップを作る（ファブリケートする）ときに使うテクノロジーや機材にも大きく左右されてくる。


ただし、設計文書はこういうのとはまったく独立になっている。


したがって、ここにあげた設計だけでは、話の全貌とはなっていない。


これさえあれば、ボタン一押しでチップが出てきます、というようにはなっていない。


でも、われわれの設計を理解するためには役にたつ。


有効な入力の組み合わせでチップがなにをするか、ということを、人間に読める形で厳密に定義しているのがこのドキュメントだからだ。


この文書がなぜこういう印刷のされかたになっていて、それをどうやってコンピュータにスキャンすればいいのかについては、第4章「ソースコードのスキャン」を参照。


（ソースコードの実物はftp://ftp.nic.surfnet.nl/surfnet/net-security/encryption/cracking_DES/で入手可能。)



7 
7 

チップシミュレータのソースコード
Chip Simulator Source Code 

この章には、カスタムDESクラッカーチップの動きをシミュレートするC言語のソフトが掲載されている。


このソフトは、人にチップの働きを見せるのに便利だし、チップがきちんと製造されたかをマシンに確認してもらうためのテストベクトルの生成にも使える。


このシミュレータは、チップの設計に先立って書いた。


いろいろな設計上のアイデアを試してみるためである。


このシミュレータは、実際のチップとまったくおなじ結果を出力するはずだ。


速度よりは記述の明快さと、新しいアイデアを試すときの柔軟性を重視した書き方になっている。


チップの働きが理解できなければ、このソフトをふつうのPCかUnixマシンでビルドしてみて、いろいろ実験してみるといい。


Borland C++ 3.1 など、ふつうのCコンパイラでコンパイルできるはずだ。


物理的なチップをつくるプロセスは、エラーがたくさん発生する可能性がある。


それぞれのチップは、ほこりや、あるいはシリコン材料の欠陥のために問題が発生するかもしれない。


だからあるチップが機能するかどうかは、実際に試してみる以外には確かめる方法がない。


したがって、チップ製造業者は、チップを設計したらいっしょにテストベクトルも提供するように要求してくる。


テストベクトルは、チップの各入力ピンに加える電圧と、チップ試験器が時間に応じてそれをどう変化させるべきかを一覧にしたものだ。


ベクトルには、チップ試験器がその入力電圧ごとに、出力ピンからどんな出力を得るはずか、というのも一覧にしてある。


もしチップ試験器が、すべての入力信号を順にチップにくわえて、その出力が対応するはずの出力信号と完全に一致していたら、このチップはテストに「合格」したことになる。


もし出力信号のどれかが仕様とちがっていたら、チップは試験に「不合格」となって廃棄される。


こうしたテストにパスしただけでは、そのチップがきちんと製造されたという証明にはならない。


チップが、設計者の提供した少数の試験データをきちんと処理できる、ということを示すだけだ。


チップのあらゆる部分をテストするようなテストベクトルを創り出すというのは、ほとんど芸術といっていい技能だ。


チップのテストのコストは、テストのサイズに比例するので、テストはふつうはみじかくてとてもストレートなものになっている。


したがって、チップの働きを理解しているかどうか確認するために、このテストベクトルを小さな例として使うことができる。


この文書がなぜこういう印刷のされかたになっていて、それをどうやってコンピュータにスキャンすればいいのかについては、第4章「ソースコードのスキャン」を参照。


（ソースコードの実物はftp://ftp.nic.surfnet.nl/surfnet/net-security/encryption/cracking_DES/で入手可能。)



8 
8 

ハードウェア基板の回路 
Hardware Board Schematics 

本章の内容: 


基板の回路 


Sun-4/470 バックプレーンの改造 


PC インターフェース 


正誤表 


この章では、DESクラッカー用にわれわれが設計してつくったプリント基板のダイヤグラムを掲載する。


また、その他ハードウェアに関する細かい記述もある。


各ハードウェア基板は、DESクラッカーチップ64個をそなえている。


この回路では、チップのうち8つがどう接続されているかを示してある。


残りの部分もほとんど同じような回路となる。


各「All Active Out」ピンは、つぎの「All Active In」ピンにデイジーチェーンされる。


各チップの「Chip ID」ピンは、GNDか電源に直接つながっていて、チップごとに、基板上のバイナリチップ番号を示すようになっている。


掲載されている8つのピンについて、この番号がどうなっているかを調べれば、どういうふうにそれが変化しているかがわかる。


基板は、ラックにさしてあって、このラックを通じ各基板とホストコンピュータは50線のリボンケーブルで結ばれる。


ラックはSun-4/470サーバ用のラックを改造したものとなっている。


バックプレーンにどのような改造をしたかは、この章の後半に記述してある。


基板の回路 


回路はつぎのページから始まる。


[註：読みやすくするために、スキャンでは回路図は150%拡大してある。]



8-1 


8-2 


8-3 


8-4 


8-5 
 

8-6 


8-7 


8-8 


8-9 


8-10 


Sun-4/470 バックプレーンの改造 


さいしょのDESクラッカーは、Sun-4/470サーバからリサイクルしたシャーシをいくつか使っている。


各シャーシはカード用ラックと電源、ファン、カバーでできている。


ラック部分にはバックプレーンがある。


これは、ラックに挿入する基板をさしこむコネクタがついた、プリント基板である。


各列には、1番から12番まで番号のついたコネクタが並んでいる。


ラックは"9U" VMEバス基板用のサイズとなっており、それぞれに大きな96ピンコネクタが3つついている。


したがって、バックプレーンにも96ピンコネクタがそれぞれのボートごとに3つずつついていて、P1, P2, P3 と名前がついている。


この96ピンコネクタはそれぞれ、32ピンが3列並ぶ形になっていて、それぞれの列はA, B, Cと呼ばれている。


このバックプレーンを以下のように改造した： 


てっぺんの列 (P1): 変更なし。


基板からコネクタへの信号をそのまま使う。


まん中の列 (P2): 変更なし。


この列は、ただのカードの保持用に使っている。


基板からこのコネクタへは信号がきていない。


いちばん下の列 (P3): DESクラッカー基板用の電源と信号。


割り当ては以下の通り：


Table 8-1: いちばん下のコネクタへの信号割り当て


A列もとの割り当て信号新しい割り当て


Pin 1 to 25+5 VoltsDES クラッカーチップ用の電源供給


Pin 26 to 27+12 Volts未使用


Pins 28 to 29-12 Volts未使用


Pins 30 to 32-5 Volts未使用


B列もとの割り当て信号新しい割り当て


Pin 1予約未使用


Pin 2予約未使用


Pin 3予約Reset (C_RST)


Pin 4予約Read Strobe (C_RDB)


Pin 5予約Write Strobe (C_WRB)


Pin 6予約Address Latch Enable (C_AEN)


Pin 7予約Control_1 (C_CNT1) or C_ADRSELB


Pin 8予約Control_2 (C_CNT2) or C_CSB


Pin 9予約Data 7 (C_D7)


Pin 10予約Data 6 (C_D6)


Pin 11予約Data 5 (C_D5)


Pin 12予約Data 4 (C_D4)


Pin 13予約Data 3 (C_D3)


Pin 14予約Data 2 (C_D2)


Pin 15予約Data 1 (C_D1)



8-1 


Table 8-1: いちばん下のコネクタへの信号割り当て (continued)


Pin 16予約Data 0 (C_D0)


Pin 17予約Address 7 (C_A7)


Pin 18予約Address 6 (C_A6)


Pin 19予約Address 5 (C_A5)


Pin 20予約Address 4 (C_A4)


Pin 21予約Address 3 (C_A3)


Pin 22予約Address 2 (C_A2)


Pin 23予約Address 1 (C_A1)


Pin 24予約Address 0 (C_A0)


Pin 25予約GND


Pin 26予約GND


Pin 27予約GND


Pin 28予約GND


Pin 29予約GND


Pin 30予約GND


Pin 31予約全インターフェースIC用の+5 V 供給


Pin 32予約全インターフェースIC用の+5 V 供給


C列もとの割り当て信号新しい割り当て


Pins 1 to 25GNDGND


Pins 26 to 27+12 Volts未使用


Pins 28 to 29-12 Volts未使用


Pins 30 to 32-5 Volts未使用


A列の pins 1-25 は、DESクラッカーチップの電源を供給している。


これは通常は+5 ボルトだ。


チップをもっとひくい電圧で駆動して、電力消費と発熱をおさえることもできる。


この時には、ボルトのちがう二種類の電源が必要になる。


DESクラッカーチップ用のひくい電圧は、A列のpins 1-25に供給する。


インターフェース回路用の +5 ボルトはB列の pins 31 と 32 に供給する。


低電圧でうごかすときには、DES基板のジャンパ JP1 を取り除くこと。


DESチップが +5 ボルトを使っている場合、B列の31-32ピンには外部電源はつながず、DES基板のジャンパJP1もつないだままにしておく。


P3 バス (いちばん下の列)の物理的な改造 


バックプレーンのP3 バス (いちばん下の列)にはスロットが12個ある。


スロットの一部は隣のスロットと接続されて、バスになっている。


もとのSunの仕様では、P3バスはおもにCPU基板とメモリ基板との間の高速メモリバスとして使われていた。


そして、4つの独立したグループに分割されている。


グループ 1 


このグループにはスロットが7つある（番号1から7）。


B列がいっしょに接続されてバスになっている。 



8-12 


グループ 2 


これはスロット8のみ。


このB列は、ほかのスロットとは接続されていない。 


グループ 3 


これはスロット9のみ。


このB列は、ほかのスロットとは接続されていない。 


グループ 4 


このグループにはスロットが3つある（番号10から12）。


B列がいっしょに接続されてバスになっている。 


バックプレーンを改造して、これらの4グループがすべて相互につながるようにした。


これでP3のB列はすべてのスロットがバックプレーンで結ばれることになった。


スロット 1 とスロット 12 には、二列ヘッダをP3コネクタのB列とC列につけた（信号とGND用）。


そしてそこから50ピンのリボンケーブルをバスにつなげるようにした。


このヘッダを使って、各シャーシがつぎのシャーシに接続できて、またさいしょのシャーシを汎用コンピュータにつなぐこともできる。


この汎用コンピュータで、DESクラッカーを制御するソフトが走るわけだ。


スロット 11 


にもA列とB列に二列式ヘッダをつけて、スロット12にリボンケーブルがついていないときに、ターミネーション用の抵抗をつけられるようにした。


これでバス上の信号の信頼性が保護される。


PC インターフェース 


さいしょのシャーシは、リボンケーブルで制御用のコンピュータと接続されている。


リボンケーブルは、スロット1の二列ヘッダにつながる。


このケーブルは、PC側ではプラグイン式のハードウェアカードにつながり、このカードがパラレルI/Oポートを3つ提供している。


ソフトはこのカードとやりとりをして、リボンケーブルにコマンドを書かせたり、あるいはリボンケーブルから結果を読み込んだりさせる。


ソフトはふつうのIBM互換PCで動き、ほかの汎用コンピュータにも移植できる。


われわれのプロジェクトでは、以下のインターフェースカードのどちらかを使っている。


いずれもテキサス州オースチンのNational Instruments Corporation の製品で、連絡先は http://www.natinst.com または +1 512 794 0100 である。


かれらの PC-AT バスインターフェースカードはPC-DIO-24 で、注文番号は777368-01である。


ラップトップ用にはPC カード (PCMCIA) インターフェースもある。


DAQCard-DIO-24 で、注文番号は 776912-01である。


このカードはPSH27-SOF-D1ケーブルが必要で、この注文番号は 776989-01。


24ビットI/Oのある他のパラレルインターフェースカードでも使うようにできる。



8-13 


正誤表 


このページには、ここに公開したハードウェアやソフトについて、その後見つかったまちがいについて記述してある。


読み込みのためのチップ選択 


DES 


クラッカーチップは、データバッファをきちんとトライステートにしない。


どこかの基板のチップが読み込みをしていると、その他のDESクラッカーチップはデータピンにゴミを出力してしまう。


バッファのエネーブルは、Board EnableとChip Enable信号を確認していなかった。


これを回避するために初期のハード基板は改良されて、チップごとに個別RDB信号を供給し、それをFPGAで外部からエネーブルするようにした。


これをきちんと修正するためには、チップVHLDのtop.vhdの最後近くを修正することだ。


以下の部分： 


DATA <= DATAO when (RDB = '0' and ADDSEL2 = '0') else (others => 'Z' 


を、以下のように修正すること： 


DATA <= DATAO when (RDB = '0' and ADDSEL2 = '0' and CHIP_EN = '1') else (others => 'Z');


同時に、CHIP_EN を upi.vhdの出力として追加する。


pp. 9-1 to 9-5 


9 
9 

百万DES鍵を破る：Yvo Desmedt著 
Breaking One Million DES Keys by Yvo Desmedt 


この部分は、禁無断複製なので、別ファイルにしておく。 


Note: Yvo Desmedt granted permission on August 1, 1998 to publish this chapter. 
Mr. Desmedt stated that he is responsible only for this chapter and not the book. 
His current addresses are the University of Wisconsin - Milwaukee, and the University of London. <desmedt@cs.uwm.edu>. 
And, "Note that it is said in the book that this paper was presented at Eurocrypt '87, which is incorrect. 
A more general paper, with a different title was presented at Eurocrypt '86. 
The chapter may have been presented at a rump session, but I do not remember it." 


9 
Breaking One Million DES Keys by Yvo Desmedt 
In this chapter. 
Abstract 
Introduction 
The basic idea 
Details of such a machine 
Obtained results and remarks 
Conclusion 
Acknowledgement 

This paper was presented at Eurocrypt 1987 by Yvo Desmedt and Jean-Jacques Quisquater, under the title "An Exhaustive Key Search Machine Breaking One Million DES Keys". 
We publish it here for the first time, since no proceedings were made. 
It points out some research directions in parallel brute force codebreaking that are still useful today. 

Abstract 
The DES is in the commercial and industrial world the most used cryptoalgorithm. 
A realistic exhaustive key search machine will be proposed which breaks thousands of keys each hour, when DES is used in its standard 8 byte modes to protect privacy. 
Also authenticity protection with DES is sometimes insecure. 

Introduction 
The DES is the NBS* and ANSI+ standard for encryption. 
It has been proposed to become an ISO# standard, under the name DEA1. 
From the beginning Diffie and Hellman mentioned that one DES key could be broken under a known plaintext attack using an exhaustive keysearch machine.§ 
However the design was criticized because practical problems as size and power dissipation were not taken into consideration.
 ___________________ 
  * "Data Encryption Standard", FIPS (National Bureau of Standards Federal Information Processing Standards Publ.), no. 46, Washington D.C., January 1977. 
  + "Data Encryption Algorithm", ANSI X3.92-1981, (American National Standards Institute), New York, December 31, 1980. 
  # "Data Encipherment, Specification of Algorithm DEA1", ISO/DP 8227 (Draft Proposal), 1983. 
  § Diffie, W., and Hellman, M.E.: "Exhaustive cryptanalysis of the NBS Data Encryption Standard", Computer, vol. 10, no. 6, pp. 74 -84, June 1977. 

9-1 



9-2 
Hoornaert* proposed last year a realistic exhaustive keysearch machine, which solved all practical problems. 
Instead of breaking DES in half a day (as in the Diffie-Hellman machine), the cheap version ($1 million) needs maximum 4 weeks to find the key. 
In practice however companies or secret agencies want to break several keys at once. 
Indeed for doing industrial espionage, companies want to break as many communications as possible of their main competitors. 
Secret agencies want to be able to eavesdrop all communications and to follow up industrial developments in other countries which may be used for military purposes. 
The above machine is unpractical or expensive for this purpose. 
Instead of using thousands of machines for breaking thousands of keys, one modified machine is enough. 

The basic idea 
At first sight if one wants to break one million keys with an exhaustive machine one needs one million pairs (plaintext,ciphertext)=(Mi,Ci) and do the job for each different pair. 
If all these pairs have the same plaintext M, the exhaustive machine can do the same job by breaking all these one million ciphertexts, as in the case it had only to break one. 
This assumption is very realistic, indeed in letters some pattern as e.g."Yours Sincerely" are common. 
For all standard+ 8 bytes modes a partially known plaintext attack is sufficient. 
In the case of ECB a ciphertext only attack is sufficient. 
Indeed the most frequent combination of 8 bytes can easily be detected and used. 
Evidently more machines can handle more different plaintext patterns. 
So, a few machines can break millions of keys. 
The number of different patterns can be reduced by using a chosen plaintext attack! 

Details of such a machine 
Although we did not built it, in this section sufficient details are given to show that such a machine is feasible. 
The machine will be based on a small extension of the DES chips used in Hoornaert's machine. 
We will call the ciphertexts for which one wants to break the key: "desired" ciphertexts. 
In one machine, each of the (e.g.) 25 thousand DES chips will calculate ciphertexts for variable keys starting from the same 8 byte "plaintext" pattern. 
The machine has to verify if such a ciphertext is the same as some "desired" ciphertext. 
If so, it has to communicate the corresponding key to the Key Handling Machine (KHM) and the "number" of the "desired" ciphertext. 
However each used DES chip generates each second about one million pairs (ciphertext, key).

  ___________________ 
  * Hoornaert, F., Goubert, J., and Desmedt, Y.: "Efficient hardware implementations of the DES", Advances in Cryptology, Proceedings of Crypto 84, Santa Barbara, August 1984 (Lecture Notes in Computer Science, Springer-Verlag, Berlin, 1985), pp. 147-173. 
  + DES modes of operation", FIPS (NBS Federal Information Processing Standards Publ.), no. 81, Washington D.C., December 2, 1980. 



9-3 
This gives a major communication problem. 
Indeed all this information (about 110Mbit/sec.= (56 key bits + 64 ciphertext bits) x 1M DES/sec.) cannot be communicated constantly outside the chip. 
To avoid this communication problem, the chip will internally exclude ciphertexts which certainly are not equal to a "desired" ciphertext. 
So only a fraction has to be communicated to the outside world. 
Hereto the "desired" ciphertexts were previously ordered based on their first 20 bits, which are used as address of the desired ciphertexts. 
If more than one of these "desired" ciphertexts have the same 20 first bits then one of them will later be transferred to the exhaustive machine. 
The others will be put on a waiting list. 
In the exhaustive machine bits of the desired ciphertexts are spread in RAMs, as explained later, using the 20 first bits as address. 
Each extended DES chip is put on a hybrid circuit together with 4 RAMs of 1Mbit and a refresh controller (see also fig. 1[not provided]). 
For each enumerated key the DES chip communicates the 20 first bits of the corresponding generated ciphertext to the RAMs as address. 
The 4 bits information stored in the RAMs correspond to the next 4 bits of the desired ciphertexts. 
The RAMs communicate to the modified DES chip these 4 bits. 
Only if these 4 bits are equal to the corresponding ones in the generated ciphertext, the generated pair (ciphertext, key) is communicated outside the DES chip to a local bus (see fig. 1). 
So in average the communication rate is reduced, by excluding the ciphertexts which are certainly not desired. 
About 10 of these hybrids are put on a small PCB. 
A custom designed chip checks the next 10 bits (the bits 25 till 34) of the ciphertexts using the same idea as for the 4 bits (the bits 21 till 24). 
Hereto 10 RAMs each of 1Mbit are used, the address is again the first 20 bits of the generated ciphertext. 
Only if the check succeeds the pair (ciphertext, key) is communicated to the outside world via a global bus. 
This reduces the communication between the local bus and the global bus with a factor 1000. 
About 2500 similar PCBs are put in the machine. 
The last 30 bits of the ciphertext are checked further on. 
Hereto similar hardware controls several PCBs. 
Finally a small machine can do the final check. 
The machine KHM checks the correctness of the key on other (plaintext, ciphertext) pairs or on the redundancy in the language. 
Once each (e.g.) hour the machine KHM will update the broken keys and put the ones which are on the waiting list into the exhaustive machine (if possible). 
Suppose that one hybrid cost $80, then the price of $3 million (25,000 x hybrid + custom chips + PCBs + etc) for this machine is realistic. 



9-4 
Obtained results and remarks 
The described machine breaks about one million keys in 4 weeks, or in average about 3000 keys each hour. 
By updating the broken keys better results can be obtained.*
Practical problems as buffering, synchronization, MTBF, power dissipation, size, reloading of the RAMs and so on are solved by the author. 
Optimizations under several circumstances and variants of the machine are possible. 
In view of the existing rumors that a trapdoor was built in DES by NSA, the feasibility of this machine shows that a trapdoor was not needed in order to break it. 
Old RAM technology allowed to design similar (or larger) machines which break less keys (e.g. thirty-two thousand keys). 
This attack can be avoided if the users of DES use the CFB one byte mode appropriately, or use new modes+ or triple encryption with two different keys. 
DES-like algorithms can be designed which are more secure against the described attack and which use a key of only 48 bit, and which have the same encryption/decryption speed as DES (if used with fixed key).# 
The protection of the authenticity of (e.g. short) messages with DES is sometimes insecure.§ 
These results combined with the above one, shows that the authentication of standardized messages with DES may be worthless. 
Remark finally that the DES chip used in this machine does not use the state of the art of VLSI. 
Indeed about only 10,000 transistors are used in it. 
Megabits RAMs are easily available. 

Conclusion 
Every important company or secret agency over the world can easily build such a machine. 
Because it is not excluded that such machines are already in use by these organizations, the author advises the users to be careful using DES. 
Because the most used modes are breakable, the users have to modify their hard- or software in a mode which avoids this attack. 
Meanwhile only low-sensitive information can be transmitted with DES. 
If the authenticity of the messages is protected with DES under its standardized use, short messages have to be enlarged. 
  ___________________ 
* Desmedt, Y., "Optimizations and variants of exhaustive key search machines breaking millions of DES keys and their consequences on the security of privacy and authenticity with DES", Internal Report, ESAT Laboratory, Katholieke Universiteit Leuven, in preparation. 
+ Quisquater, J.-J., Philips Research Laboratory, Brussels, paper in preparation. 
# Quisquater, J.-J., Desmedt, Y., and Davio, M.: "A secure DES* scheme with <48 bit keys", presented at the rump session at Crypto '85, Santa Barbara, August, 1985 
§ Desmedt, Y.: "Unconditionally secure authentication schemes and practical and theoretical consequences", presented at Crypto '85, Santa Barbara, August, 1985, to appear in the proceedings: Advances in Cryptology (Springer-Verlag, Berlin, 1986). 



9-5 
Acknowledgement 
The author is sponsored by the Belgian NFWO. 
The author is very grateful to F. 
Hoornaert, IMEC-ESAT, Leuven, and J.-J. Quisquater, Philips Research Laboratory, Brussels, for many suggestions and improvements. 
Y.Desmedt 
ESAT Laboratory 
Katholieke Universiteit Leuven 
Kard. Mercierlaan 94 
B-3030 Heverlee, Belgium 


http://www.genpaku.org/crackdes/des9.html 


pp. 10-1 to 10-26 
pp. 10-1 to 10-26 

10 
10 

暗号解析ハードウェアのアーキテクチャ考察 
Architectural Considerations for Cryptanalytic Hardware 

Ian Goldberg and David Wagner 
Ian Goldberg and David Wagner 

[iang,daw]@cs.berkeley.edu 
[iang,daw]@cs.berkeley.edu 

http://www.cs.berkeley.edu/~iang/isaac/hardware/main.html (HTML) 
http://www.cs.berkeley.edu/~iang/isaac/hardware/main.html (HTML) 

http://www.cs.berkeley.edu/~iang/isaac/hardware/paper.ps (Postscript)
http://www.cs.berkeley.edu/~iang/isaac/hardware/paper.ps (Postscript)


11 
11 

効率のよいDES鍵の探索：アップデート：Michael J. Wiener著 
Efficient DES Key Search An Update by Michael J. Wiener 

本章の内容: 
In this chapter: 

技術の進歩 
Advancing Technology 

プログラマブル・ハードウェア 
Programmable Hardware 

結論 
Conclusion 

1997年6月にRocke Verserの率いるグループがRSA Data Security社の DES challengeを、多数のコンピュータによるしらみつぶし式鍵探索方式で解決した。
これはDESの歴史的な瞬間である。
An exciting moment in the history of DES was reached in June 1997 when a group coordinated by Rocke Verser solved RSA Data Security's DES challenge by exhaustive key search on a large number of computers.

この結果が有用なのは、それがDESがどれほど弱くなったかを、公開された形で実証することができたからだ。
This result was useful because it served to underscore in a public way how vulnerable DES has become. 

でも一方で、これはDESを攻撃するのに大規模な分散型の攻撃以上の手はないというまちがった印象を与えるおそれがある。
However, it may also have left the false impression that one cannot do much better than attacking DES in software with a large distributed effort.

DESの設計は、ソフトで攻撃するにはかなり時間がかかるが、ハードで実装すればコンパクトで高速になるようになっている。
The design of DES is such that it is fairly slow in software, but is compact and fast when implemented in hardware.


As a result, using software to attack DES gives poor performance compared to what can be achieved in hardware.


これはDESだけでなく、ブロック式暗号（block cypher）やハッシュ関数攻撃、楕円曲線暗号システムへの攻撃のほとんどすべてにあてはまる。
This applies not only to DES, but also to most other block ciphers, attacks on hash functions, and attacks on elliptic curve cryptosystems.

ハードウェアを使った効率的な攻撃に対抗するには、じゅうぶんに鍵のながいアルゴリズムを使う必要がある。
Avoiding efficient hardware-based attacks requires the use of algorithms with sufficiently long keys,

たとえば、トリプルDES 128-bit RC5,* CAST-128+などだ。
such as triple-DES, 128-bit RC5,* and CAST-128.+ 

この論文では、ハードウェア手法を使ったDES鍵探索のコストを推定し、またDESへの攻撃をかわすための手段として提案されているいくつかの手法について、その有効性を検討する。
In this article we assess the cost of DES key search using hardware methods and examine the effectiveness of some proposed methods for thwarting attacks on [?] 
_______________________ 
Michael J. Wiener, Entrust Technologies, 750 Heron Road, Suite E08, Ottawa, Ontario, Canada K1V 1A7 
Michael J. Wiener, Entrust Technologies, 750 Heron Road, Suite E08, Ottawa, Ontario, Canada K1V 1A7 

この論文はRSA Laboratoriesの1997年秋Cryptobytes newsletterに掲載された。
This article first appeared in RSA Laboratories' Autumn 1997 Cryptobytes newsletter;

著者とRSA Data Security, Inc.の許可を得て掲載している。 
it is reprinted with permission from the author and RSA Data Security, Inc. 

* R. Rivest, "The RC5 Encryption Algorithm", Fast Software Encryption--Lecture Notes in Computer Science (1008), pp. 86-96. Springer, 1995. 
* R. Rivest, "The RC5 Encryption Algorithm", Fast Software Encryption--Lecture Notes in Computer Science (1008), pp. 86-96. Springer, 1995. 

+ C. Adams, "Constructing Symmetric Ciphers Using the CAST Design Procedure", Designs, Codes and Cryptography, vol. 12, no. 3, pp. 283-316, Nov. 1997. 
+ C. Adams, "Constructing Symmetric Ciphers Using the CAST Design Procedure", Designs, Codes and Cryptography, vol. 12, no. 3, pp. 283-316, Nov. 1997.

また、"The CAST-128 Encryption Algorithm", RFC 2144, May 1997.としても入手可能。 
Also available as "The CAST-128 Encryption Algorithm", RFC 2144, May 1997. 

11-1 
11-1 

11-2 
11-2 

技術の進歩 
Advancing Technology 

DESを攻撃する方法として知られているもののうち、いちばんいいのは56ビットの鍵をすべて試していって、正しいのが見つかるまでつづける、という方法だ。
The best known way to attack DES is to simply try all of the possible 56-bit keys until the correct key is found.

平均では、鍵空間の半分くらいを試せば正しい鍵が見つかることになる。
On average, one expects to go through about half of the key space.

1993年に、しらみつぶし方式のDES鍵探索マシンの設計が、詳細なチップ設計を含めて公開された。* 
In 1993, a design for an exhaustive DES key search machine including a detailed chip design was published.*

このマシンの100万ドル版は、鍵探索チップを57600個使っていて、そのチップそれぞれが、毎秒5000万鍵をテストできる。
A $1 million version of this machine used 57600 key search chips, each capable of testing 50 million keys per second.

全体としてこのマシンは、DES鍵を平均で3.5時間で見つけることができる。
Overall, the machine could find a DES key in, on average, three and a half hours. 

この設計が完了して4年半がたった。
About four and a half years have passed since this design was completed,

そしてムーアの法則によれば、この間に処理速度は倍の倍の倍になったはずだ。
and according to Moore's Law, processing speeds should have doubled three times in that period.

もちろん、このような形で推測を行うのは、かつての設計で採用した慎重な分析と設計努力に比べれば、あまりよいやりかたとはいえない。
Of course, estimating in this fashion is a poor substitute for the careful analysis and design effort that went into the earlier design.

もとのチップ設計は0.8 ミクロン CMOS プロセスで行われており、現在使える密度からいえば、同じシリコン面積にかつての設計を4個分つめこむことが可能になる。
The original chip design was done in a 0.8 micron CMOS process, and with the geometries available today, it is possible to fit four instances of the original design into the same silicon area.

1993年の推測での控えめな推定という方針を踏襲して、探索チップの速度は、もとの50MHzから75MHzまでしかあがらないと想定している。
In keeping with the conservative approach to estimates in the 1993 paper, we assume here that the updated key search chip's clock speed would increase to only 75 MHz from the original 50 MHz,

このため、現在版のチップは、同じコストで6倍の速度となる。
making the modern version of the chip six times faster for the same cost. 

おもしろいことに、このチップを21個使えば、DES challengeを解決したチームの使ったコンピュータすべてに匹敵するだけの探索パワーが得られることになる。
It is interesting to note that just 21 of these chips would give the same key searching power as the entire set of computers used by the team who solved the DES challenge. 

現代版の100万ドルマシンは、DES鍵を平均で35分ほどで見つけることができる（3.5時間の1/6)。
Today's version of the $1 million machine could find a DES key in, on average, about 35 minutes (one-sixth of 3.5 hours).

この時間は、以下の表に示すように、かけた金額と線形に比例する。
This time scales linearly with the amount of money spent as shown in the following table. 

鍵探索マシンコスト期待探索時間
Key Search Machine Cost Expected Search Time 

$10,000    2.5 日
$10,000    2.5 days

$100,000    6 時間
$100,000    6 hours

$1,000,000    35 分
$1,000,000    35 minutes

$10,000,000    3.5 分
$10,000,000    3.5 minutes

なお、表中のコストは、チップや基板の設計コストは含んでいない。
Note that the costs listed in the table do not include the cost to design the chip and boards for the machine.

こうした最初の一回だけのコストは、50万ドルはすると思われるため、多数のマシンを複数の顧客用につくるのでない限り、100万ドル以下のマシンをつくろうとするのは、無駄が多いことになる
Because the one-time costs could be as high as half a million dollars, it does not make much sense to build the cheaper versions of the machine, unless several are built for different customers. 


（訳注：要するに、チップ数の少ない10万ドルのマシンを1台つくろうとしても、チップの設計に50万ドルかかるならあまりコスト削減にはならないということ。）


この鍵探索エンジンは、DESの標準電子コードブック(ECB）モードを使った平文・暗号文対が与えられているときに、DES鍵を回復するように設計されている。
This key search engine is designed to recover a DES key given a plaintext-ciphertext pair for the standard electronic-codebook (ECB) mode of DES.

しかし、このっマシンは変更を加えなくても、以下のモードも扱える：暗号ブロック連鎖（cipher-block chaining, CBC)、64ビット暗号フィードバック（cipher feedback, CFB)、64ビット出力フィードバック（output feedback, OFB)。 
However, the machine can also handle the following modes without modification: cipher-block chaining (CBC), 64-bit cipher feedback (CFB), and 64- bit output feedback (OFB).

_____________________ 
* Wiener, "Efficient DES Key Search", Crypto '93のRump sessionにて発表。
* Wiener, "Efficient DES Key Search", presented at the Rump session of Crypto '93.

Practical Cryptography for Data Internetworks, W. Stallings, editor, IEEE Computer Society Press, pp. 31-79 (1996) に再録。
Reprinted in Practical Cryptography for Data Internetworks, W. Stallings, editor, IEEE Computer Society Press, pp. 31-79 (1996).

現在は以下で入手可能： ftp://ripem.msu.edu/pub/crypt/docs/des-keysearch.ps。 
Currently available at ftp://ripem.msu.edu/pub/crypt/docs/des-keysearch.ps. 


11-3 
11-3 

OFB の場合、連続した平文が2つ必要になる。
In the case of OFB, two consecutive plaintexts are needed.

チップ設計を変更すれば、よく使われるDESのモードをほかに2つ（1 ビットと 8 ビット CFB）扱えるようになるが、コストは多少高くなる。
The chip design can be modified to handle two other popular modes of DES, 1-bit and 8-bit CFB, at the cost of a slightly more expensive chip.

100万ドルで買えるチップが少なくなるので、すべてのモードでの探索時間は平均40分にまであがる。
Fewer chips could be purchased for a $1 million machine causing the expected key search time to go up to 40 minutes for all modes,

ただし 1 ビット CFB の場合は、これが平均で80分になる。
except 1-bit CFB, which would take 80 minutes, on average. 

プログラマブル・ハードウェア 
Programmable Hardware 

チップ設計に必要なコストは、小者の攻撃者やホビイストにとっては、大きな障壁となる。
The costs associated with chip design can present a significant barrier to smalltime attackers and hobbyists.

初期投資がずっと少なくてすむ代替案としては、プログラマブル・ハードウェアを使うことだ。
An alternative which has much lower start-up costs is the use of programmable hardware.

こうしたテクノロジーの一種としては、現場プログラミング可能ゲートアレイ（Field Programmable Gate Array, FPGA) がある。
One such type of technology is the Field Programmable Gate Array (FPGA).

PC上で回路を設計して、それをFPGAの載った基板にダウンロードして実行させればいい。
One can design a circuit on a PC and download it to a board holding FPGAs for execution.

1996年初期の報告では、FPGA 5万ドル分あれば、DES鍵を平均で4ヶ月で回復できると推定されている。
In a report in early 1996,* it was estimated that $50000 worth of FPGAs could recover a DES key in, on average, four months.

これはチップ設計を行った場合に比べればずいぶん遅いけれど、資金の乏しい者にはずっと手が出しやすい。
This is considerably slower than what can be achieved with a chip design, but is much more accessible to those who are not well funded. 

別の有望なプログラマブル・ハードウェアは、複合プログラマブル・論理デバイス（Complex Programmable Logic Device, CPLD) である。
Another promising form of programmable hardware is the Complex Programmable Logic Device (CPLD).

CPLD はFPGAよりは設計の自由度が低いが、その分、値段も低い。
CPLDs offer less design freedom and tend to be cheaper than FPGAs,

鍵探索は、その性格上、CPLDにむいていると思われる。
but the nature of key search designs seems to make them suitable for CPLDs.

CPLDがDES鍵探索に使えるかどうかを評価するには、さらなる研究が必要となる。
Further research is needed to assess whether CPLDs are useful for DES key search. 

既知の平文を避ける 
Avoiding Known Plaintext 

以上で説明してきた設計は、攻撃者がなんらかの平文を知っているものという想定に依存している。
The designs described to this point have relied on the attacker having some known plaintext.

ふつうは、8バイトのブロックが一つあれば十分だ。
Usually, a single 8-byte block is sufficient.

攻撃をさけるための手法として提案されているものとしては、既知の平文をすべて避ける、というものがある。
One method of preventing attacks that has been suggested is to avoid having any known plaintext.

これはなかなかむずかしいだろう。
This can be quite difficult to achieve.

データは、固定ヘッダではじまることが多いからだ。
Frequently, data begins with fixed headers.

たとえばMicrosoft Wordのすべてのバージョンでは、作成したファイルの先頭には固定バイト長の文字列がついてくる。
For example, each version of Microsoft Word seems to have a fixed string of bytes that each file begins with. 

また既知の平文が完全にはわかっていない場合でも、キー探索の設計をわかっている部分にあわせて変えることができる。
For those cases where a full block of known plaintext is not available, it is possible to adapt the key search design.

仮に、平文についてある程度の情報がわかっているとしよう
Suppose that information about plaintext is available

（たとえば、ASCII文字コーディングが使われている、とする）。
(e.g., ASCII character coding is used),

でも、テキストの全文はわかっていない。
but no full block is known.

そうしたら、わかっている平文を何度も暗号化して結果を暗号文と比較するかわりに、暗号文のほうを何度も復号してみて、でてきた平文の候補をこちらの期待と比較してみればいい。
Then instead of repeatedly encrypting a known plaintext and comparing the result to a ciphertext, we repeatedly decrypt the ciphertext and test the candidate plaintexts against our expectations.

たとえば期待されるのが7ビットのASCIIの平文なら、正しい形式を持った平文を与えてくれる鍵は256個に1つしかない。
In the example where we expect 7-bit ASCII plaintext, only about 1 in 256 keys will give a plaintext which has the correct form.

この鍵を別の暗号文ブロックに試してみる必要がある。
These keys would have to be tried on another ciphertext block.

これを扱うための論理回路は、鍵探索チップのコストを10-20%ほど増やすだけだ。
The added logic to handle this would add just 10 to 20% to the cost of a key search chip. 

_____________________ 
* M. Blaze, W. Diffie, R. Rivest, B. Schneier, T. Shimomura, E. Thompson, and M. Wiener, "Minimal Key Lengths for Symmetric Ciphers to Provide Adequate Commercial Security", 
* M. Blaze, W. Diffie, R. Rivest, B. Schneier, T. Shimomura, E. Thompson, and M. Wiener, "Minimal Key Lengths for Symmetric Ciphers to Provide Adequate Commercial Security", 

現在は以下で入手可能： http://www.bsa.org/policy/encryption/cryptographers.html 
currently available at http://www.bsa.org/policy/encryption/cryptographers.html. 


平文ブロックの中に、同じビットが1カ所繰り返し出てくるのがわかっただけでも、可能な鍵の数は半減する。
Even if we only know a single bit of redundancy in each block of plaintext, this is enough to cut the number of possible keys in half.

こうしたブロックが56個あれば、正しい鍵を一意的に同定することができる。
About 56 such blocks are needed to uniquely identify the correct key.

しかしこれでも、実行時間が平文のわかっているときに比べて56倍になるということではない。
This does not mean that the run-time is 56 times greater than the known-plaintext case.


On average, each key is eliminated with just two decryptions.


追加の論理回路のコストを考慮すれば、100万ドルのマシンでの実行時間は、この場合には2時間になる。
Taking into account the cost of the added logic required makes the expected run-time for a $1 million machine about 2 hours in this case. 

ひんぱんに鍵を変える 
Frequent Key Changes 

鍵探索攻撃をかわすためによく提案されるのが、DES鍵をしょっちゅう変えることだ。
A commonly suggested way to avoid key search attacks is to change the DES key frequently.

ここでの想定では、暗号化された情報は鍵が変更されたあとではもう役に立たない、ということだが、これはあまり適切な想定ではない場合が多い。
The assumption here is that the encrypted information is no longer useful after the key is changed, which is often an inappropriate assumption. 

もしDES鍵を見つけるのに35分かかるなら、鍵を5分ごとに変えたらどうなるだろう？
If it takes 35 minutes to find a DES key, why not change keys every 5 minutes? 

この理屈の問題点は、鍵を見つけるのにかかる時間は正確に35分というわけではない、ということだ。
The problem with this reasoning is that it does not take exactly 35 minutes to find a key.

実際にかかる時間は、0分から70分の間に均等に分布している。
The actual time is uniformly distributed between 0 and 70 minutes. 

運がよければ、鍵はすぐに見つかるし、運が悪ければ、70分近くかかってしまう。
We could get lucky and find the key almost right away, or we could be unlucky and take nearly 70 minutes.

攻撃者が、鍵の変わる5分以内に鍵を見つける確率は 5/70 = 1/14 だ。
The attacker's probability of success in the 5-minute window is 5/70 = 1/14.

もし鍵が変わるごとに攻撃者があきらめてつぎの鍵探しをはじめたら、鍵が14回変更されるうちに（つまりは70分以内に）成功するものと期待できる。
If after each key change the attacker gives up and starts on the next key, we expect success after 14 key changes or 70 minutes.

一般に、ひんぱんな鍵の変更は、攻撃者にとって期待実行時間を2倍ほどにするだけであり、単純にもっとながい鍵をもった強力な暗号を使うのに比べれば、代案としては大いに劣っている。
In general, frequent key changes cost the attacker just a factor of two in expected run-time, and are a poor substitute for simply using a strong encryption algorithm with longer keys. 

結論 
Conclusion 

現在の技術を使うと、コスト100万ドルのカスタムデザインのマシンを使えば、DES鍵は35分で回復できる。
Using current technology, a DES key can be recovered with a custom-designed $1 million machine in just 35 minutes.

チップを設計してこうしたマシンをつくるだけのリソースがない攻撃者の場合にも、FPGAやCPLDなどのプログラム可能なハードウェアを使えば、PCやワークステーション上のソフトでやるよりもDES鍵空間をずっと高速に探索できる。
For attackers who lack the resources to design a chip and build such a machine, there are programmable forms of hardware such as FPGAs and CPLDs which can search the DES key space much faster than is possible using software on PCs and workstations.

鍵探索攻撃をかわすために、既知の平文を避けたり、鍵をひんぱんに変えたりしても、ほとんど役にはたたない。
Attempts to thwart key search attacks by avoiding known plaintext and changing keys frequently are largely ineffective.

いちばんいいのは、トリプルDES、128ビットRC5、CAST-128 +など、もっとながい鍵をもった強力な暗号アルゴリズムを使うことである。
The best course of action is to use a strong encryption algorithm with longer keys, such as triple-DES, 128-bit RC5, or CAST-128. 

_____________________ 
+ 訳注："The CAST-256 Encryption Algorithm", RFC 2612, June 1999. 
(CAST-128は過去の暗号になりつつあるので、延命措置として256bit。だそうな。山根信二氏のご教示に感謝。) 


12 
12 

著者紹介 
Authors 

本章の内容: 
In this chapter: 

The Electronic Frontier Foundation 
The Electronic Frontier Foundation 

John Gilmore 
John Gilmore 

Cryptography Research 
Cryptography Research 

Paul Kocher 

Paul Kocher 

Advanced Wireless Technologies 
Advanced Wireless Technologies 

The Electronic Frontier Foundation 
Electronic Frontier Foundation
1550 Bryant Street, Suite 725
San Francisco CA 94103 USA
+1 415 436 9333 (voice)
+1 415 436 9993 (fax)
http://www.eff.org
info@eff.org
The Electronic Frontier Foundation 
Electronic Frontier Foundation
1550 Bryant Street, Suite 725
San Francisco CA 94103 USA
+1 415 436 9333 (voice)
+1 415 436 9993 (fax)
http://www.eff.org
info@eff.org

The Electronic Frontier Foundation (EFF) は、非営利の公益組織で、オンラインの権利を保護し、自由を推進している。
The Electronic Frontier Foundation (EFF) is a nonprofit public-interest organization protecting rights and promoting liberty online.

1990年にミッチェル・ケイパー、ジョン・ペリー・バーロウ、ジョン・ギルモアが創設した。
It was founded in 1990 by Mitchell Kapor, John Perry Barlow, and John Gilmore. 

EFFは、個人や組織、企業や政府にたいして、コンピュータと通信技術が世界を既存の法的社会的マトリックスから大きく変えてしまうときに生じる問題について、教育しようとしている。
The Foundation seeks to educate individuals, organizations, companies, and governments about the issues that arise when computer and communications technologies change the world out from under the existing legal and social matrix. 

EFFは、暗号政策について長年にわたり活動を展開してきた。
The Foundation has been working on cryptography policy for many years.

「クリッパーチップ」とそれに続く「キーエスクロウ」提案の採用を止めるにあたっては大きな役割を果たし、小細工のない、解読不可能な暗号技術の広範な流通と使用を推進している。
It was a significant force in preventing the adoption of the "Clipper chip" and its follow-on "key escrow" proposals, and continues to advocate for wide public availability and use of uncompromised and unbreakable encryption technology. 

EFF は、Daniel Bernstein教授がアメリカの暗号に対する輸出法規制をひっくり返そうとする訴訟を支援している。
EFF is backing the lawsuit in which Professor Daniel Bernstein seeks to overturn the United States export laws and regulations on cryptography, 

教授は、アメリカ合州国憲法の修正第一条が、自分の暗号研究の成果を自由に発表する権利を保護しており、いちいち政府の許可を得たりする必要はないはずだ、と主張している。
arguing that the First Amendment to the US Constitution protects his right to publish his cryptography research results online without first seeking government permission.

この初の公表されたDESクラッカーを作成し、その技術的な詳細を公開するという研究活動は、暗号技術の社会的・技術的ない意義について一般市民に理解してもらい、啓蒙しようというEFFの努力の一環だ。
EFF's research effort in creating this first publicly announced DES Cracker, and the publication of its full technical details, are part of EFF's ongoing campaign to understand, and educate the public about, the social and technical implications of cryptographic technology. 

12-1 
12-1 

12-2 
12-2 

EFF は、みなさんに、社会が今日の急速な技術的変化にいちばんいい形で対応するにはどうしたらいいかをわれわれと検討してほしいと願っている。
EFF encourages you to join us in exploring how our society can best respond to today's rapid technological change.

EFFの会員になろう。
Please become an EFF member;

詳しくは、以下を参照：http://www.eff.org/join/John Gilmore 
see http://www.eff.org/join/John Gilmore 

John Gilmore は、起業家で市民リバータリアンである。
John Gilmore is an entrepreneur and civil libertarian.

かれは初期のSun Microsystems 社員であり、Cygnus Solutions, the Electronic Frontier Foundation, the Cypherpunks, インターネットの "alt" ニュースグループの共同創始者である。
He was an early employee of Sun Microsystems, and co-founded Cygnus Solutions, the Electronic Frontier Foundation, the Cypherpunks, and the Internet's "alt" newsgroups.

コンピュータ産業では25年にわたる経験を持ち、プログラミング、ハード／ソフトの研究、マネジメントなどを経験。
He has twenty-five years of experience in the computer industry, including programming, hardware and software design, and management.

世界のオープンソース（フリーソフト）開発に、大きな貢献をしている。
He is a significant contributor to the worldwide open sourceware (free software) development effort.

かれの暗号政策支援は、オープンな社会におけるプライバシーとアカウンタビリティにとっての本質的な技術である暗号技術について、一般の理解を深めることを目標としている。
His advocacy efforts on encryption policy aim to improve public understanding of this fundamental technology for privacy and accountability in open societies.

現在はMoniker pty ltd, Internet Society, Electronic Frontier Foundationの顧問委員である。
He is currently a board member of Moniker pty ltd, the Internet Society, and the Electronic Frontier Foundation. 

John はEFF の暗号政策に関する動きを指導しており、DESクラッカーの製作をマネジメントして、本書の文章のかなりの部分を執筆している。
John leads the EFF's efforts on cryptography policy, managed the creation of the DES cracker and wrote much of the text in this book. 

Johnに連絡をとりたい場合には、以下のメールアドレスへどうぞ： gnu@des.toad.com; 
John can be reached at the email address gnu@des.toad.com; 

またホームページは： http://www.cygnus.com/~gnu/
his home page is http://www.cygnus.com/~gnu/ 

Cryptography Research 
Cryptography Research 


Cryptography Research
870 Market Street, Suite 1088
San Francisco, CA 94102 USA
+1 415 397 0123 (voice)
+1 415 397 0127 (fax)
http://www.cryptography.com

Cryptography Research 
870 Market Street, Suite 1088 
San Francisco, CA 94102 USA 
+1 415 397 0123 (voice) 
+1 415 397 0127 (fax) 
http://www.cryptography.com 


Cryptography Research はPaul Kocherのコンサルティング会社で、サンフランシスコにある。 
Cryptography Research is Paul Kocher's San Francisco-based consulting company. 

Cryptography Research は、多くの大企業や新興企業にたいしてコンサルティング、デザイン、教育、分析サービスを提供している。
Cryptography Research provides consulting, design, education, and analysis services to many leading firms and start-ups.

Kocher と同社はその技術的な仕事と研究で広く知られている。
Kocher and the company are widely known for their technical work and research,

たとえば世界的な暗号プロトコル（SSL 3.0など）の開発や、暗号分析（たとえばRSAなどの暗号システムに対する時間計測攻撃の発見など）、そして大規模会議での無数のプレゼンテーションなど。
including the development of leading cryptographic protocols (such as SSL 3.0), cryptanalytic work (including the discovery of timing attacks against RSA and other cryptosystems), and numerous presentations at major conferences.

Cryptography Researchへの連絡は、以下へメールでどうぞ。 
info@cryptography.com
To reach Cryptography Research please write to info@cryptography.com. 


12-3 
12-3 

Cryptography Research は、DESクラッカーのハードとソフトの設計をマネジメントし、チップシミュレータとドライバソフトを書いた。
Cryptography Research managed the hardware and software design for the DES cracker, and wrote the chip simulator and the driver software. 

Paul Kocher, Josh Jaffe をはじめとする Cryptography Research の全員は、このユニークなプロジェクトに出資してきれたJohn Gilmore と EFF に感謝したい。
Paul Kocher, Josh Jaffe, and everyone else at Cryptography Research would like to thank John Gilmore and the EFF for funding this unique project,

そして AWTもそのすばらしいハードウェア作業を感謝！
and AWT for their expert hardware work! 

Paul Kocher 
Paul Kocher 

Paul Kocher は暗号研究家であり、暗号をつかった高セキュリティシステムの作成に関する現実的な技能を専門としている。
Paul Kocher is a cryptographer specializing in the practical art of building secure systems using cryptography.

現在はCryptography Research (http://www.cryptography.com) の社長と、ValiCert (http://www.valicert.com)の主任科学者を兼任。 
He currently serves jointly as President of Cryptography Research (http://www.cryptography.com) and Chief Scientist of ValiCert (http://www.valicert.com).

Paulは無数のソフトやハードプロジェクトに参加してきており、多数の暗号システムを設計、実装、解読してきた。
Paul has worked on numerous software and hardware projects and has designed, implemented, and broken many cryptosystems.

Paulへの連絡は電子メールで以下までどうぞ： paul@cryptography.com.
Paul can be reached via e-mail at paul@cryptography.com. 

Advanced Wireless Technologies 
Advanced Wireless Technologies 


Advanced Wireless Technologies, Inc.
3375 Scott Blvd, Suite 410
Santa Clara, CA 95054 USA
+1 408 727 5780 (voice)
+1 408 727 8842 (fax)
http://www.awti.com

Advanced Wireless Technologies, Inc. 
3375 Scott Blvd, Suite 410 
Santa Clara, CA 95054 USA 
+1 408 727 5780 (voice) 
+1 408 727 8842 (fax) 
http://www.awti.com 


Advanced Wireless Technologies, Inc. (AWT) は、ハイテク企業にたいしてアプリケーション専用IC (ASIC) と基板レベルのソリューションを、最高の品質で最低の価格で提供している。
Advanced Wireless Technologies, Inc. (AWT) is dedicated to providing Application-Specific Integrated Circuit (ASIC) and board level design solutions for high tech industries at highest quality and lowest cost.

AWTの設計哲学は、製品開発コスト／リスクと、関連コストを下げることである。
AWT's design philosophy is to reduce product development cost/risk and recurring cost.

AWTは、システムアーキテクチャからシステムインテグレーションと試験まで、一貫した設計フローを採用している。
AWT employs a thorough design flow from system architecture to system integration and test. 

AWT は1993年に創業された。
AWT was founded in 1993.

エンジニアリングチームは、技能のすぐれたフルタイムの職員と、技術マネジメントスタッフで構成されている。
Its engineering team is composed of a highly qualified, tenured employee base, including technical management staff.

社員は知識豊富でやる気も高く、有能で、システムエンジニアリング、チップ設計、完全なサブシステム設計の経験が3年から25年ある。
The employees are knowledgeable, motivated, highly competent, and have from 3 to 25 years of experience in system engineering, chip design, and complete subsystem design. 

AWT は、顧客の個別ニーズにあわせたデジタルASIC/ゲートアレイと基板設計サービスを提供している。
AWT offers digital ASIC/Gate Array and Board design services to support customers' specific requirements.

仕様の決定から、設計の実装、プロトタイプのテストまで、あらゆる開発フェーズでの参加が可能。
The company can participate in any development phase from specifications definition to design implementation and prototype testing. 

またエンジニアリングサービスにとどまらず、AWTは通信産業で使われる、先進的な製品を開発してきている。
In addition to providing engineering services AWT has developed leading products for use in the communications industry.

AWTの代表的な製品としては、変調復元、フォワードエラー訂正や暗号の複合などの分野における IP Core、 ASICs, 基板レベルの製品などがある。 
AWT's standard products include IP Cores, ASICs, and board level products in the fields of demodulation, forward error correction, and encryption decryption. 


12-4 
12-4 

AWT は、カスタムASIC、ロジックボード、インターフェースアダプタなど、DESクラッカーのハードを設計・製作した。
AWT designed and built the hardware for the DES Cracker, including the custom ASIC, logic boards, and interface adapters.

DESクラッカーユニットの購入に興味があれば、AWTまでご一報を。
If you're interested in purchasing a DES Cracker unit, contact AWT. 

エンジニアリングのニーズがあれば、以下のwebサイト http://www.awti.com を見るか、あるいは +1 408 727 5780 まで電話で連絡いただければ幸甚。
AWT invites you to visit at http://www.awti.com or call +1 408 727 5780 for your specific engineering needs. 

Note: URLs for other parts welcomed 
Note: URLs for other parts welcomed 

Scan and HTML by JYA/Urban Deadline 
Scan and HTML by JYA/Urban Deadline 

Errata to: jy@jya.com
Errata to: jy@jya.com 
