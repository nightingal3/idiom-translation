ノウアスフィアの開墾
Homesteading the Noosphere

概要
Abstract

オープンソースのライセンスで定義された「公式」イデオロギーとハッカーたちの実際の行動には矛盾が観察される。
After observing a contradiction between the official ideology defined by open-source licenses and the actual behavior of hackers,

これをふまえて、ぼくたちはオープンソースソフトの所有権とコントロールをめぐる実際の慣習を検討する。
I examine the actual customs that regulate the ownership and control of open-source software.

そこで明らかになったのは、そうした慣習の根底にあるのが、ロックの土地保有に関する理論と類似した、所有権の理論であるということだ。
I show that they imply an underlying theory of property rights homologous to the Lockean theory of land tenure.

これと関連づけるかたちで、ハッカー文化を「贈与文化」として分析する。
I then relate that to an analysis of the hacker culture as a `gift culture'

つまりそこの参加者たちは時間とエネルギーと創造性をあげてしまうことで、名声を競うわけだ。
in which participants compete for prestige by giving time, energy, and creativity away.

さらにこの分析が、ハッカー文化における紛争解決にとってどのような意味を持つかを検討し、いくつかの処方箋的な示唆を得るものとする。
Finally, I examine the consequences of this analysis for conflict resolution in the culture, and develop some prescriptive implications.


目次
Table of Contents

1　そもそもの矛盾 
An Introductory Contradiction

2　ハッカーイデオロギーのさまざま 
The Varieties of Hacker Ideology

3　放縦な理論と純潔な実践 
Promiscuous Theory, Puritan Practice

4　所有権とオープンソース 
Ownership and Open Source

5　ロックと土地所有権
Locke and Land Title

6　贈与経済としてのハッカー文化 
The Hacker Milieu as Gift Culture

7　ハッキングのよろこび 
The Joy of Hacking

8　評判のさまざまな相貌 
The Many Faces of Reputation

9　所有権と評判によるインセンティブ 
Ownership Rights and Reputation Incentives

10　エゴの問題 
The Problem of Ego

11　謙虚さの美徳 
The Value of Humility

12　評判ゲームモデルが持つ分野全体としての意義 
Global Implications of the Reputation-Game Model

13　どれほどすばらしい贈り物？ 
How Fine a Gift? 

14　ノウアスフィア的所有権となわばりの動物行動学 
Noospheric Property and the Ethology of Territory

15　紛争の原因 
Causes of Conflict

16　プロジェクト構造と所有権 
Project Structures and Ownership

17　紛争とその解決 
Conflict and Conflict Resolution

18　文化への順応過程とアカデミズムとの関連 
Acculturation Mechanisms and the Link to Academia


Gift Outcompetes Exchange


19　結論：慣習から慣習法へ 
Conclusion: From Custom to Customary Law

20　これからの研究の課題 
Questions for Further Research

21　書誌、注 
Notes
Bibliography

22　謝辞 
Acknowledgements

23　改訂履歴 



1　そもそもの矛盾
An Introductory Contradiction

インターネットのオープンソースソフトの、活発でものすごく生産的な世界をしばらくでもながめていれば、だれでもオープンソースハッカーが信念として語る内容と、かれらの実際の行動との間におもしろい矛盾があることに気がついてしまうだろう。
Anyone who watches the busy, tremendously productive world of Internet open-source software for a while is bound to notice an interesting contradiction between what open-source hackers say they believe and the way they actually behave&#8212;

つまり、オープンソース文化の公式イデオロギーと、その実際の活動は一致していないわけだ。 
between the official ideology of the open-source culture and its actual practice.

文化は適応力のある機械だ。
Cultures are adaptive machines.

オープンソース文化は、はっきりした動きや圧力への反応として生まれてきている。
The open-source culture is a response to an identifiable set of drives and pressures.

いつもながら、ある文化の状況への対応方法は、意識的なイデオロギーとしての部分と、無意識的またはあまりはっきり意識されない暗黙の知識としての部分との両方の形であらわれてくる。
As usual, the culture's adaptation to its circumstances manifests both as conscious ideology and as implicit, unconscious or semi-conscious knowledge.

そしてよくあることだが、無意識的な適応は、意識されたイデオロギーと部分的に矛盾するところがある。 
And, as is not uncommon, the unconscious adaptations are partly at odds with the conscious ideology.

この論文では、この矛盾の根っこのまわりを掘り下げてみて、それをもとにこの文化を動かす動きや圧力を明らかにする。
In this essay, I will dig around the roots of that contradiction, and use it to discover those drives and pressures.

そしてハッカー文化とその習慣について、おもしろい事実を導き出す。
I will deduce some interesting things about the hacker culture and its customs.

そして結論として、この文化が内に持った知識をもっといいほうに活用するための方法をいくつか示唆してみる。 
I will conclude by suggesting ways in which the culture's implicit knowledge can be leveraged better.


カッコに入ったラベルは、参考文献と巻末注をさしている。 



2　ハッカーイデオロギーのさまざま
The Varieties of Hacker Ideology 

インターネットのオープンソース文化のイデオロギー（ハッカーが信念として口にするもの）は、それ自体がなかなかややこしい代物ではある。
The ideology of the Internet open-source culture (what hackers say they believe) is a fairly complex topic in itself.

メンバーはみんな、オープンソース（つまり自由に再配布ができて、ニーズの変化に対応して自由に発展・変更可能なソフト）がいいものであって、大がかりに力をあわせる価値のあるものだということには合意している。
All members agree that open source (that is, software that is freely redistributable and can readily evolved and be modified to fit changing needs) is a good thing and worthy of significant and collective effort.

この合意がこの文化への参加を実質的に定義つけるものだ。
This agreement effectively defines membership in the culture.

でも、この信念の理由として各個人やさまざまな下位の小文化群が挙げるものは、かなりちがっている。 
However, the reasons individuals and various subcultures give for this belief vary considerably.

大きな差がみられるのは熱狂性だ。
One degree of variation is zealotry;

オープンソースがある目的（よいツールやおもしろいおもちゃや楽しいゲーム）を実現するための、ただの便利な手法としてとらえられているか、それともそれ自体が目的として考えられているか。 
whether open source development is regarded merely as a convenient means to an end (good tools and fun toys and an interesting game to play) or as an end in itself.

すごく熱狂的な人間なら、こんなことをいうだろう。
A person of great zeal might say

「フリーソフト命！　
``Free software is my life!

ぼくが存在しているのは、便利で美しいソフトや情報リソースをつくってそれをあげてしまうためなんだ！」　
I exist to create useful, beautiful programs and information resources, and then give them away.''

そこそこの熱狂性をもった人間なら
A person of moderate zeal might say

「オープンソースはいいことだし、だからその実現のために相当量の時間を喜んで割きますよ」
というだろう。
``Open source is a good thing, which I am willing to spend significant time helping happen''.

そんなに熱狂的でない人間なら、こういうかもしれない。
A person of little zeal might say

「うん、オープンソースはいいときもあるわよね。
``Yes, open source is okay sometimes.

たまにいじってみたりもするし、それをつくった人たちには敬意を払ってるわ」 
I play with it and respect people who build it''.

ほかに差があるところは、商用ソフトへの敵意と、商用ソフト市場を支配しているとみられる企業への敵意だ。 
Another degree of variation is in hostility to commercial software and/or the companies perceived to dominate the commercial software market.

すごく反商業主義的な人間はこういうだろう。
A very anticommercial person might say

「商用ソフトは窃盗行為で秘匿行為だ。
``Commercial software is theft and hoarding.

ぼくがフリーソフトを書くのはこの悪行を止めさせるためだ」。
I write free software to end this evil.''

そこそこ反商業主義的な人間はこういう。
A moderately anticommercial person might say

「商業ソフトそのものはおおむねOKよ。
``Commercial software in general is OK

だってプログラマには対価が支払われるべきだもん。
because programmers deserve to get paid,

でも、いい加減な製品にあぐらをかいて、数をたのみにごりおししてまわる企業はろくでもないわね」
but companies that coast on shoddy products and throw their weight around are evil.''

そして反商業主義でない人間ならこういう。
An un-anticommercial person might say

「商用ソフトだってよいではないの。
``Commercial software is okay,

ぼくがオープンソースソフトを書く／使うのは、そっちが好きだからってだけよ」 
I just use and/or write open-source software because I like it better''.


(Nowadays, given the growth of the open-source part of the industry since the first public version of this essay, one might also hear 
``Commercial software is fine, as long as I get the source or it does what I want it to do.'')


以上のカテゴリーをかけあわせて出てくる9つの態度すべてがオープンソース文化の中には登場している。
All nine of the attitudes implied by the cross-product of the categories mentioned earlier are represented in the open-source culture.

こういうちがいを指摘しておくことが大事なのは、それが異なった目的を意味するからで、したがって適応行動や協調行動もちがってくるからだ。 
It is worthwhile to point out the distinctions because they imply different agendas, and different adaptive and cooperative behaviors.

歴史的にいうと、もっとも目に見えて、いちばんよく組織化されていたハッカー文化の部分は、きわめて熱狂的で、非常に反商業的だった。
Historically, the most visible and best-organized part of the hacker culture has been both very zealous and very anticommercial.

リチャード・M・ストールマン（Richard M. Stallman, RMS）の創設したフリーソフトウェア財団（Free Software Foundation, FSF）は 1980 年代初期以来、大量のオープンソース開発を支援してきた。
The Free Software Foundation founded by Richard M. Stallman (RMS) supported a great deal of open-source development from the early 1980s forward, 

そのなかには、Emacs や GCC のような、インターネット・オープンソース界にとって、いまでも、そしてこの先当分の間も、基本となるツールであり続けるようなものも含まれている。 
including tools like Emacs and GCC which are still basic to the Internet open-source world, and seem likely to remain so for the forseeable future.

何年ものあいだ、FSF はオープンソース・ハッキングに唯一最大の焦点だったし、いまだにこの文化にとってきわめて重要なツールを生み出し続けてきている。
For many years the FSF was the single most important focus of open-source hacking, producing a huge number of tools still critical to the culture.

FSF はまた、ハッカー文化を外から見ている者にとっては、ながいことオープンソースを支援している組織的な身分をもった唯一のスポンサーだった。
The FSF was also long the only sponsor of open source with an institutional identity visible to outside observers of the hacker culture.

かれらこそ実質的に「フリーソフト」という用語を定義し、このことばに意図的に挑戦的な含みを持たせるようになった。
They effectively defined the term `free software', deliberately giving it a confrontational weight

（新しいラベルの「オープンソース」は同じくらい意図的にそういう含みをさけるようにしている。） 
(which the newer label `open source' just as deliberately avoids).

だからハッカー文化に対する認識は、内からも外からも、FSF の熱狂的な態度と反商業主義的な目標と同一視されがちだった
Thus, perceptions of the hacker culture from both within and without it tended to identify the culture with the FSF's zealous attitude and perceived anticommercial aims.

（RMS 自身は、自分が反商業主義であることを否定している。
RMS himself denies he is anticommercial,

でもかれの活動は、そのもっとも活発な支持者たちを含め、ほとんどの人からそのように受け取られている）。
but his program has been so read by most people, including many of his most vocal partisans.

FSF の「ソフトウェアの隠匿をつぶせ！」という精力的ではっきりした運動は、ハッカー・イデオロギーにいちばん近いものとなったし、RMSはハッカー文化のリーダーにいちばん近い存在となった。
The FSF's vigorous and explicit drive to ``Stamp Out Software Hoarding!'' became the closest thing to a hacker ideology, and RMS the closest thing to a leader of the hacker culture.

FSF のライセンス条項「General Public License (GPL)」は FSF の熱狂的で反商業主義的な態度を表現している。
The FSF's license terms, the ``General Public License'' (GPL), expresses the FSF's attitudes.

これはオープンソース界では広く使われているライセンス方式だ。
It is very widely used in the open-source world.

ノースカロライナ大の Sunsiteは、Linux 界で最大かついちばん人気のあるソフトアーカイブだけれど、
North Carolina's Metalab (formerly Sunsite) is the largest and most popular software archive in the Linux world.

1997年7月にはSunsiteのソフトパッケージではっきりしたライセンス条項を持つもののうち、半数がGPLを使っている。 
In July 1997 about half the Sunsite software packages with explicit license terms used GPL.

でも、FSF はいつの時点でも決してこの世界唯一の団体なんかじゃなかった。
But the FSF was never the only game in town.

ハッカー文化にはつねに、もっと静かで挑戦性の低い、もっと市場を敵視しない流れがあった。
There was always a quieter, less confrontational and more market-friendly strain in the hacker culture.

このプラグマティストたちは、イデオロギーよりはむしろ、 FSF に先立つ初期のオープンソース的な動きに基づいた工学的な伝統に対して忠誠を感じていた。
The pragmatists were loyal not so much to an ideology as to a group of engineering traditions founded on early open-source efforts which predated the FSF.

この伝統でいちばん重要なものとしては、Unix と商業主義以前のインターネットの、相互にからみあった技術文化が含まれる。 
These traditions included, most importantly, the intertwined technical cultures of Unix and the pre-commercial Internet.

典型的なプラグマティスト的態度は、ごく穏健な反商業主義で、それが企業世界に対して持っている不満の大部分は「秘匿」そのものじゃあない。
The typical pragmatist attitude is only moderately anticommercial, and its major grievance against the corporate world is not `hoarding' per se.

むしろそれは、企業世界がUnixやオープン規格やオープンソースなんかが採用している優れたアプローチをなぜか拒むという点だ。
Rather it is that world's perverse refusal to adopt superior approaches incorporating Unix and open standards and open-source software.

プラグマティストたちが嫌うのは何かといえば、それは「隠匿者たち」一般よりはむしろ、ソフトウェア主流派の目下の帝王だろう。
If the pragmatist hates anything, it is less likely to be `hoarders' in general than the current King Log of the software establishment;

これはかつては IBM だったし、いまはマイクロソフト だ。 
formerly IBM, now Microsoft.

プラグマティストたちにとって、GPL はそれ自体が目的なんじゃなくて、ツールとして重要だ。
To pragmatists the GPL is important as a tool, rather than as an end in itself.

その主な価値は「秘匿」に対する武器としてのものじゃない。
Its main value is not as a weapon against `hoarding',

むしろソフトの共有とバザール様式の開発コミュニティ成長を奨励するためのツールとして大事になる。
but as a tool for encouraging software sharing and the growth of bazaar-modebazaar-mode development communities. 

プラグマティストは、商業主義を嫌うよりはいいツールやおもちゃを手に入れるほうを重視するし、商業製品を使う場合でも、それが高品質なら別にイデオロギー上の不快感は感じない。
The pragmatist values having good tools and toys more than he dislikes commercialism, and may use high-quality commercial software without ideological discomfort.

同時に、オープンソース界での経験でおぼえた技術的な品質は、閉鎖的なソフトではほとんど実現困難なほど高い。 
At the same time, his open-source experience has taught him standards of technical quality that very little closed software can meet.

何年にもわたって、ハッカー文化の中のプラグマティスト的な視点は、特に GPL を完全に受け入れたり、あるいはFSFの目標一般を受け入れることを頑固に拒否する流れとして己を主張しつづけていた。
For many years, the pragmatist point of view expressed itself within the hacker culture mainly as a stubborn current of refusal to completely buy into the GPL in particular or the FSF's agenda in general.

1980 年代と1990 年代初期には、この態度はバークレー Unix のファンや BSD ライセンスの使用者、そして BSD ソースをもとにオープンソースの各種 Unix をつくろうという初期の努力と結びつけられていた。
Through the 1980s and early 1990s, this attitude tended to be associated with fans of Berkeley Unix, users of the BSD license, and the early efforts to build open-source Unixes from the BSD source base.

でもこうした試みは、しかるべき規模のバザール・コミュニティ形成に失敗し、きわめて断片化されて力の弱いものとなってしまった。 
These efforts, however, failed to build bazaar communities of significant size, and became seriously fragmented and ineffective.

プラグマティストたちが本物の勢力基盤を見つけるには、1993 年初期から 1994 年にかけての Linux の爆発を待たなくてはならなかった。
Not until the Linux explosion of early 1993?1994 did pragmatism find a real power base.

Linus Torvalds は決してあえて RMS に反対したりはしなかったけれど、でも商業 Linux 産業が成長するのをだまって見過ごし、特定の仕事には高品質な商業ソフトの利用を推奨し、そしてハッカー文化のもっと純粋主義で狂信的な部分を軽く嘲笑することで、先例を確立したわけだ。
Although Linus Torvalds never made a point of opposing RMS, he set an example by looking benignly on the growth of a commercial Linux industry, by publicly endorsing the use of high-quality commercial software for specific tasks, and by gently deriding the more purist and fanatical elements in the culture. 

Linux 急成長の副作用として、新しいハッカーたちが多数登場したことが挙げられる。
A side effect of the rapid growth of Linux was the induction of a large number of new hackers

かれらにとって、主な忠誠は Linux に対してのものであって、FSF の目標はもっぱら歴史的興味でしかなかった。
for which Linux was their primary loyalty and the FSF's agenda primarily of historical interest.

Linux ハッカーのもっと新しい波は、Linux システムを「GNU 世代の選択」と表現はするけれど、でもその多くはストールマンよりはトーヴァルズをまねがちだ。
Though the newer wave of Linux hackers might describe the system as ``the choice of a GNU generation'', most tended to emulate Torvalds more than Stallman.
 
しだいに、むしろ反商業的な純潔主義者たちのほうが少数派においやられていった。
Increasingly it was the anticommercial purists who found themselves in a minority.

事態がどれだけ変わったかがはっきりしたのは、1998年2月に Netscape 社が Navigator 5.0 をソースコードで配布すると発表したときだった。
How much things had changed would not become apparent until the Netscape announcement in February 1998 that it would distribute Navigator 5.0 in source.

これは企業世界での「フリーソフト」に対する興味をかきたてることになった。
This excited more interest in `free software' within the corporate world.

これに続いてハッカー文化に対し、このかつてない機会を利用しつくすとともに、その成果を「フリーソフト」から「オープンソース」と命名しなおそうという呼びかけが行われたけれど、これに対しては即座にものすごい支持が得られたので、関係者はだれしもびっくりしたほどだ。
The subsequent call to the hacker culture to exploit this unprecedented opportunity and to re-label its product from `free software' to `open source' was met with a level of instant approval that surprised everybody involved.

これをさらに補強する展開として、ハッカー文化のプラグマティスト部分そのものも、1990年代半ばにはだんだん多心型になっていった。
In a reinforcing development, the pragmatist part of the culture was itself becoming polycentric by the mid-1990s.

Unix/インターネットの根っこの株からは、ほかにも半独立のコミュニティが生まれるようになり、それぞれが独自の自意識とカリスマ的なリーダーを持っている。
Other semi-independent communities with their own self-consciousness and charismatic leaders began to bud from the Unix/Internet root stock.

なかでも Linux 以降でいちばん重要なのは、Larry Wall 率いる Perl 文化だ。
Of these, the most important after Linux was the Perl culture under Larry Wall.

もっと小さいながらも重要なものとしては、 John Osterhoutの Tcl や Guido Van Rossum の Python 言語を取り巻く伝統が挙げられる。
Smaller, but still significant, were the traditions building up around John Osterhout's Tcl and Guido van Rossum's Python languages.

この三つとも独自の GPL でないライセンス方式を編み出すことで、イデオロギー的な独立性を主張している。
All three of these communities expressed their ideological independence by devising their own, non-GPL licensing schemes.


3　放縦な理論と純潔な実践
Promiscuous Theory, Puritan Practice

とはいえこうした変化すべてを通じて、「フリーソフト」や「オープンソース」がなんであるかについては、おおまかな合意を得た理論が維持され続けていた。
Through all these changes, nevertheless, there remained a broad consensus theory of what `free software' or `open source' is.

この共通理論のいちばんはっきりした表現は、いろんなオープンソース・ライセンスにみることができる。
The clearest expression of this common theory can be found in the various open-source licenses,

そのすべてにはきわめて重要な共通要素があるんだ。 
all of which have crucial common elements. 

1997年に、こういう共通要素が蒸留されて Debian フリーソフトウェア・ガイドラインとなり、これがOpen Source Definitionになった。
In 1997 these common elements were distilled into the Debian Free Software Guidelines, which became the Open Source Definition.

OSD の定義したガイドラインのもとでは、オープンソースのライセンスはオープンソース・ソフトを変更（そしてその変更版を再配布）する権利をだれにでも無条件に認めなくてはならない。 
Under the guidelines defined by the OSD, an open-source license must protect an unconditional right of any party to modify (and redistribute modified versions of) open-source software.

だから OSD（そして GPL、BSD ライセンス、Perl の Artisitic License など OSD 対応のライセンス群）の暗黙の理論というのは、だれもがなんでもハックできるというものだ。
Thus, the implicit theory of the OSD (and OSD-conformant licenses such as the GPL, the BSD license, and Perl's Artistic License) is that anyone can hack anything.

どんなオープンソース製品（たとえば FSFの gcc C コンパイラとか）でも、6人くらいがソースを複製してそれを勝手にちがった発展方向に向けて変えてしまい、しかもみんなが「これぞ本家本元」と主張する、といったことは十分可能だし、それを止めるものはなにもない。 
Nothing prevents half a dozen different people from taking any given open-source product (such as, say the Free Software Foundations's gcc C compiler), duplicating the sources, running off with them in different evolutionary directions, but all claiming to be the product.

でも実際には、こんな「分裂」はほとんど絶対に起きないといっていい。
This kind of divergence is called a fork.

大プロジェクトの分裂はすごくまれだし、いつも名前が変わるうえ、世間的にもなぜそれが正当かについて、大量の説明が行われる。
The most important characteristic of a fork is that it spawns competing projects that cannot later exchange code, splitting the potential developer community.

(There are phenomena that look superficially like forking but are not, such as the proliferation of different Linux distributions.
In these pseudo-forking cases there may be separate projects, but they use mostly common code and can benefit from each other's development efforts completely enough that they are neither technically nor sociologically a waste, and are not perceived as forks.)

GNU Emacs/Xemacs の分裂や、さまざまな BSD 系グループの分裂なんかでは、分離派たちは自分たちが非常に強力なコミュニティ規範に逆らって行動していると感じていたのは明らかだ [SP]。

 
実際問題として（そして「だれでもなんでもハックできる」という合意があるという理屈とは正反対に）、オープンソース文化は入念ながらほとんど認識されていない所有権の慣習を持っている。
In fact (and in contradiction to the anyone-can-hack-anything consensus theory) the open-source culture has an elaborate but largely unadmitted set of ownership customs.

この慣習によって、だれがソフトを変更できるか、どういう状況でそれが変更できるか、そして（特に）だれが変更バージョンを再配布してコミュニティに戻せるか、が規定されているんだ。 
These customs regulate who can modify software, the circumstances under which it can be modified, and (especially) who has the right to redistribute modified versions back to the community.

ある文化の禁忌（タブー）は、そこでの規範をシャープに浮かび上がらせる。
The taboos of a culture throw its norms into sharp relief.

だから、だいじなタブーをここでまとめておくと、あとあと役にたつだろう。
Therefore, it will be useful later on if we summarize some important ones here:

プロジェクトの分岐に対してはすごく強い社会的な圧力がある。
There is strong social pressure against forking projects.

どうしてもこれが必要なんだという請願のもとで、世間に対してもその行為を正当化する訴えがたくさん行われ、そしてプロジェクトの名前も変えない限り、それは起こらない。 
It does not happen except under plea of dire necessity, with much public self-justification, and requires a renaming.

プロジェクトへの変更を、モデレータたちの協力なしに行うといい顔をされない。
Distributing changes to a project without the cooperation of the moderators is frowned upon,

ただし、基本的に些末な移植上のフィックスなどはのぞく。 
except in special cases like essentially trivial porting fixes.

ある人の名前をプロジェクトの歴史やクレジットや管理者リストからのぞくのは、当人のはっきりした合意なしには絶対に行われない。
Removing a person's name from a project history, credits, or maintainer list is absolutely not done without the person's explicit consent.

この論文ではこれから、こうしたタブーと所有についての慣習を検討する。
In the remainder of this essay, we shall examine these taboos and ownership customs in detail.

それらがどう機能するかというだけでなく、それが明らかにしているオープンソース・コミュニティの根底にある社会的な力学やインセンティブ構造についても見ていこう。
We shall inquire not only into how they function but what they reveal about the underlying social dynamics and incentive structures of the open-source community.


4　所有権とオープンソース
Ownership and Open Source

ある物件が無限に複製可能で、いくらでも変えられて、そしてそれをとりまく文化が脅せるような権力関係や財の希少性に基づく経済に基づいていないとき、なにかの「所有権」を持つっていうのはどういうことだろうか。
What does `ownership' mean when property is infinitely reduplicable, highly malleable, and the surrounding culture has neither coercive power relationships nor material scarcity economics?

実はオープンソース文化に関するかぎり、この質問には簡単に答えられる。
Actually, in the case of the open-source culture this is an easy question to answer.

ソフトウェア・プロジェクトの所有者というのは、変更したバージョンを公式に再配布する独占的な権利をコミュニティ全般から認められている人物である。 
The owner of a software project is the person who has the exclusive right, recognized by the community at large, to distribute modified versions.

（この章で「所有権」を論じるときには、その所有者については単数形を使う。
(In discussing `ownership' in this section I will use the singular,

これだとまるですべてのプロジェクトは一人の人物が所有しているかのようだけれど、
as though all projects are owned by some one person.

プロジェクトをグループで所有している場合もあるということは承知してほしい。
It should be understood, however, that projects may be owned by groups.

こういうグループ内の力学についても、この論文で見ていくことにする。） 
We shall examine the internal dynamics of such groups later on.)

標準的なオープンソースのライセンスのもとなら、ソフト進化のゲームではみんなが平等なはずだ。
According to the standard open-source licenses, all parties are equals in the evolutionary game.

でも現実には、公認の管理者が承認して進化するソフトに統合した「公式」パッチと、第三者による「非公式」パッチとははっきり区別して認識されている。
But in practice there is a very well-recognized distinction between `official' patches, approved and integrated into the evolving software by the publicly recognized maintainers, and `rogue' patches by third parties.

非公式パッチはあまりないし、一般には信用のおけないものとされる[RP]。 
Rogue patches are unusual, and generally not trusted [RP].

公式な再配布こそが根本的な問題なんだというのは、簡単に示せる。
That public redistribution is the fundamental issue is easy to establish.

ハッカー文化の慣習は、みんなが自分だけのためにソフトをパッチするのは推奨している。
Custom encourages people to patch software for personal use when necessary.

この習慣は、閉じたユーザグループや開発グループ内で変更バージョンを再配布する人々も問題にはしない。
Custom is indifferent to people who redistribute modified versions within a closed user or development group.

そういう変更がオープンソース・コミュニティ一般に対してポストされ、オリジナル版と競合するようになったときにだけ、所有権が問題になってくる。
It is only when modifications are posted to the open-source community in general, to compete with the original, that ownership becomes an issue.
 
一般的にいって、オープンソース・プロジェクトの所有権を獲得するには3つの方法がある。
There are, in general, three ways to acquire ownership of an open-source project.

第一の方法はいちばん自明だろうけれど、プロジェクトを創始することだ。
One, the most obvious, is to found the project.

プロジェクトの開始以来、管理者が一人しかいなくて、その管理者が活動を続けているなら、ハッカー慣習はそのプロジェクトをだれが所有しているのかについて疑問視することすら許さない。 
When a project has had only one maintainer since its inception and the maintainer is still active, custom does not even permit a question as to who owns the project.

プロジェクトの所有権を獲得する第二の方法は、前の所有者からそれを引き継ぐことだ（いわゆる「バトンタッチ」）。
The second way is to have ownership of the project handed to you by the previous owner (this is sometimes known as `passing the baton').

プロジェクトの所有者は開発や保守作業に必要な時間を割けなかったり割く気がなかったりするときには、有能な後継者にプロジェクトを引き継ぐ義務がある。
これはこのコミュニティではよく理解されている。 
It is well understood in the community that project owners have a duty to pass projects to competent successors when they are no longer willing or able to invest needed time in development or maintenance work.

大きなプロジェクトの場合、こういうコントロールの引き継ぎは一般に派手なファンファーレつきでアナウンスされていることはだいじだ。
It is significant that in the case of major projects, such transfers of control are generally announced with some fanfare.

オープンソースコミュニティ全体として、所有者の後継者選びに実際に文句がついた例はまったくないけれど、慣習的な行為は明らかに、世間的に見た正当性がだいじなんだという認識を含んでいる。
While it is unheard of for the open-source community at large to actually interfere in the owner's choice of succession, customary practice clearly incorporates a premise that public legitimacy is important. 

小規模なプロジェクトでは、プロジェクトの配布パッケージの中に変更履歴を含めておいて、そこで所有者の変化を明記しておけばふつうは十分だ。
For minor projects, it is generally sufficient for a change history included with the project distribution to note the change of ownership.

ここでの明らかな過程は、もし前の所有者が自発的にコントロールをゆずったのでなければ、その人はそれなりの期間内に公開の場で抗議することで、コミュニティの支援のもとでコントロールを奪回できる、というものだ。
The clear presumption is that if the former owner has not in fact voluntarily transferred control, he or she may reassert control with community backing by objecting publicly within a reasonable period of time. 

所有権を獲得する第三の方法は、そのソフトに作業が必要だとみてとって、しかももとの所有者が消えたか興味を失ったかしたときだ。
The third way to acquire ownership of a project is to observe that it needs work and the owner has disappeared or lost interest.

もしこれをやるなら、所有者を見つけようとするのがきみの責任だ。
If you want to do this, it is your responsibility to make the effort to find the owner.

それがうまくいかなければ、しかるべき関係した場所（たとえばそのアプリケーション分野専門の Usenet ニュースグループなんか）でそのプロジェクトがどうも放棄されたらしくて、だから引き継ごうと思うんだけど、と宣言することになる。 
If you don't succeed, then you may announce in a relevant place (such as a Usenet newsgroup dedicated to the application area) that the project appears to be orphaned, and that you are considering taking responsibility for it.

慣習は、自分が新しい所有者だと宣言するまえに、しばらく様子を見ろと要求している。
Custom demands that you allow some time to pass before following up with an announcement that you have declared yourself the new owner.

このあいだに、だれかが実は自分はそのプロジェクトで作業を続けるんだけど、と申し出れば、その人たちの申し立てが優先されることになる。
In this interval, if someone else announces that they have been actually working on the project, their claim trumps yours.

プロジェクトを引き継ぎたいという意志発表は、何回かやるのがいいとされる。
It is considered good form to give public notice of your intentions more than once.

それも、複数の場でやったほうがポイントは高い（関連ニュースグループ、メーリングリストなど）。
You get more points for good form if you announce in many relevant forums (related newsgroups, mailing lists), 

そして返事を待つのに辛抱強ければもっといい。
and still more if you show patience in waiting for replies.

一般に、前の所有者やほかの権利保持者が反応できるようになるべく努力をしたほうが、反応がないときの自分の権利主張が通りやすい。
In general, the more visible effort you make to allow the previous owner or other claimants to respond, the better your claim if no response is forthcoming.

このプロセスを、プロジェクトのユーザコミュニティにも見えるところでやって、反対がなければ、その捨て子プロジェクトの所有権を主張して、その旨を履歴ファイルに記入できる。
If you have gone through this process in sight of the project's user community, and there are no objections, then you may claim ownership of the orphaned project and so note in its history file.

でもこの方法は、バトンタッチされるよりも危ういもので、ユーザコミュニティから見て相当な改良を加えない限り、正式に認められたと思っちゃいけない。
This, however, is less secure than being passed the baton, and you cannot expect to be considered fully legitimate until you have made substantial improvements in the sight of the user community. 

ぼくはこういう慣習が実際に働くのを、FSF 以前のオープンソースの古代にさかのぼる 20 年前から見てきている。
I have observed these customs in action for 20 years, going back to the pre-FSF ancient history of open-source software.

これにはいくつかとてもおもしろい性質がある。
They have several very interesting features.

なによりもおもしろいことの一つは、ほとんどのハッカーたちは、実際に自分がそうしていると完全に意識していないのに、これにしたがってきたということだ。
One of the most interesting is that most hackers have followed them without being fully aware of doing so.

この文章は、実際に文になった意識的でそれなりに網羅的なまとめとしては、史上初のものかもしれない。 
Indeed, this may be the first conscious and reasonably complete summary ever to have been written down.

もう一つ挙げられるのは、無意識の慣習だというのに、それはきわめて（それどころか驚異的なほど）一貫して守られてきている、ということだ。
Another is that, for unconscious customs, they have been followed with remarkable (even astonishing) consistency.

ぼくは文字通り何百ものオープンソースプロジェクトの進化を見てきた。
I have observed the evolution of literally hundreds of open-source projects,

それなのに、見聞きした大きな逸脱行為はまだ両手の指で数えられるほどしかない。 
and I can still count the number of significant violations I have observed or heard about on my fingers.

でも、第三のおもしろい性質というのは、こういう慣習が時を追って発展してくるとき、それは一貫した方向性を持っていたということだ。
Yet a third interesting feature is that as these customs have evolved over time, they have done so in a consistent direction.

この方向性というのは、もっと公共的なアカウンタビリティや通達を奨励し、プロジェクトのクレジットや変更履歴の保存についてもっと配慮を増やして（なににもまして）いまの所有者の正当性を確立しようというものだった。
That direction has been to encourage more public accountability, more public notice, and more care about preserving the credits and change histories of projects in ways that (among other things) establish the legitimacy of the present owners. 

こういう性質が示唆しているのは、こうした慣習が偶然の産物ではなくて、オープンソース文化でのなにか暗黙の目的や生成パターンの産物で、その機能方法にとってきわめて根本的なものなんだということだ。 
These features suggest that the customs are not accidental, but are products of some kind of implicit agenda or generative pattern in the open-source culture that is utterly fundamental to the way it operates.

この論文に早い時期にコメントをよせたある人は、インターネット・ハッカー文化とクラッカー・海賊文化（ゲームのクラッキングと海賊ソフト BBS を中心に活動する、「Warez D00dz」）を対比させると双方の生成パターンがなかなかはっきりすることを指摘してくれた。
An early respondent pointed out that contrasting the Internet hacker culture with the cracker/pirate culture (the ``warez d00dz'' centered around game-cracking and pirate bulletin-board systems) illuminates the generative patterns of both rather well. 

d00dz との対比は後出。 
We'll return to the d00dz for contrast later in this essay.


訳注：warez d00dz　「ウェアズ・デューズ」と読む。
Warezはwaresであり、海賊コピーされたソフト群など、この種の BBS 上でやりとりされるソフト一般をさす。
D00dz は doodz であり、これは dude の複数形を発音に忠実に表記したもの。
敢えて訳すと「（ソフト）ウェア野郎ども」かな。
濁音になる S をすべて Z で置き換え、さらにo（オー）の字を数字のゼロで置き換える独特の表記に注目。
かれらの BBS では多くの人がこのようなハンドルを使用する。
A と似ているので 4 を使ったり、 for のかわりに 4 を使ったり、大文字小文字を逆転させることも多い。
ありとあらゆるソフトが海賊版で流通しているが、d00dz の多くは別にそれを使うわけではなく、単に保持タイトルを自慢しあっているケースが多い。 



5　ロックと土地所有権
Locke and Land Title

この生成パターンを理解するには、ハッカーの通常の関心領域をはるかに離れて、こうした慣習と歴史的に類似した例を見るのが役に立つ。
To understand this generative pattern, it helps to notice a historical analogy for these customs that is far outside the domain of hackers' usual concerns.

法制度史や政治哲学を学んだ人ならお気づきのように、ハッカーたちが暗に主張している所有理論は、英米慣習法における土地所有権の理論とほとんどまったく同じなんだ！ 
As students of legal history and political philosophy may recognize, the theory of property they imply is virtually identical to the Anglo-American common-law theory of land tenure!

この理論では、土地の所有権を獲得する方法は3つある。 
In this theory, there are three ways to acquire ownership of land:

未開の地（フロンティア）には、これまで所有者のいなかった土地がある。
On a frontier, where land exists that has never had an owner,

そこでは人は、開墾（homesteading）することで所有権を獲得できる。
one can acquire ownership by homesteading,

つまり、自分の労働を所有されていない土地に混ぜ込み、囲いをつけて自分の地権を守ることによって。 
mixing one's labor with the unowned land, fencing it, and defending one's title.

入植済みの地域での土地移譲は、ふつうは土地所有権の移転によって行われる。
The usual means of transfer in settled areas is transfer of title

これはつまり、前の所有者から証書を受け取ることだ。
?that is, receiving the deed from the previous owner.

この理論に基づけば、所有権の連鎖という概念が重要になる。
In this theory, the concept of `chain of title' is important.

所有権の証明として理想的なのは、証書とその移転の連鎖が、その土地のそもそもの開墾時点にまでさかのぼれることだ。 
The ideal proof of ownership is a chain of deeds and transfers extending back to when the land was originally homesteaded.

最後に、慣習法理論は土地の所有権が失われたり放棄されたりすることがあるのを認識している
Finally, the common-law theory recognizes that land title may be lost or abandoned

（たとえば所有者が相続人なしに死んだり、空き地に対する所有権の連鎖を確立するための記録が失われていたりする場合）。
(for example, if the owner dies without heirs, or the records needed to establish chain of title to vacant land are gone).

このようにして遺棄された土地は、占拠によって所有権の主張を行える
A piece of land that has become derelict in this way may be claimed by adverse possession

――だれかがそこに入居して、整備を行い、そして開墾時と同じようにそこの所有権を防衛するわけだ。 
?one moves in, improves it, and defends title as if homesteading.

この理論はハッカーの慣習と同じように、中央権力が弱いか存在しないような場面で有機的に発達してきた。
This theory, like hacker customs, evolved organically in a context where central authority was weak or nonexistent.

それは千年以上もかけて、ノルウェイやドイツの部族法から発展してきたものだ。
It developed over a period of a thousand years from Norse and Germanic tribal law.

それを近代の初期に体系化して合理化したのがイギリスの政治哲学者ジョン・ロックだったので、これはよく所有物の「ロック」理論と呼ばれる。
Because it was systematized and rationalized in the early modern era by the English political philosopher John Locke, it is sometimes referred to as the Lockean theory of property.

論理的によく似た理論は、ある物件が経済的または生存上で高い価値を持っていて、しかも稀少財の配分について、中央集権的に強制するだけの力を持った単一の権威が存在しないところでは必ず生じるようだ。
Logically similar theories have tended to evolve wherever property has high economic or survival value and no single authority is powerful enough to force central allocation of scarce goods.

これは、ときどきロマンチックに「所有」の概念がないと考えられたりもする狩猟採集文化でも成り立つ。
This is true even in the hunter-gatherer cultures that are sometimes romantically thought to have no concept of `property'.

たとえば Kgalagadi (カラハリ) 砂漠のクンサン・ブッシュマンの伝統では、狩猟場には所有権は存在しない。
For example, in the traditions of the !Kung San bushmen of the Kgalagadi (formerly `Kalahari') Desert, there is no ownership of hunting grounds.

でも、井戸や泉については所有権が存在して、その理論は明らかにロックの理論と似ている。 
But there is ownership of waterholes and springs under a theory recognizably akin to Locke's.

クンサン・ブッシュマンの例は示唆的だろう。
The !Kung San example is instructive,

というのも、これはロック式の所有権慣習が、その資源からの期待リターンがそれを独占して守る期待コストよりも大きい場合にのみ生じることを示してくれるからだ。
because it shows that Lockean property customs arise only where the expected return from the resource exceeds the expected cost of defending it.

狩猟場が所有権の対象にならないのは、狩猟のリターンがすごく予想しにくくて変動しやすく、さらに（すごく高く評価はされるけれど）日々の生存にとって絶対的に必要なものではないからだ。
Hunting grounds are not property because the return from hunting is highly unpredictable and variable, and (although highly prized) not a necessity for day-to-day survival.

一方の井戸は、生存にとって不可欠だし、守りきれるくらい小さい。 
Waterholes, on the other hand, are vital to survival and small enough to defend.

この論文の題名に出てくる「ノウアスフィア（noosphere）」というのはアイデア（観念）の領域であり、あらゆる可能な思考の空間だ[N]。
The `noosphere' of this essay's title is the territory of ideas, the space of all possible thoughts [N].

ハッカーの所有権慣習に暗黙に含まれているのは、ノウアスフィアの部分集合の一つであるすべてのプログラムを包含する空間での、所有権に関するロック理論なんだ。
What we see implied in hacker ownership customs is a Lockean theory of property rights in one subset of the noosphere, the space of all programs.

だからこの論文は「ノウアスフィアの開墾」と名付けた。
Hence `homesteading the noosphere', 

新しいオープンソース・プロジェクトの創始者がみんなやっているのがそれだからだ。 
which is what every founder of a new open-source project does.

Fare Rideau （rideau@ens.fr）}は、ハッカーは純粋観念の領域だけで活動しているとはいえないと指摘している。
これは正しい。
Far・Rideau <fare@tunes.org> correctly points out that hackers do not exactly operate in the territory of pure ideas.

かれの主張だと、ハッカーが所有しているのはプログラミング・プロジェクトなんだ
He asserts that what hackers own is programming projects

―― これはつまり、物質的な労働（開発、整備など）の意図的な焦点で、ここに評判、信用性なんかが結びついている。
?intensional focus points of material labor (development, service, etc), to which are associated things like reputation, trustworthiness, etc.

ここからかれは、ハッカーのプロジェクトが覆っている空間はノウアスフィアではなく、むしろその分身のような、ノウアスフィアを探索するプログラム・プロジェクトだと主張する
He therefore asserts that the space spanned by hacker projects, is not the noosphere but a sort of dual of it, the space of noosphere-exploring program projects.

（読者のなかの天文物理学者たちに敬意を表しつつも、語源的にいえばこの分身空間を「エルゴスフィア」または「作業のスフィア」と呼んでまちがいない）。
(With an apologetic nod to the astrophysicists out there, it would be etymologically correct to call this dual space the `ergosphere' or `sphere of work'.) 

現実問題としては、ノウアスフィアとエルゴスフィアとの区別はこの論文の目的からいえばだいじじゃない。
In practice, the distinction between noosphere and ergosphere is not important for the purposes of our present argument.

Fare が主張するような純粋な意味での「ノウアスフィア」が、なんら意味あるかたちで存在すると言っていいのかは、実はよくわからない。
It is dubious whether the `noosphere' in the pure sense on which Far・insists can be said to exist in any meaningful way;

そんなものを信じるには、プラトン主義哲学者にでもなるしかないだろう。
one would almost have to be a Platonic philosopher to believe in it.

そしてノウアスフィアとエルゴスフィアとの区別が実際的な重要性を持つのは、アイデア・観念（ノウアスフィアの要素）は所有できずそれをプロジェクトとして実体化したものだけが所有できると考えたい場合だけだ。
And the distinction between noosphere and ergosphere is only of practical importance if one wishes to assert that ideas (the elements of the noosphere) cannot be owned, but their instantiations as projects can.

この問題から出てくる課題は、知的所有権の理論的な問題につながるもので、この論文の範囲を超える。[DF] 
This question leads to issues in the theory of intellectual property which are beyond the scope of this essay (but see [DF]).

でも混乱を避けるために言っておくと、ノウアスフィアもエルゴスフィアも、時に（多くのハッカーたちは顔をしかめるけれど）「サイバースペース」と呼ばれる電子メディア内での仮想位置全体とはちがう。
To avoid confusion, however, it is important to note that neither the noosphere nor the ergosphere is the same as the totality of virtual locations in electronic media that is sometimes (to the disgust of most hackers) called `cyberspace'.

サイバースペースでの所有権はまったくちがった規則にしたがって統制されている。
Property there is regulated by completely different rules 

その規則は物質的な世界での規則のほうに、むしろ似ている
that are closer to those of the material substratum

――基本的には、その「サイバースペース」の一部を宿しているメディアやマシンを所有している人物が、そのサイバースペースを結果的に所有していることになる。
?essentially, he who owns the media and machines on which a part of `cyberspace' is hosted owns that piece of cyberspace as a result.

ロック的な構造は、オープンソースのハッカーたちがその慣習をまもるのは、なにか自分たちの努力からの、一種の期待収益を守ろうとしているからだろうと強く示唆している。
The Lockean logic of custom suggests strongly that open-source hackers observe the customs they do in order to defend some kind of expected return from their effort.

この収益は、プロジェクト開墾の努力や「所有権の連鎖」を記録したバージョン履歴を維持するコスト、そして捨て子になったプロジェクトを占拠するまでに公的な通達を出してしばらく待つという時間コストよりもずっと大きなものでなくてはならない。
The return must be more significant than the effort of homesteading projects, the cost of maintaining version histories that document `chain of title', and the time cost of making public notifications and waiting before taking adverse possession of an orphaned project.

さらに、オープンソースからの「収益」は単なるソフトの利用価値以上のものでなきゃならない。
Furthermore, the `yield' from open source must be something more than simply the use of the software,

プロジェクトの分裂によってダメになったり減ったりしてしまうようなものでなければ。
something else that would be compromised or diluted by forking.

もし利用価値だけが問題なら、分裂に対するタブーはないし、オープンソースの所有権も土地所有権とは似てもにつかないはずだ。
If use were the only issue, there would be no taboo against forking, and open-source ownership would not resemble land tenure at all.

事実、既存のオープンソース・ライセンスから導かれるのは、こういう（利用価値だけが唯一の収益となる）別世界だ。 
In fact, this alternate world (where use is the only yield, and forking is unproblematic) is the one implied by existing open-source licenses.

いくつか候補としてあがる収益はすぐに却下できる。
We can eliminate some candidate kinds of yield right away.

ネット接続上では有効な脅しがかけられないので、権力追求はまったく成り立たない。
Because you can't coerce effectively over a network connection, seeking power is right out.

同じく、オープンソース文化はお金や内的な稀少性経済に類するものは持っていないから、ハッカーたちも物質的な富とあまり似たものを追求していることはあり得ない。
Likewise, the open-source culture doesn't have anything much resembling money or an internal scarcity economy, so hackers cannot be pursuing anything very closely analogous to material wealth (e.g. the accumulation of scarcity tokens).

ただし、オープンソース活動で人々がもっと金持ちになれる方法が一つなくはない
There is one way that open-source activity can help people become wealthier, however

――そしてそれは、その実際に動機に貴重なヒントを与えてくれるものではある。
?a way that provides a valuable clue to what actually motivates it.

しばしば、ハッカー文化で人が獲得した評判は実世界でも反映されて、それが経済的に意味をもってくることがある。
Occasionally, the reputation one gains in the hacker culture can spill over into the real world in economically significant ways.

もっといい仕事が得られるとか、コンサルタント契約が手に入るとか、あるいは本の執筆依頼がくるとか。 
It can get you a better job offer, or a consulting contract, or a book deal.

でもこの種の副作用は、よくいってもまれだし、ほとんどのハッカーにとっては副次的なものでしかない。
This kind of side effect, however, is at best rare and marginal for most hackers;

唯一の説明として説得力を持つには、多くのハッカーにはあまりに縁遠いものだ。
far too much so to make it convincing as a sole explanation, 

それにハッカーたちはなんども、自分たちは金のためにやってるんじゃない、理想と愛のためにやってるんだ、と主張している。
まあこれは割り引いてきくにしても。 
even if we ignore the repeated protestations by hackers that they're doing what they do not for money but out of idealism or love.

でも、こういう経済的な副作用が処理されるやり方は検討する価値がある。
However, the way such economic side effects are mediated is worth examination.

これから、オープンソース文化そのもののなかでの評判の力学だけでも、かなりの説明力があることを見てみよう。
Next we'll see that an understanding of the dynamics of reputation within the open-source culture itself has considerable explanatory power.


6　贈与経済としてのハッカー文化
The Hacker Milieu as Gift Culture

オープンソース文化での評判の役割を理解するには、歴史から離れて文化人類学と経済学に深入りし、交換の文化と贈与の文化のちがいを検討してみると役に立つ。
To understand the role of reputation in the open-source culture, it is helpful to move from history further into anthropology and economics, and examine the difference between exchange cultures and gift cultures.
 
人間は、社会的地位のために競争しようという生まれながらの衝動がある。
Human beings have an innate drive to compete for social status;

それはヒトの進化の歴史のなかでからだに刻み込まれているんだ。
it's wired in by our evolutionary history.

その歴史のうち、農業の発明に先立つ 90％ を通じて、ぼくたちの先祖は小さな遊牧式狩猟採集集団をつくって暮らしていた。
For the 90% of hominid history that ran before the invention of agriculture, our ancestors lived in small nomadic hunter-gatherer bands.

地位の高い個人は、一番健康な伴侶と最高の食料へのアクセスを手に入れた。
High-status individuals (those most effective at informing coalitions and persuading others to cooperate with them) got the healthiest mates and access to the best food.

この地位への衝動は、おもに生存に必要な財の稀少性の度合いに応じて、いろいろな形であらわれてくる。 
This drive for status expresses itself in different ways, depending largely on the degree of scarcity of survival goods.

人間が持つ組織化のほとんどの方法は、希少性と欲求に対する適応行動だ。
Most ways humans have of organizing are adaptations to scarcity and want.

それぞれの方法は、社会的地位を獲得する別々の手段を持っている。 
Each way carries with it different ways of gaining social status.

一番簡単な方法は 上意下達方式（command hierarchy）だ。
The simplest way is the command hierarchy.

上意下達方式では、稀少な財の配分は一つの中央権力が行って、それが軍事力でバックアップされる。
In command hierarchies, scarce goods are allocated by one central authority and backed up by force.

上意下達方式は、規模の変化への適応力（スケーラビリティ）がものすごくとぼしい[Mal]。
Command hierarchies scale very poorly [Mal];

大きくなるにつれて、ますます横暴で非効率になってゆく。
they become increasingly brutal and inefficient as they get larger.

このため、大家族以上の上意下達方式はほぼかならずといっていいほど、別のかたちのもっと大きな経済に寄生する存在でしかない。
For this reason, command hierarchies above the size of an extended family are almost always parasites on a larger economy of a different type.

上意下達方式では、社会的地位はおもに恐喝力へのアクセス能力によって決まってくる。 
In command hierarchies, social status is primarily determined by access to coercive power.

ぼくたちの社会はもっぱら交換経済だ。
Our society is predominantly an exchange economy.

これは財の希少性に対する洗練された適応方式で、規模の変化にもよく適応する。
This is a sophisticated adaptation to scarcity that, unlike the command model, scales quite well.

稀少な財の配分は、交換と自発的な協力によって非中心的に行われる
Allocation of scarce goods is done in a decentralized way through trade and voluntary cooperation

（そして実は、競争の欲望がもたらす最大の効果は協力行動を生み出すことだ）。
(and in fact, the dominating effect of competitive desire is to produce cooperative behavior).

交換経済では、社会的地位はおもにもの（必ずしも物質的なものとは限らない）のコントロールの大小で決まる。 
In an exchange economy, social status is primarily determined by having control of things (not necessarily material things) to use or trade.

ほとんどの人は、この二つについては説明されるまでもなく精神的なモデルを持っているし、それらがどう相互に機能するかもわかっている。
Most people have implicit mental models for both of the above, and how they interact with each other.

政府や軍、ギャング集団などは、ぼくたちが「自由市場」とよぶもっと大きな交換経済に寄生している上意下達システムだ。
Government, the military, and organized crime (for example) are command hierarchies parasitic on the broader exchange economy we call `the free market'.

しかしながら、このどちらともまったくちがっていて、人類学者たち以外はあまり認知されていない第三のモデルがあるんだ。
There's a third model, however, that is radically different from either and not generally recognized except by anthropologists;

これが贈与の文化だ。 
the gift culture.

贈与文化は、希少性ではなく過剰への適応だ。
Gift cultures are adaptations not to scarcity but to abundance.

それは生存に不可欠な財について、物質的な欠乏があまり起きない社会で生じる。
They arise in populations that do not have significant material-scarcity problems with survival goods.

穏和な気候と豊富な食料を持った経済圏の原住民の間には、贈与経済が見られる。
We can observe gift cultures in action among aboriginal cultures living in ecozones with mild climates and abundant food. 

ぼくたち自身の社会でも、一部の層では観察される。
We can also observe them in certain strata of our own society,

たとえばショービジネスや大金持ちの間でだ。 
especially in show business and among the very wealthy.

過剰は上意下達関係を維持困難にして、交換による関係をほとんど無意味なゲームにしてしまう。
Abundance makes command relationships difficult to sustain and exchange relationships an almost pointless game.

贈与の文化では、社会的なステータスはその人がなにをコントロールしているかではなく、その人がなにをあげてしまうかで決まる。
In gift cultures, social status is determined not by what you control but by what you give away. 

だからクワキトルの酋長はポトラッチ・パーティーを開く。
Thus the Kwakiutl chieftain's potlach party.

億万長者は派手にフィランソロフィー活動をして、しかもそれをひけらかすのが通例だ。
Thus the multi-millionaire's elaborate and usually public acts of philanthropy. 

そしてハッカーたちは、長時間の労力をそそいで、高品質のオープンソース・ソフトをつくる。 
And thus the hacker's long hours of effort to produce high-quality open-source code.

というのも、こうして検討すると、オープンソース・ハッカーたちの社会がまさに贈与文化であるのは明らかだからだ。
For examined in this way, it is quite clear that the society of open-source hackers is in fact a gift culture.

そのなかでは「生存に関わる必需品」――つまりディスク領域、ネットワーク帯域、計算能力など――が深刻に不足するようなことはない。
Within it, there is no serious shortage of the `survival necessities'?disk space, network bandwidth, computing power.

ソフトは自由に共有される。
Software is freely shared.

この豊富さが産み出すのは、競争的な成功の尺度として唯一ありえるのが仲間内の評判だという状況だ。 
This abundance creates a situation in which the only available measure of competitive success is reputation among one's peers.

でもこの観察は、それだけではハッカー文化に見られる特徴を説明するのに十分とはいえない。
This observation is not in itself entirely sufficient to explain the observed features of hacker culture, however.

クラッカー d00dz は、ハッカーと同じ（電子）メディア上に息づく贈与文化を持っているけれど、その行動は大きくちがっている。
The crackers and warez d00dz have a gift culture that thrives in the same (electronic) media as that of the hackers, but their behavior is very different.

このグループの性行は、ハッカーよりもずっと強くて排外的だ。
The group mentality in their culture is much stronger and more exclusive than among hackers.

共有するよりは秘密を隠匿したがる。
They hoard secrets rather than sharing them;

クラッカーグループでは、ソフトクラック用のソースのない実行ファイルが出回ることのほうが、そのやりかたを教えるヒントが出回ることより多い。
one is much more likely to find cracker groups distributing sourceless executables that crack software than tips that give away how they did it.

（この行動についての、d00dz集団内部からの観点については [LW] を参照。） 
(For an inside perspective on this behavior, see [LW]).

これが示しているのは、もちろん言うまでもなく自明だろうけれど、贈与文化の運用方法は一つじゃないってことだ。
What this shows, in case it wasn't obvious, is that there is more than one way to run a gift culture.

ぼくはハッカー文化の歴史について、別のところでまとめたことがある[HH]。
History and values matter. I have summarized the history of the hacker culture in A Brief History of Hackerdom[HH];

それがいまの行動を形成していった方法は、謎なんかじゃない。
the ways in which it shaped present behavior are not mysterious.

ハッカーたちは、自分たちの文化を規定するにあたり、自分たちの競合が行われる形式の集合を利用したわけだ。
Hackers have defined their culture by a set of choices about the form that their competition will take.

この論文ではこの先、その形式を検討することにしよう。
It is that form that we will examine in the remainder of this essay.


7　ハッキングのよろこび
The Joy of Hacking

ついでに言っておくと、この「評判ゲーム」の分析をするからといって、別に美しいソフトを設計してそれをうまく動かすことの芸術的な満足を軽んじたり、無視したりするつもりはない。
In making this `reputation game' analysis, by the way, I do not mean to devalue or ignore the pure artistic satisfaction of designing beautiful software and making it work.

ぼくたちみんな、こういう満足は経験しているし、そのために生きているようなとこさえある。
Hackers all experience this kind of satisfaction and thrive on it. 

そういうのがだいじな動機になっていないような人間は、そもそもハッカーになったりはしない。
People for whom it is not a significant motivation never become hackers in the first place,

ちょうど、音楽を好きでない人間が作曲家になったりしないのと同じことだ。 
just as people who don't love music never become composers.

だったら、職人気質の純粋なよろこびが主な動機となっているハッカー行動のモデルを考えたほうがいいのかな？　
So perhaps we should consider another model of hacker behavior in which the pure joy of craftsmanship is the primary motivation.

この「職人気質」モデルは、職人気質発揮機会最大化とその結果の最大化を達成する手段としてハッカー慣習を説明できなくてはならない。
This `craftsmanship' model would have to explain hacker custom as a way of maximizing both the opportunities for craftsmanship and the quality of the results.

これは、「評判ゲーム」モデルと対立したり、別の結果を示唆したりしているだろうか？ 
Does this conflict with or suggest different results than the reputation game model?

そうでもない。
Not really.

「職人気質」モデルを検討すると、結局はハッカー社会を贈与文化のように動かしている制約条件と同じ問題に戻ってくることになる。
In examining the craftsmanship model, we come back to the same problems that constrain hackerdom to operate like a gift culture.

品質をはかる尺度がなければ、品質を最大化なんかできないだろう。
How can one maximize quality if there is no metric for quality?

希少性の経済が働かないなら、仲間内の評価以外の尺度なんかありえないだろう。
If scarcity economics doesn't operate, what metrics are available besides peer evaluation?

どうも、職人気質文化はけっきょくのところ、評判ゲームを通じて組織されるしかないんじゃないか
It appears that any craftsmanship culture ultimately must structure itself through a reputation game

――そして中世ギルド以来の多くの職人文化では、まさにこの力学が機能しているのがうかがえるんだ。 
?and, in fact, we can observe exactly this dynamic in many historical craftsmanship cultures from the medieval guilds onwards.

ある重要な一点で、「職人気質」モデルは「贈与文化」モデルより弱い。
In one important respect, the craftsmanship model is weaker than the `gift culture' model;

それだけでは、この論文のきっかけとなったそもそもの矛盾は説明できない。 
by itself, it doesn't help explain the contradiction we began this essay with.

最後に、「職人気質」的な動機はそれ自体として、ぼくたちが考えたがるほどは評判ゲームからかけ離れたものじゃないかもしれない。
Finally, the craftsmanship motivation itself may not be psychologically as far removed from the reputation game as we might like to assume.

自分の書いたみごとなプログラムが引き出しに鍵をかけてしまいこまれていたらどうだろう。
Imagine your beautiful program locked up in a drawer and never used again.

一方、それがうまく使われてみんなに喜ばれていたらどうだろう。
Now imagine it being used effectively and with pleasure by many people. 

どっちのほうがきみとしては満足だろうか？ 
Which dream gives you satisfaction?

とはいっても、職人気質モデルは捨てないでおこう。
Nevertheless, we'll keep an eye on the craftsmanship model.

それは多くのハッカーにとって直感的にわかりやすいし、個人行動のある面はすごくうまく説明してくれるから。[HT] 
It is intuitively appealing to many hackers, and explains some aspects of individual behavior well enough [HT].

この論文の初版を公開してから、匿名の評者がこう述べた。
After I published the first version of this essay on the Internet, an anonymous respondent commented:

「意図的に評判を得ようとして作業はしないかもしれないけれど、でも評判というのは仕事をちゃんとしていれば、本当に利益をもたらす真の見返りなんだよ」。
``You may not work to get reputation, but the reputation is a real payment with consequences if you do the job well.''

これは細かいが重要なポイントだ。
This is a subtle and important point.

評判インセンティブは、職人がそれを認識しているかどうかによらず、機能し続ける。
The reputation incentives continue to operate whether or not a craftsman is aware of them;

だから究極的には、ハッカーが自分の行動を評判ゲームの一部として理解しているかどうかによらず、かれの行動はそのゲームに左右されることになる。
thus, ultimately, whether or not a hacker understands his own behavior as part of the reputation game, his behavior will be shaped by that game.

ほかの反応としては、同業者の中での名誉という報酬とハッキングの喜びが、生活維持に必要な水準以上になっているということを、人間の動機づけに関するアイブラハム・マズローの有名な「価値のヒエラルキー」モデルと関連づけている（[MH]）。
Other respondents related peer-esteem rewards and the joy of hacking to the levels above subsistence needs in Abraham Maslow's well-known `hierarchy of values' model of human motivation [MH].

この観点からすると、ハッキングの喜びというのは自己実現ないし高次ニーズであって、低次のニーズ（たとえば肉体的な安定性や「帰属感」や同業者の中の名誉など）が最低限は満たされない限り、一貫性を持った形で表明されることはないのだ、ということになる。
On this view, the joy of hacking fulfills a self-actualization or transcendence need, which will not be consistently expressed until lower-level needs (including those for physical security and for `belongingness' or peer esteem) have been at least minimally satisfied.

だから評判ゲームは、ハッキングの喜びがまさに個人の主要動機となれるような社会的文脈を提供するにあたって、とても重要なものとなるかもしれない。
Thus, the reputation game may be critical in providing a social context within which the joy of hacking can in fact become the individual's primary motive. 


8　評判のさまざまな相貌
The Many Faces of Reputation

なぜ仲間内の評判（名声）が勝ち取るに足るものなのかについては、あらゆる贈与文化に共通する理由がある。 
There are reasons general to every gift culture why peer repute (prestige) is worth playing for:

まず第一にいちばん明らかな点だけれど、仲間内のよい評判はそれ自体が重要な報酬だからだ。
First and most obviously, good reputation among one's peers is a primary reward.

ぼくたちは、まえにふれた進化上の理由から、そう感じるようにつくられている
We're wired to experience it that way for evolutionary reasons touched on earlier.

（多くの人々は、名声に対する欲求をいろいろ昇華させて、はっきりした仲間グループと結びつかない「名誉」「倫理的誠実さ」「慈悲」などにリダイレクトすることを学ぶ。
(Many people learn to redirect their drive for prestige into various sublimations that have no obvious connection to a visible peer group, such as ``honor'', ``ethical integrity'', ``piety'' etc.;

でもだからといって、根っこのメカニズムは変わらない）。 
this does not change the underlying mechanism.)

第二に、名声は他人の注目を集めて協力を得るのにすごく有効な方法だ
（そして純粋な贈与経済では、唯一無二の方法だ）。
Secondly, prestige is a good way (and in a pure gift economy, the only way) to attract attention and cooperation from others.

もしある人が、気前よく、知的で、公正で、指導力があるとかいったよい資質で有名だったら、その人と関わりを持つことでメリットがあると他人に説得するのはずっと簡単になる。
If one is well known for generosity, intelligence, fair dealing, leadership ability, or other good qualities, it becomes much easier to persuade other people that they will gain by association with you.
 
第三に、もし贈与経済が交換経済や上意下達方式と接触していたり混じり合ったりしていた場合にも、評判がそっちに持ち越されて、もっと高い地位を得る役にたつかもしれない。 
Thirdly, if your gift economy is in contact with or intertwined with an exchange economy or a command hierarchy, your reputation may spill over and earn you higher status there.

こうした一般的な理由に加えて、ハッカー文化ではその特殊な条件のおかげで「現実世界」の贈与文化にくらべて名声がもっと価値の高いものになっている。
Beyond these general reasons, the peculiar conditions of the hacker culture make prestige even more valuable than it would be in a `real world' gift culture.
 
「特殊な条件」の最大のものは、ある人があげる成果物（あるいは別の解釈をするなら、その人の贈る労力と時間の目に見えるしるし）がとても複雑であることだ。
The main `peculiar condition' is that the artifacts one gives away (or, interpreted another way, are the visible sign of one's gift of energy and time) are very complex.

その価値は、物質的な贈り物や交換経済のお金とはくらべものにならないほど不明確だ。
Their value is nowhere near as obvious as that of material gifts or exchange-economy money.

よい贈り物とろくでもない贈り物を客観的に区別するのはずっとむずかしい。
It is much harder to objectively distinguish a fine gift from a poor one. 

したがって、何かを贈る人が地位を求めて成功するかどうかは、仲間うちの批評的な判断に繊細に関わってくる。 
Accordingly, the success of a giver's bid for status is delicately dependent on the critical judgement of peers.

もう一つ特異なのは、オープンソース文化が比較的純粋であることだ。
Another peculiarity is the relative purity of the open-source culture.

ほとんどの贈与文化はまざりものが入っている
Most gift cultures are compromised

――奢侈品の交易などで交換経済が入り込んでいたり、家族や部族集団みたいな上意下達関係が入っていたりする。
?either by exchange-economy relationships such as trade in luxury goods, or by command-economy relationships such as family or clan groupings.

オープンソースはこれに類するものはほとんどないと言っていい。
No significant analogues of these exist in the open-source culture; 

だから、仲間内の評判以外に地位を獲得する方法は、まずない。
thus, ways of gaining status other than by peer repute are virtually absent.


9　所有権と評判によるインセンティブ
Ownership Rights and Reputation Incentives

さてここまできたら、これまでの分析をひとまとめにして、ハッカーの所有権慣習をもっと統一的にとらえてみよう。
We are now in a position to pull together the previous analyses into a coherent account of hacker ownership customs.

ノウアスフィアの開墾からの収益はわかった。
We understand the yield from homesteading the noosphere now;

それはハッカーの贈与文化における仲間内の評判だ。
it is peer repute in the gift culture of hackers, 

そしてそれにともなう二次的なメリットや副作用もついてくる。 
with all the secondary gains and side effects that implies.

この理解にもとづいて、ぼくたちはハッカー社会のロック流の所有権慣習が評判上のインセンティブを最大化する手段なんだと分析できる。
From this understanding, we can analyze the Lockean property customs of hackerdom as a means of maximizing reputation incentives;

つまり、仲間内のクレジットがしかるべき人物に帰属して、それ以外のところには行かないようにするわけだ。 
of ensuring that peer credit goes where it is due and does not go where it is not due.

これまで検討した3つのタブーは、この分析に基づけば完全に筋が通ってくる。
The three taboos we observed above make perfect sense under this analysis.

他人が自分の作業を不当に横取りしたり、変な加工をしたりすれば、自分の評判が不当に落ちることになる。
One's reputation can suffer unfairly if someone else misappropriates or mangles one's work; 

こういうタブー（そして関連した慣習）は、そういう事態を避けようとするものだ。
these taboos (and related customs) attempt to prevent this from happening. 


(Or, to put it more pragmatically, hackers generally refrain from forking or rogue-patching others' projects in order to be able to deny legitimacy to the same behavior practiced against themselves.)


プロジェクトの分裂がよくないのは、分裂以前に貢献していた人たちが評価上のリスクにさらされることになるからだ。
Forking projects is bad because it exposes pre-fork contributors to a reputation risk 

このリスクをなくすには、かれらは分裂後の両方のプロジェクトで同時に活動しなくてはならない
they can only control by being active in both child projects simultaneously after the fork.

（これは一般にややこしすぎたり、実践するのがむずかしすぎたりする）。 
(This would generally be too confusing or difficult to be practical.)

非公式パッチを配布する（あるいはもっとひどい場合には非公式バイナリを配布する）と、所有者たちは不公正な評判上のリスクにさらされる。
Distributing rogue patches (or, much worse, rogue binaries) exposes the owners to an unfair reputation risk. 

公式コードが完璧であっても、所有者たちはパッチのバグのおかげで不評をかうはめになりかねない（とはいえ、[RP]を参照のこと）。 
Even if the official code is perfect, the owners will catch flak from bugs in the patches (but see [RP]).

こっそりだれかの名前をプロジェクトからはずすことは、文化的な文脈では究極の犯罪だ。
Surreptitiously filing someone's name off a project is, in cultural context, one of the ultimate crimes.

それは犠牲者の贈り物を盗み取って、泥棒のものとして提示するということだからだ。 
Doing this steals the victim's gift to be presented as the thief's own.

もちろん、プロジェクトをフォークさせたり非公式パッチを配布させたりするのは、もとの開発者グループの評判を直接攻撃することにもなる。
Of course, forking a project or distributing rogue patches for it also directly attacks the reputation of the original developer's group.

もしぼくがきみのプロジェクトをフォークさせたり非公式パッチを配布したりすると、ぼくはつまりこう言っていることになる：
If I fork or rogue-patch your project, I am saying:

「きみはまちがった決定を下した。
"you made a wrong decision

（プロジェクトを、ぼくが導いているような方向に導いていない）」　
by failing to take the project where I am taking it";

そしてぼくのフォーク版を使う人間はみんな、ぼくのきみに対する挑戦を支持していることになる。
and anyone who uses my forked variation is endorsing this challenge.

でもこれ自体は、フェアな挑戦だ。
But this in itself would be a fair challenge,

極端ではあるにしても。
albeit extreme; 

これは同業者（ピア）レビューの究極の形だ。
it's the sharpest end of peer review.

だからこれは、これだけではタブーの説明としては不十分だ。
It's therefore not sufficient in itself to account for the taboos,

それを強化するものであるのは確かだけれど。 
though it doubtless contributes force to them.

このタブーの３つとも、被害者個人のレベルで害をもたらすとともに、オープンソースコミュニティに全体として害を及ぼすものだ。
All three taboo behaviors inflict global harm on the open-source community as well as local harm on the victim(s).

これらは、各潜在貢献者たちが、自分の贈り物・生産的行動に報酬が与えられるという可能性の認識を減らすことで、暗黙のうちに全コミュニティに害をなすことになる。
Implicitly they damage the entire community by decreasing each potential contributor's perceived likelihood that gift/productive behavior will be rewarded. 

この三つのタブーのうち２つに対しては、別の説明候補があることは理解する必要がある。 
It's important to note that there are alternate candidate explanations for two of these three taboos.

まず、ハッカーはプロジェクト分裂に対する反感について、そんなことになったら子プロジェクトは当分はある程度似たような道をたどるから、作業が二重化して無駄だろ、と説明する。
First, hackers often explain their antipathy to forking projects by bemoaning the wasteful duplication of work it would imply as the child products evolve on more-or-less parallel courses into the future.

また分裂は共同開発者コミュニティを分裂させることが多く、だからどちらの子プロジェクトも、親より脳味噌が少なくなる点を指摘する人もいるだろう。 
They may also observe that forking tends to split the co-developer community, leaving both child projects with fewer brains to use than the parent.

ある人のコメントだけれど、分裂の結果の子プロジェクトが、長期的にそれなりの「市場シェア」をもって一つ以上生き延びることは滅多にない。
A respondent has pointed out that it is unusual for more than one offspring of a fork to survive with significant `market share' into the long term.

これはあらゆる関係者が協力して分裂を避けるインセンティブを強化する。
This strengthens the incentives for all parties to cooperate and avoid forking,

だれが負け組に入るかを知るのはむずかしいし、負け組では自分たちの仕事の大半があっさり消えたり、無名なままで放置されたりすることになるからだ。
because it's hard to know in advance who will be on the losing side and see a lot of their work either disappear entirely or languish in obscurity. 


It has also been pointed out that the simple fact that forks are likely to produce contention and dispute is enough to motivate social pressure against them.  
Contention and dispute disrupt the teamwork that is necessary for each individual contributor to reach his or her goals.


非公式パッチへの批判は、それがバグ追跡をものすごく難しくすることや、自前のバグを処理するだけでも手いっぱいな管理者の作業を、さらに増やす点などを観察したうえで説明されることが多い。
Dislike of rogue patches is often explained by the objection that they can create compatibility problems between the daughter versions, complicate bug-tracking enormously, and inflict work on maintainers who have quite enough to do catching their own mistakes.

こうした説明には、かなりの真実が含まれている。
There is considerable truth to these explanations, 

そしていずれも、ロック式所有権の論理を強化するためにそれなりの働きをしてくれる。
and they certainly do their bit to reinforce the Lockean logic of ownership.

でも知的にはおもしろいけれど、これはタブーが曲げられたり破られたりするきわめてまれな状況で、なぜこれほどの感情となわばり性が発揮されるのかという説明にはならない。
But while intellectually attractive, they fail to explain why so much emotion and territoriality gets displayed on the infrequent occasions that the taboos get bent or broken

しかもこれは、被害を受けた人々だけでなく、傍観者や見物人にもあてはまり、こういう人たちもかなり厳しい反応を示す。
?not just by the injured parties, but by bystanders and observers who often react quite harshly. 

作業の二重化に関する冷たい計算や、管理の面倒の話などでは、こういう観察される行動はどうしても説明できない。 
Cold-blooded concerns about duplication of work and maintainance hassles simply do not sufficiently explain the observed behavior.


そしてさらに、第三のタブーがある。
Then, too, there is the third taboo.

これを説明するのに、評判ゲーム分析以外にはなにも想像がつかない。
It's hard to see how anything but the reputation-game analysis can explain this.

このタブーが「そんなのフェアじゃないじゃん」という以上にはほとんど分析されないということは、それ自体が示唆的だ。
The fact that this taboo is seldom analyzed much more deeply than ``It wouldn't be fair'' is revealing in its own way,

これについては次の章で見る。
as we shall see in the next section.


10　エゴの問題
The Problem of Ego

この論文の冒頭で、ある文化の適応結果としての知識は、その意識的なイデオロギーと相反することも多い、と書いた。
At the beginning of this essay I mentioned that the unconscious adaptive knowledge of a culture is often at odds with its conscious ideology.

この大きな実例として、ロック式所有権慣習が、標準ライセンスに記載された意図に違反しているにもかかわらず、広く遵守されていることを見てきた。
We've seen one major example of this already in the fact that Lockean ownership customs have been widely followed despite the fact that they violate the stated intent of the standard licenses. 

この現象のおもしろい例が、評判ゲーム分析をハッカーたちと議論しているときにも観察できた。
I have observed another interesting example of this phenomenon when discussing the reputation-game analysis with hackers.

多くのハッカーたちはこの分析に難色を示し、自分たちの行動が仲間内の評判への欲望、あるいはその頃ぼくが浅い考えで使っていた名称では「エゴの満足」に動機づけられていると認めたがらなかった。
This is that many hackers resisted the analysis and showed a strong reluctance to admit that their behavior was motivated by a desire for peer repute or, as I incautiously labeled it at the time, `ego satisfaction'. 

これは、ハッカー文化についておもしろい点を示している。
This illustrates an interesting point about the hacker culture.

ハッカー文化は意識的にエゴ中心主義と、エゴに基づく動機づけを信用せずに軽蔑する。
It consciously distrusts and despises egotism and ego-based motivations;

自己宣伝は、コミュニティがそこから何か得るものがあるように見えるときでさえ、容赦なく批判されることが多い。
self-promotion tends to be mercilessly criticized, even when the community might appear to have something to gain from it.

これがあまりに極端になっていて、ハッカー文化の「大物」や部族長老たちは自分の地位を保つためには話し方を穏やかにして、あらゆる機会をとらえてユーモアをこめて自己卑下することが要求されるようになってしまっている。
So much so, in fact, that the culture's `big men' and tribal elders are required to talk softly and humorously deprecate themselves at every turn in order to maintain their status.

この態度がいかにして、明らかにほぼ完全にエゴに依存して機能するインセンティブ構造とからみあっているのかは、どうしても説明が必要となるところだ。
How this attitude meshes with an incentive structure that apparently runs almost entirely on ego cries out for explanation. 

もちろんその大きな部分は、欧米の「エゴ」に対する一般的に否定的な態度からきている。
A large part of it, certainly, stems from the generally negative Europo-American attitude towards `ego'.

多くのハッカーの文化マトリックスは、エゴの満足を求めるのは悪い（あるいは少なくとも大人げない）と教えている。
The cultural matrix of most hackers teaches them that desiring ego satisfaction is a bad (or at least immature) motivation;

そしてエゴはせいぜいがプリマドンナのみに許される奇矯な代物で、精神的な病理の兆候であることすら多い、と教わっている。
that ego is at best an eccentricity tolerable only in prima donnas and often an actual sign of mental pathology.

これを「仲間内の評判」や「自尊心」「プロ意識」「達成感」というふうに昇華して、はじめてうけいれられるものになるんだ、と。
Only sublimated and disguised forms like ``peer repute'', ``self-esteem'', ``professionalism'' or ``pride of accomplishment'' are generally acceptable.

ぼくたちの文化的伝承のこの部分の不健全な根っこについては、全く別のエッセイを書くことだってできる。
I could write an entire other essay on the unhealthy roots of this part of our cultural inheritance,

あるいは、ぼくたちが真に「無私の」動機を持っている（心理と行動面でのあらゆる証拠にもかかわらず）と信じ込むことによる、自己欺瞞の害についてだって別の文章が書けるだろう。
and the astonishing amount of self-deceptive harm we do by believing (against all the evidence of psychology and behavior) that we ever have truly `selfless' motives.

書いてもいいんだが、ぼくがやるまでもなく、「愛他主義」を破壊して、はっきり意識されない自己利益に還元することについては（その他のいろんな欠点はさておき）フリードリッヒ・ヴィルヘルム・ニーチェとエイン・ランドが、きわめて立派な作業をすでに残している。
Perhaps I would, if Friedrich Wilhelm Nietzsche and Ayn Rand had not already done an entirely competent job (whatever their other failings) of deconstructing `altruism' into unacknowledged kinds of self-interest. 

でもここでやってるのは道徳哲学でもなければ心理学でもないので、エゴが悪いものだという信仰から生じるちょっとした害を検討するにとどめよう。
But I am not doing moral philosophy or psychology here, so I will simply observe one minor kind of harm done by the belief that ego is evil, 

その害とはつまり、
which is this: 

そのおかげで多くのハッカーたちは自分の文化の社会力学を意識的に理解することが、感情的にむずかしくなってしまったという点だ。
it has made it emotionally difficult for many hackers to consciously understand the social dynamics of their own culture!

でも、この線での検討はまだ終わったわけじゃない。
But we are not quite done with this line of investigation.

目に見えてエゴだけからくる行動に対するタブーは、われわれを取り巻く文化にもあるけれど、それはハッカー（サブ）カルチャーでは極端に強化されていて、だからそれがハッカーたちにとっては、なにか一種の特殊な適応上の機能があるにちがいないとしか考えられない。
The surrounding culture's taboo against visibly ego-driven behavior is so much intensified in the hacker (sub)culture that one must suspect it of having some sort of special adaptive function for hackers.

その他多くの贈与文化、たとえば演劇人たちの同業者仲間や大金持ちの間では、このタブーはもっと弱いんだから！
Certainly the taboo is weaker (or nonexistent) among many other gift cultures, such as the peer cultures of theater people or the very wealthy.


11　謙虚さの美徳
The Value of Humility

ハッカー文化の報酬メカニズムにおいて名声が中心的なものだということがはっきりしたので、今度はなぜこの事実が半ば隠されて、ほとんど公認されないのが重要と思われていたのかを理解しなけりゃならない。
Having established that prestige is central to the hacker culture's reward mechanisms, we now need to understand why it has seemed so important that this fact remain semi-covert and largely unadmitted.

海賊ソフト文化との対比は示唆的だ。
The contrast with the pirate culture is instructive.

この文化では、地位を求めての行動は臆面なしで、これ見よがしですらある。
In that culture, status-seeking behavior is overt and even blatant.

この手のクラッカーたちは、「ゼロ・デイ・warez」（クラックされていないオリジナルバージョンがリリースされたその日に、クラックされたソフトを配布すること）をリリースして評判を勝ち取ろうとするけれど、でもそのやり方については口をつぐむ。
These crackers seek acclaim for releasing ``zero-day warez'' (cracked software redistributed on the day of the original uncracked version's release) but are closemouthed about how they do it.

この種の魔法使いどもは自分の小技を公開するのを嫌う。
These magicians don't like to give away their tricks.

だから結果として、クラッカー文化の知識ベースはごくゆっくりとしか成長しない。 
And, as a result, the knowledge base of the cracker culture as a whole increases only slowly.

ハッカーコミュニティでは、それとは対照的に、ある人の成果こそがその人の主張でもある。
In the hacker community, by contrast, one's work is one's statement.

ここには非常に厳格な能力主義（いちばんすぐれた職人性が勝つ）があって、そして品質は自ら語るべきだ（いや、語らなくてはいけない）という倫理が強く存在している。
There's a very strict meritocracy (the best craftsmanship wins) and there's a strong ethos that quality should (indeed must) be left to speak for itself.

いちばんすてきな自慢は、「とにかく動く」コードであり、そして有能なプログラマならだれでもこれがいいのがわかるだろうというものだ。
The best brag is code that ``just works'', and that any competent programmer can see is good stuff. 

だからハッカー文化の知識ベースは急速に拡大する。
Thus, the hacker culture's knowledge base increases rapidly.

エゴだけに基づく態度に対するタブーは、したがって生産性を増す。
The taboo against ego-driven posturing therefore increases productivity.

でも、これは副次的な効果にすぎない。
But that's a second-order effect;

ここで直接守られているのは、コミュニティの同業者評価システムの中での情報の品質だ。
what is being directly protected here is the quality of the information in the community's peer-evaluation system.

つまり、大仰な自慢や夜郎自大ぶりが抑圧されているのは、それが創造的、協調的な行動におけるだいじな信号をゆがめてしまうノイズのように作用しがちだからだ。
That is, boasting or self-importance is suppressed because it behaves like noise tending to corrupt the vital signals from experiments in creative and cooperative behavior.

これととてもよく似た理由のために、コードではなくその著者を攻撃するということは行われない。
For very similar reasons, attacking the author rather than the code is not done.

ここには、小さいながら大事な点があって、ぼくの論点を補強してくれる。
There is an interesting subtlety here that reinforces the point;

ハッカーたちは、イデオロギー上のちがいや個人的なちがいでおたがいをフレームしあうのは、ぜんぜんかまわないと思っている。
hackers feel very free to flame each other over ideological and personal differences,

でも、どんなハッカーでも、技術的な仕事について、ほかのハッカーの有能ぶりをおおっぴらに罵倒するのは、前例がない
but it is unheard of for any hacker to publicly attack another's competence at technical work 

（私的な批判でさえ、あまり見られないし、あってもかなり口ごもった感じで行われる）。
(even private criticism is unusual and tends to be muted in tone).

バグの追跡と批判は必ずプロジェクトの名前で行われ、個人の名前では行われない。
Bug-hunting and criticism are always project-labeled, not person-labeled.

さらに、開発者は過去のバグのことで自動的に責められたりはしない。
Furthermore, past bugs are not automatically held against a developer;

バグが修正されたということのほうが、そのバグがかつて存在したということよりも重要だと一般には考えられている。
the fact that a bug has been fixed is generally considered more important than the fact that one used to be there.

ある評者が述べたように、「Emacsのバグ」を直すことで自分の評判をあげる人はいるけれど「リチャード・ストールマンのバグ」をなおして評判を上げる人はいない
As one respondent observed, one can gain status by fixing `Emacs bugs', but not by fixing `Richard Stallman's bugs'

――そしてストールマンを批判するのに、修正済みの古いバグを根拠にするのは、とてもよくないこととされるだろう。 
?and it would be considered extremely bad form to criticize Stallman for old Emacs bugs that have since been fixed.

これは、アカデミズムの多くの部分ととてもおもしろい対照ぶりを示している。
This makes an interesting contrast with many parts of academia,

アカデミズムでは、欠陥があると思われる他人の成果をボロクソにするのは、評判を勝ち取る重要な方法の一つだ。
in which trashing putatively defective work by others is an important mode of gaining reputation.

ハッカー文化では、こうした行動はいささか強力にタブー視されている
In the hacker culture, such behavior is rather heavily tabooed

――それが強力すぎるために、そういう行動が存在しないということを、ぼく自身が思いつかなかったほどだ。
?so heavily, in fact, that the absence of such behavior did not present itself to me as a datum 

ちょっと変わった視点を持つ評者が、本論文発表から1年以上たって指摘してくれて、やっとはっきり気がついたほどだ！
until that one respondent with an unusual perspective pointed it out nearly a full year after this essay was first published!

能力に対する攻撃に関するタブー（アカデミズムとは異なる）は、威張ることについての（アカデミズムと共有された）タブーよりさらに多くを物語ってくれる。
The taboo against attacks on competence (not shared with academia) is even more revealing than the (shared) taboo on posturing, 

ハッカー世界とアカデミズム世界での、コミュニケーションのあり方のちがいや支持構造のちがいについて考えるとき、これが足がかりになるからだ。
because we can relate it to a difference between academia and hackerdom in their communications and support structures. 

ハッカー文化の贈与メディアは実体がなく、そこで使われるコミュニケーションの回線は感情的なニュアンスを表現するには乏しい。
The hacker culture's medium of gifting is intangible, its communications channels are poor at expressing emotional nuance, 

メンバー間のフェイス・トゥ・フェイスの接触は、例外的な現象であるほうが多い。
and face-to-face contact among its members is the exception rather than the rule. 

このため、ノイズに対する許容度はほかの贈与文化よりかなり低いし、これで能力に関する攻撃についてのタブー、かなりよく説明できるだろう。
This gives it a lower tolerance of noise than most other gift cultures, and goes a long way to explain both the taboo against posturing and the taboo against attacks on competence. 

ハッカーたちの能力についてのフレーム事例は、この文化の評判スコアボードを許容できないくらい乱すものなんだ。
Any significant incidence of flames over hackers' competence would intolerably disrupt the culture's reputation scoreboard.

同じようなノイズに対する脆弱さは、ハッカーコミュニティの部族の長老たちに要求される、公的な場での謙虚さも説明してくれる。
The same vulnerability to noise explains the model of public humility required of the hacker community's tribal elders.

長老たちは、傲慢さや尊大さに冒されていないと見られなくてはならない。
They must be seen to be free of boast and posturing

そうしないと、危険なノイズに対するタブーが維持されないからだ。[DC] 
so the taboo against dangerous noise will hold. [DC]

あたりが柔らかいのは、うまくいくプロジェクトの管理者になりたいときにも役に立つ。
Talking softly is also functional if one aspires to be a maintainer of a successful project;

その人は、自分がよい判断力を持っているとコミュニティに納得させなくてはならない。
one must convince the community that one has good judgement,

管理者の仕事のほとんどは、ほかの人のコードを判断する作業だからだ。
because most of the maintainer's job is going to be judging other people's code.

自分たちのコードの質が明らかに理解できないような人物に、自分の作業を貢献しようと思うやつはいない。
Who would be inclined to contribute work to someone who clearly can't judge the quality of their own code,

あるいは、プロジェクトの評判という収益を不公平に着服しようとしそうな行動がうかがえるようなヤツに？　
or whose behavior suggests they will attempt to unfairly hog the reputation return from the project?

潜在的な貢献者たちとしては、プロジェクトリーダに十分な謙虚さと気高さを求める。
Potential contributors want project leaders with enough humility and class 

そして客観的にみて正しいときにはこういえる人物であってほしい：
to be able to to say, when objectively appropriate,

「うん、たしかにそれは、ぼくのバージョンよりうまく動く。
``Yes, that does work better than my version,

そっちを使おう」
I'll use it''

そしてその際には、しかるべきところにクレジットを与えてくれる人物であってほしいんだ。 
?and to give credit where credit is due.

オープンソース界での謙虚な行動の理由としてもう一つあるのは、プロジェクトが「終わった」という印象をなるべく与えたくない、ということがある。
Yet another reason for humble behavior is that in the open source world, you seldom want to give the impression that a project is `done'.

そんな印象ができたら、潜在的な貢献者は、自分が必要とされていないような気分になるかもしれない。
This might lead a potential contributor not to feel needed.

自分の力を最大化しておくには、プログラムの現状について慎ましい態度をとることだ。
The way to maximize your leverage is to be humble about the state of the program.

自慢はコード自身にさせておいて、口では
If one does one's bragging through the code, and then says 

「ああちくしょう、このソフトはまだ x も y も z もできない、まだぜんぜんダメだ」と言えば、
``Well shucks, it doesn't do x, y, and z, so it can't be that good'', 

x、y、z 用のパッチはすぐに出てくることが多い。 
patches for x, y, and z will often swiftly follow.

最後にぼくは個人的に、一部の代表的ハッカーたちの自己卑下行動は、個人崇拝の対象となることに対する本物の（そして正当でなくはない）おそれからきているのを観察してきた。
Finally, I have personally observed that the self-deprecating behavior of some leading hackers reflects a real (and not unjustified) fear of becoming the object of a personality cult.

リーヌス・トーヴァルズとラリー・ウォールはどちらも、こうした忌避のはっきりした例をたくさん提供してくれる。
Linus Torvalds and Larry Wall both provide clear and numerous examples of such avoidance behavior.

まえにラリー・ウォールと夕食にでかけたとき、ぼくはこう冗談をたたいた。
Once, on a dinner expedition with Larry Wall, I joked

「ここで最高のハッカーはきみだ
``You're the alpha hacker here

――だからきみがレストランを選んでくれ」　
?you get to pick the restaurant''.

するとかれは、はっきりとたじろいだ。
He flinched noticeably.

もっともな話だ。
And rightly so;

共有した価値と、リーダの価値観とを区別できなくなったことで、ダメになってしまったコミュニティは多い。
failing to distinguish their shared values from the personalities of their leaders has ruined a good many voluntary communities,

このパターンについて、かれもリーヌスも思い知っているはずだ。
a pattern of which Larry and Linus cannot fail to be fully aware.

一方で、多くのハッカーはラリーの問題を自分も抱えてみたいものだと思うだろう。
On the other hand, most hackers would love to have Larry's problem, 

それを自分で認める勇気があればだけれど。
if they could but bring themselves to admit it.


12　評判ゲームモデルが持つ分野全体としての意義
Global Implications of the Reputation-Game Model

評判ゲーム分析は、一見するとわかりにくいかもしれない含蓄をもっと持っている。
The reputation-game analysis has some more implications that may not be immediately obvious.

その多くは、既存のプロジェクトに協力するより成功プロジェクトを創始するほうが名声が高まるという事実から派生するものだ。
Many of these derive from the fact that one gains more prestige from founding a successful project than from cooperating in an existing one.

また、既存のプロジェクトをだんだん改善させるような、「おれもおれも」式改良よりは、感動するほど独創的なプロジェクトのほうがポイントを稼ぎやすい。
One also gains more from projects that are strikingly innovative, as opposed to being `me, too' incremental improvements on software that already exists.

一方で作者以外のだれにも理解できない、あるいは作者にしかニーズのないソフトは、評判ゲームでは何の役にもたたないし、みんなに新しいプロジェクトを認識してもらうよりは、既存プロジェクトに貢献したほうが、高いポイントを稼ぎやすい。
On the other hand, software that nobody but the author understands or has a need for is a non-starter in the reputation game, and it's often easier to attract good notice by contributing to an existing project than it is to get people to notice a new one.

最後に、空っぽのニッチを埋めるよりは、すでに成功しているプロジェクトと競合するほうがずっとむずかしい。 
Finally, it's much harder to compete with an already successful project than it is to fill an empty niche.

したがって、ご近所（いちばん近い競合プロジェクト）からの最適な距離ってものがある。
Thus, there's an optimum distance from one's neighbors (the most similar competing projects).

近すぎればその成果物は「おれもおれも！」式の価値の低いものとなり、贈り物としては弱い
Too close and one's product will be a ``me, too!'' of limited value, a poor gift

（それなら既存プロジェクトに貢献する方がいい）。
(one would be better off contributing to an existing project).

あまりに離れすぎていたら、だれもその努力を利用できず、理解できず、そして重要性を理解することもできなくなる
Too far away, and nobody will be able to use, understand, or perceive the relevance of one's effort

（これまた贈り物としては弱い）。
(again, a poor gift).

これは、ノウアスフィアの開墾パターンの面で、物理的なフロンティアに散らばって入植する入植者たちといささか似たような光景をつくりだす
This creates a pattern of homesteading in the noosphere that rather resembles that of settlers spreading into a physical frontier

――ランダムではないが、散らばりかたの限られたフラクタルの波のようなパターンだ。
?not random, but like a diffusion-limited fractal.

プロジェクトは、フロンティア近くの機能的ギャップを埋めようとして創始される傾向が強い
Projects tend to get started to fill functional gaps near the frontier

（目新しさの誘惑に関する追加の議論については[NO]を見てほしい）。 
(see [NO] for further discussion of the lure of novelty).

一部のすごく成功したプロジェクトは「カテゴリーキラー」となる。
Some very successful projects become `category killers';

だれもその近くを開墾したいとは思わない。
nobody wants to homestead anywhere near them 

確立された基盤とはりあって、ハッカーたちの関心を求めるのはむずかしすぎるからだ。
because competing against the established base for the attention of hackers would be too hard.

そうでなければ独自のプロジェクトを創始するような人たちは、かわりに大きな成功したプロジェクトに拡張を加えるにとどまる。
People who might otherwise found their own distinct efforts end up, instead, adding extensions for these big, successful projects. 

古典的な「カテゴリーキラー」の例は GNU Emacs だ。
The classic `category killer' example is GNU Emacs;

その変種は、完全にプログラム可能なエディタの生態ニッチをあまりに完璧に埋めてしまったので、だれも 1980 年代初期以来、まったく異なるデザインなど試してみようとすらしない。
its variants fill the ecological niche for a fully-programmable editor so completely that no competitor has gotten much beyond the one-man project stage since the early 1980s.

かわりにそういう人は、Emacs のモードを書くんだ。 
Instead, people write Emacs modes.

全体的にみて、この二つの傾向（ギャップ埋めとカテゴリーキラー）のおかげで、時代を追うにつれてのプロジェクト開始傾向、おおむね予想がつく。
Globally, these two tendencies (gap-filling and category-killers) have driven a broadly predictable trend in project starts over time.

1970 年代に出回っていたほとんどのオープンソースはおもちゃとデモだった。
In the 1970s most of the open source that existed was toys and demos.

1980 年代には、開発ツールとインターネットツールが主流。
In the 1980s the push was in development and Internet tools.

そして 1990 年代になると、中心は OS に移った。
In the 1990s the action shifted to operating systems.

いずれの場合にも、それ以前の分野の可能性がほとんど尽きてしまって、新しいもっと難しいレベルの問題に矛先が移っている。
In each case, a new and more difficult level of problems was attacked when the possibilities of the previous one had been nearly exhausted.
 
このトレンドは、近未来にとっておもしろい意味を持っている。
This trend has interesting implications for the near future.

1998 年頭には、Linux はどうやら「フリー OS」というニッチにとってカテゴリーキラーとなったような感じだ
In early 1998, Linux looks very much like a category-killer for the niche `open-source operating systems'

――かつてなら競合 OS を書いたかもしれない人たちは、いまでは Linux のデバイスドライバや拡張を書いている。
?people who might otherwise write competing operating systems are now writing Linux device drivers and extensions instead.

そしてこの文化がこれまで想像してきたようなローレベルのツールは、ほとんどすべてオープンソースで存在している。
And most of the lower-level tools the culture ever imagined having as open source already exist.

あとはなにが残っているだろう？ 
What's left?

アプリケーションだ。
Applications.

2000 年が近づくにつれて、オープンソース開発がますます最後の処女地に向かってシフトすると予言してもよさそうだ。
As the third millenium begins, it seems safe to predict that open-source development effort will increasingly shift towards the last virgin territory

その処女地とはすなわち、技術オンチのためのプログラムだ。
?programs for non-techies.

はっきりした最初のしるしとしては、GIMPの開発がある。
A clear early indicator was the development of GIMP,

これはフォトショップに似た画像処理ソフトで、過去 10 年には商業アプリケーションの独壇場と思われていた、エンドユーザにやさしい GUI を持っている。
the Photoshop-like image workshop that is open source's first major application with the kind of end-user?friendly GUI interface considered de rigueur in commercial applications for the last decade.

別の示唆としては、アプリケーション用ツールキットのプロジェクトを取り巻いているにぎやかさが指摘できるだろう。
Another is the amount of buzz surrounding application-toolkit projects 

KDE や GNOME なんかだ。 
like KDE and GNOME.

この論文の評者の一人は、開墾のアナロジーを使うことで、ハッカーたちがなぜマイクロソフトの「抱き込んで拡張」方針、つまりインターネットプロトコルを複雑化して閉じたものにしてしまおうという方針に対し、なぜあれほど露骨な怒りをもって反応するのか、ということが説明できることを指摘している。
A respondent to this essay has pointed out that the homesteading analogy also explains why hackers react with such visceral anger to Microsoft's ``embrace and extend'' policy of complexifying and then closing up Internet protocols.

ハッカー文化はほとんどのクローズドなソフトと共存できる。
The hacker culture can coexist with most closed software; 

たとえば Adobe Photoshop があっても、そのオープンソース版とも言うべき GIMP 周辺の領域が極端に魅力がなくなるわけではない。
the existence of Adobe Photoshop, for example, does not make the territory near GIMP (its open-source equivalent) significantly less attractive.

でも、マイクロソフトがプロトコルを「脱・共有化」[HD]してしまって、マイクロソフト自身のプログラマしかそれを使うソフトが書けないようにしてしまったら、マイクロソフトは単に独占を拡大して顧客に害を与えるだけではすまない。
But when Microsoft succeeds at de-commoditizing [HD] a protocol so that only Microsoft's own programmers can write software for it, they do not merely harm customers by extending their monopoly;

ハッカーたちが開墾して耕作すべきノウアスフィアの量と質を低下させることにもなる。
they also reduce the amount and quality of noosphere available for hackers to homestead and cultivate. 

ハッカーたちがマイクロソフトの戦略を「プロトコル汚染」と呼ぶのも当然だろう。
No wonder hackers often refer to Microsoft's strategy as ``protocol pollution''; 

かれらは、自分の農業用水に毒を入れようとしている人を見つけた農夫たちとまったく同じ反応を示しているわけだ！ 
they are reacting exactly like farmers watching someone poison the river they water their crops with!

最後に、評判ゲーム分析はよく挙げられる格言を説明してくれる。
Finally, the reputation-game analysis explains the oft-cited dictum that you do not

人はハッカーを名乗ればハッカーになれるわけじゃない
become a hacker by calling yourself a hacker

――ほかのハッカーにハッカーと呼ばれた時点で、人はハッカーになるんだ。
?you become a hacker when other hackers call you a hacker [KN].

この観点から見た「ハッカー」というのは、技術的な能力を持っていて、しかも評判ゲームがどう機能するかわかっているということを（贈り物を提供することで）実証した人間だ。
A `hacker', considered in this light, is somebody who has shown (by contributing gifts) that he or she both has technical ability and understands how the reputation game works.

この判断は、おもに認知と文化順応に基づくもので、すでにこの文化の中にしっかり入った人々からしか与えられない。
This judgement is mostly one of awareness and acculturation, and can be delivered only by those already well inside the culture.


13　どれほどすばらしい贈り物？
How Fine a Gift? 

ハッカー文化が貢献を評価して、それに対する仲間内の評判を戻すやり方には、一貫したパターンがある。
There are consistent patterns in the way the hacker culture values contributions and returns peer esteem for them.

以下のような規則はすぐに見分けられる：
It's not hard to observe the following rules:

1. 期待させられたほどきちんと機能しないなら、それはダメ
1. If it doesn't work as well as I have been led to expect it will, it's no good

――どんなに巧妙でオリジナリティ豊かなものであっても。
?no matter how clever and original it is.

「期待させられたほど」という部分に注意。
Note the phrase `led to expect'.

このルールは、完全無欠を求めるものではない。
This rule is not a demand for perfection;

ベータ版や実験ソフトには、もちろんバグがあってもいい。
beta and experimental software is allowed to have bugs.

これは、プロジェクトの段階や開発者の主張をもとに、リスクを正確に評価できるようにしろ、と求めているわけだ。
It's a demand that the user be able to accurately estimate risks from the stage of the project and the developers' representations about it.

このルールのおかげで、オープンソースソフトはずいぶん長い間ベータ版のままになっていて、とんでもないバグがぼろぼろ出てきたりしない、というのを開発者が革新するまで、バージョン 1.0 を名乗ったりしない、という現象が見られる。
This rule underlies the fact that open-source software tends to stay in beta for a long time, and not get even a 1.0 version number until the developers are very sure it will not hand out a lot of nasty surprises.

クローズドソースの世界では、バージョン 1.0 というのは、「慎重な人は手を出しちゃダメよ」という意味だ。
In the closed-source world, Version 1.0 means ``Don't touch this if you're prudent.''; 

オープンソースの世界では、むしろ「開発者たちはこいつに自分の評判を賭けてもいいと思っています」というのに近い。
in the open-source world it reads something more like ``The developers are willing to bet their reputations on this.''

2. 既存の機能する領域を複製する作業よりは、ノウアスフィアを拡張する仕事のほうがいい。
2. Work that extends the noosphere is better than work that duplicates an existing piece of functional territory.

こいつをもっと素朴に表現するなら、
The naive way to put this would have been:

「独創的な作業は、既存ソフトの機能を複製するよりもいい」ということになるだろう。
Original work is better than mere duplication of the functions of existing software. 

でも、実はこんなに単純ではない。
But it's not actually quite that simple. 

既存のクローズドなソフトの機能を複製するのは、オリジナルなソフトの開発作業と同じくらい高い評価が得られる
Duplicating the functions of existing closed software counts as highly as original work 

――それによって、クローズドなプロトコルやフォーマットをこじあけたりして、その領土を新たに提供できるのであれば。
if by doing so you break open a closed protocol or format and make that territory newly available.

だからたとえば、いまのオープンソース世界でいちばんプレステージの高いプロジェクトは、Samba だ 
Thus, for example, one of the highest-prestige projects in the present open-source world is Samba

―― Unix マシンがマイクロソフトの独占ファイル共有プロトコル SMB のクライアントまたはサーバとして使えるようにするコード。
?the code that allows Unix machines to act as clients or servers for Microsoft's proprietary SMB file-sharing protocol. 

創造的な仕事はほとんどない。
There is very little creative work to be done here; 

むしろ細かいリバースエンジニアリングの細部をうまくやるのが一番の問題だ。
it's mostly an issue of getting the reverse-engineered details right. 

それでも、Samba グループは英雄視されている。
Nevertheless, the members of the Samba group are perceived as heroes 

ユーザ集団をまるごと囲い込んで、ノウアスフィアの大きな部分に縄を張ってしまおうというマイクロソフトの努力を無化するものだからだ。
because they neutralize a Microsoft effort to lock in whole user populations and cordon off a big section of the noosphere.

3. 主要ディストリビューションに含まれるものは、そうでないものよりもいい。
3. Work that makes it into a major distribution is better than work that doesn't.

主要ディストリビューションすべてに含まれるものがいちばんえらい。
Work carried in all major distributions is most prestigious.

ここでの主要ディストリビューションというのは、Red Hat、Debian、Caldera、S.u.S.E. など Linux の大手ディストリビューションのみならず、独自の評判を持っていて、したがって品質を裏書きできると思われているその他のコレクションすべてを含んでいる
The major distributions include not just the big Linux distributions like Red Hat, Debian, Caldera, and SuSE., but other collections that are understood to have reputations of their own to maintain and thus implicitly certify quality 

――たとえば BSD ディストリビューションや、FSF のソースコレクションなど。
?like BSD distributions or the Free Software Foundation source collection.

4. 利用は最大の賛辞
4. Utilization is the sincerest form of flattery

――そしてカテゴリーキラーは追随ソフトよりもよい。
?and category killers are better than also-rans.

他人の判断を信用するというのは、同業者（ピア）レビューのプロセスの基本だ。
Trusting the judgment of others is basic to the peer-review process.

これが必要なのは、だれもあらゆる代替ソフトをすべてレビューするだけの暇はないからだ。
It's necessary because nobody has time to review all possible alternatives.

だから、多くの人が使っているソフトは、少数の人しか使っていないソフトよりもいいとされる。
So work used by lots of people is considered better than work used by a few,

あまりにできがよくて、ほかの代替品をだれも使おうとしなくなるような仕事をするというのは、だからすさまじいプレステージを獲得することになる。
To have done work so good that nobody cares to use the alternatives any more is therefore to have earned huge prestige.

最大の同業者評価を獲得するには、非常に人気のあるカテゴリーキラーとなった独創的な作業が、すべての主要ディストリビューションに含まれるようになることだ。
The most possible peer esteem comes from having done widely popular, category-killing original work that is carried by all major distributions. 

これを一度ならず行った人間は、半ば冗談まじりで「半神半人」（demigods）と呼ばれる。
People who have pulled this off more than once are half-seriously referred to as `demigods'.

5. むずかしくて退屈な作業（たとえばデバッグやドキュメンテーション書き）に継続的に貢献するのは、おもしろくて簡単なハックをいいとこ取りするよりも賞賛すべきことである。
5. Continued devotion to hard, boring work (like debugging, or writing documentation) is more praiseworthy than cherrypicking the fun and easy hacks.

この規範によって、ハッカーたちが通常はやりたがらないけれど必要な仕事について、コミュニティは見返りを支払うわけだ。
This norm is how the community rewards necessary tasks that hackers would not naturally incline towards.

でもこれは、次のルールとはちょっと矛盾している： 
It is to some extent contradicted by:

6. 機能の大幅な（non-trivialな）拡張は、低レベルのパッチやデバッグよりもいい。
6. Nontrivial extensions of function are better than low-level patches and debugging.

これがどう機能するかというと、こういうことらしい：
The way this seems to work is 

一発だけで見た場合、機能を追加するほうがバグ取りよりも見返りが大きい
that on a one-shot basis, adding a feature is likely to get more reward than fixing a bug

――ただしバグが極端にてごわかったり見つけにくかったりして、それを仕留めること自体が非凡なスキルや賢さを示すのでない限り。
?unless the bug is exceptionally nasty or obscure, such that nailing it is itself a demonstration of unusual skill and cleverness.

でも、こうした行動が長い期間にまたがると、長いこと注意を払って、ごくつまらないバグでもつぶしていく人は、同じ努力をかけて簡単な機能の追加をしてきた人よりも高い地位につけるわけだ。
But when these behaviors are extended over time, a person with a long history of paying attention to and nailing even ordinary bugs may well out-rank someone who has spent a similar amount of effort adding easy features.

ある評者が指摘したことだけれど、こうしたルールはおもしろい形で相互作用して、いつの時点でも最大の効用が報われるようには必ずしもなっていない。
A respondent has pointed out that these rules interact in interesting ways and do not necessarily reward highest possible utility all the time.

ハッカーに、独自の新しいツールを開発するのと、だれか別の人のツールの拡張と、どっちで有名になる見込みが高いかときいたら、答えはまちがいなく「新しいツール」になるだろう。
Ask a hacker whether he's likely to become better known for a brand new tool of his own or for extensions to someone else's and the answer ``new tool'' will not be in doubt.

でも、次の二つならどうだろう。
But ask about

一日ほんの数回、だれにもわからない形で OS から呼び出されるだけの真新しいツールだけれど、急速にカテゴリーキラーになるもの 
(a) a brand new tool which is only used a few times a day invisibly by the OS but which rapidly becomes a category killer, versus

ことさら新しくもないしカテゴリーキラーでもない既存ツールに対する拡張をいくつか。
(b) several extensions to an existing tool which are neither especially novel nor category-killers, 

ただしそのツールは、毎日使われて、毎日多くの人の目に直接触れる 
but are daily used and daily visible to a huge number of users

この場合、ハッカーは最終的に前者に落ち着くにしても、かなりためらうはずだ。
and you are likely to get some hesitation before the hacker settles on (a). 

この両者は、だいたい同じくらいの地位を持っている。
These alternatives are about evenly stacked.

これを指摘した評者は、以下のような一言を付け加えて、ぼくに対して論点を強調した。
Said respondent gave this question point for me by adding

「前者の例は、fetchmail で、
``Case (a) is fetchmail;

後者の例はあなたの場合、vc.el や gud.el など各種のEmacs拡張です」　
case (b) is your many Emacs extensions, like vc.el and gud.el.'' 

たしかにかれの言うとおり。
And indeed he is correct;

ぼくは「各種のEmacsモードの著者」と言われるよりは、「fetchmail 作者」と言われるほうが多い。
I am more likely to be tagged ``the author of fetchmail'' than ``author of a boatload of Emacs modes'',

長期的に見れば、Emacs モードのほうが効用の合計では大きいにちがいないのだけれど。
even though the latter probably have had higher total utility over time.

ここで起きているのは、真新しい「ブランドアイデンティティ」を持つ仕事は、既存「ブランド」に集積する仕事よりも認知度が高い、ということにすぎないのかもしれない。
What may be going on here is simply that work with a novel `brand identity' gets more notice than work aggregated to an existing `brand'.

こうしたルールのさらなる解明と、それがハッカー文化の得点集計システムについてどんなことを物語るのかは、今後の研究課題として有望だろう。
Elucidation of these rules, and what they tell us about the hacker culture's scoreboarding system, would make a good topic for further investigation.
 

14　ノウアスフィア的所有権となわばりの動物行動学
Noospheric Property and the Ethology of Territory

土地所有権の慣習がなにをもたらすか理解するには、もう一つ別の角度から見てみると役にたつ。
To understand the causes and consequences of Lockean property customs, it will help us to look at them from yet another angle;

動物行動学、とくになわばりの行動学だ。 
that of animal ethology, specifically the ethology of territory.

所有地は、動物のなわばりの抽象化で、なわばりは種の内部の暴力を減らすための手段としてうまれた。
Property is an abstraction of animal territoriality, which evolved as a way of reducing intraspecies violence.

境界をしるし、ほかの仲間の境界を尊重することで、オオカミは争いを始める機会を減らす。
By marking his bounds, and respecting the bounds of others, a wolf diminishes his chances of being in a fight 

そういう争いで自分がけがをしたり殺されたりするかもしれず、そうなったら自分が再生産面で成功する可能性が低下するからだ。
that could weaken or kill him and make him less reproductively successful.

同じように、人間社会における「所有物」の概念は、平和な行動と抗争とをはっきりわけるような境界をもうけることで、人間同士の紛争を予防するのが機能だ。
Similarly, the function of property in human societies is to prevent inter-human conflict by setting bounds that clearly separate peaceful behavior from aggression.

人間の所有物なんて、ただの恣意的な社会的因襲にすぎないと表現するのはファッショナブルだったりするけれど、でもこれはとことんまちがっている。
It is fashionable in some circles to describe human property as an arbitrary social convention, but this is dead wrong. 

犬を飼ったことがある人で、知らない人が飼い主の所有物に近づいたときに犬が吠えたのを経験した人は多いだろう。
Anybody who has ever owned a dog who barked when strangers came near its owner's property

そういう人ならみんな、動物のなわばり性と人間の所有物との本質的な連続性を経験しているはずだ。
has experienced the essential continuity between animal territoriality and human property.

ぼくたちが家畜化した狼のいとこ分たちは、この点について人間の政治理論家たちの多くより本能的に賢いんだ。 
Our domesticated cousins of the wolf know, instinctively, that property is no mere social convention or game,

所有権を主張すること（なわばりをマーキングするように）は、それを演じてみせることが重要で、
but a critically important evolved mechanism for the avoidance of violence.

その境界を守るぞという宣言だ。
Claiming property (like marking territory) is a performative act, a way of declaring what boundaries will be defended.

所有権主張に対するコミュニティの支援は、摩擦をへらして協力行動を最大化するための方法だ。
Community support of property claims is a way to minimize friction and maximize cooperative behavior.

これは「所有権主張」が README ファイルのプロジェクト管理者の名前記述のように、柵や吠える犬よりずっと抽象的な場合でも成立する。
These things remain true even when the ``property claim'' is much more abstract than a fence or a dog's bark, even when it's just the statement of the project maintainer's name in a README file. 

それはやっぱりなわばりを抽象化したもので、（その他所有権の形態と同じく）ぼくたちの本能に基づく所有権モデルは、なわばりが発達して紛争解決に役立つようになったものなんだ。
It's still an abstraction of territoriality, and (like other forms of property) based in territorial instincts evolved to assist conflict resolution.

この動物行動学的な分析は、一見するとすごく抽象的で、実際のハッカー行動と結びつけるのは難しそうだ。
This ethological analysis may at first seem very abstract and difficult to relate to actual hacker behavior.

でもこれはすごく大事な意味を持っている。
But it has some important consequences.

一つは World Wide Web のサイトの普及ぶりを説明することだ。
One is in explaining the popularity of World Wide Web sites, 

特に、なぜ web サイトを持ったオープンソース・プロジェクトが、ないものよりずっと「本物」らしくて重要に見えるのか、という点。
and especially why open-source projects with websites seem so much more `real' and substantial than those without them.
 
客観的に見れば、これは説明がむずかしい。
Considered objectively, this seems hard to explain.

ほんの小さなプログラムであっても、それを創始して管理するための努力に比べれば、web ページなんかばかみたいに簡単だ。
Compared to the effort involved in originating and maintaining even a small program, a web page is easy,

だから web ページが内容の高さや非凡な努力の証拠だとは考えにくい。 
so it's hard to consider a web page evidence of substance or unusual effort.

Web そのものの機能的な特徴だけでも、説明としては不十分だ。
Nor are the functional characteristics of the Web itself sufficient explanation.

web ページのコミュニケーション機能は、FTP とメーリングリストと Usenet ポストとの組み合わせでも同じくらい、あるいはもっとうまく提供できるものだ。
The communication functions of a web page can be as well or better served by a combination of an FTP site, a mailing list, and Usenet postings.

実際問題として、プロジェクトの日々の連絡が、メーリングリストや Usenet のポストではなく Web で行われるというのはあまり例がない。
In fact it's quite unusual for a project's routine communications to be done over the Web rather than via a mailing list or newsgroup. 

それなら、なぜプロジェクトのホームとして web サイトに人気があるんだろう。 
Why, then, the popularity of websites as project homes?

「ホームページ」という用語に含まれたメタファーがだいじなヒントを提供してくれる。
The metaphor implicit in the term `home page' provides an important clue.

オープンソースプロジェクトの創始は、ノウアスフィアにおける領土を宣言することだけれど（そしてふつうはそのように認識されてはいるけれど）、でも心理的なレベルからいえば、それだけではあまり説得力はない。
While founding an open-source project is a territorial claim in the noosphere (and customarily recognized as such) it is not a terribly compelling one on the psychological level.

ソフトウェアは結局のところ自然の場所もないし、すぐに複製可能だからだ。
Software, after all, has no natural location and is instantly reduplicable.

「領土」や「所有物」という本能的な考えに適合しないわけではないけれど、でもそれにはしかるべき努力が必要になる。 
It's assimilable to our instinctive notions of `territory' and `property', but only after some effort.

プロジェクトのホームページは、比較的空間的に組織された World Wide Web の世界で「故郷」領土として宣言を行うことにより、可能なプログラムの空間の抽象的な開墾を具体化するものなんだ。
A project home page concretizes an abstract homesteading in the space of possible programs by expressing it as `home' territory in the more spatially-organized realm of the World Wide Web.

ノウアスフィアから「サイバースペース」におりてきても、柵や吠える番犬の現実世界まではまだ距離があるけれど、でも抽象的な領土主張をもっと直感的ななわばり理解に結びつけてはくれる。
Descending from the noosphere to `cyberspace' doesn't get us all the way to the real world of fences and barking dogs yet, but it does hook the abstract property claim more securely to our instinctive wiring about territory.

だからこそ、Web ページを持ったプロジェクトはもっと「本物」に感じられるんだ。
And this is why projects with web pages seem more `real'.

この論点は、ハイパーリンクや高性能サーチエンジンの存在で一層強化される。
This point is much strengthened by hyperlinks and the existence of good search engines.

Web ページを持つプロジェクトは、ノウアスフィアで近所を探検している人にずっと認知されやすい。
A project with a web page is much more likely to be noticed by somebody exploring its neighborhood in the noosphere;

リンクする人もいるだろうし、サーチエンジンにもひっかかる。
others will link to it, searches will find it. 

Web ページは、だから広告としても優れているし、パフォーマンス行為としても有効だし、領土主張としても強力だ。 
A web page is therefore a better advertisement, a more effective performative act, a stronger claim on territory.

この動物行動学的な分析は、オープンソース文化での紛争処理メカニズムをもっと詳しく見るよう示唆するものでもある。
This ethological analysis also encourages us to look more closely at mechanisms for handling conflict in the open-source culture.

これが正しければ、所有権慣習は評判インセンティブを最大化するだけでなく、紛争の防止と解決にもなんらかの役割を果たしていると考えていいはずだからだ。
It leads us to expect that, in addition to maximizing reputation incentives, ownership customs should also have a role in preventing and resolving conflicts.


15　紛争の原因
Causes of Conflict

オープンソース・ソフトをめぐる紛争の理由としては、次の４つの大きな問題を指摘できる：
In conflicts over open-source software we can identify four major issues:

だれがプロジェクトについて決定力のある決断をくだすのか？ 
Who gets to make binding decisions about a project?

だれがなにについて、評価や非難を受けるのか？ 
Who gets credit or blame for what?

二度手間をさけて、非公式版がでてバグ追跡をややこしくするのを止めるにはどうするか？ 
How to reduce duplication of effort and prevent rogue versions from complicating bug tracking?

技術的に見たら、なにが正しいことだったのか？ 
What is the Right Thing, technically speaking?

でもこの「技術的な正しさ」という点についてよく考えてみると、これは問題にはならない。
If we take a second look at the ``What is the Right Thing'' issue, however, it tends to vanish.

この手の問題には必ず、万人が納得する客観的な決定方法があるか、あるいはないかのどっちかだからだ。
For any such question, either there is an objective way to decide it accepted by all parties or there isn't.

もしそれがあれば、話はそこでおしまいでみんな勝つ。
If there is, game over and everybody wins.

もしないのなら、それは「だれが決めるんだ？」という話に還元される。 
If there isn't, it reduces to ``Who decides?''.

同じように、紛争解決理論がプロジェクトについて解決しなくてはならない三つの問題は 
Accordingly, the three problems a conflict-resolution theory has to resolve about a project are

(A) 設計上の決断を下すときに最終的な采配を下すのはだれか、
(a) where the buck stops on design decisions,

(B) どの貢献者がどのようにクレジットされるかをどう決めるか、 
(b) how to decide which contributors are credited and how,

(C) プロジェクトグループやその成果物が複数に枝分かれして分裂するのをどう防ぐか、となる。 
and (c) how to keep a project group and product from fissioning into multiple branches.

問題(A) と（C）の解決のために所有権慣習の果たす役割ははっきりしている。
The role of ownership customs in resolving issues (a) and (c) is clear.

習慣により、プロジェクトの所有者こそが方向を左右する決定を下すことが認められる。
Custom affirms that the owners of the project make the binding decisions.

そしてプロジェクト分裂による勢力の希薄化に対しては、慣習が強い圧力をかけることはこれまで見た通り。 
We have previously observed that custom also exerts heavy pressure against dilution of ownership by forking.

ここで、評判ゲームは忘れてこれをハッカー文化についての純粋な「職人気質」モデルから見た場合にも、こうした慣習は筋が通っていることは認識しておくといいだろう。
It's instructive to notice that these customs make sense even if one forgets the reputation game and examines them from within a pure `craftmanship' model of the hacker culture.

この見方では、こうした慣習は評判インセンティブの希薄化よりはむしろ、職人が自分のビジョンを自分の選ぶ形で実行するという職人の権利を守ることを重視していることになる。
In this view these customs have less to do with the dilution of reputation incentives than with protecting a craftsman's right to execute his vision in his chosen way. 

職人モデルは、問題（B）「だれがなにについてクレジットを与えられるか」についてのハッカー慣習を説明するには十分ではない
The craftsmanship model is not, however, sufficient to explain hacker customs about issue (b), who gets credit for what

（だって、純粋な職人は評判ゲームなんか気にしないから、そんなことを気にする動機がない）。
?because a pure craftsman, one unconcerned with the reputation game, would have no motive to care.

これを分析するには、ロック理論をもう一歩進めて、所有権上の抗争や運用がどう行われているかをプロジェクト同士だけでなく、プロジェクト内部から見てやらなくてはならない。
To analyze these, we need to take the Lockean theory one step further and examine conflicts and the operation of property rights within projects as well as between them.


16　プロジェクト構造と所有権
Project Structures and Ownership

簡単な例は、プロジェクトの所有者・管理者が一人しかいない場合だ。
The trivial case is that in which the project has a single owner/maintainer.

この場合、紛争は起こり得ない。
In that case there is no possible conflict.

所有者がすべての決定をくだして、賞賛も批判もすべて自分で背負う。
The owner makes all decisions and collects all credit and blame. 

紛争として唯一あり得るのは引き継ぎ問題だけだ
The only possible conflicts are over succession issues

――もとの所有者がいなくなったり興味をなくしたりした場合、だれが新しい所有者になるのか。
?who gets to be the new owner if the old one disappears or loses interest. 

コミュニティとしても、問題(C)から、プロジェクトの分裂を避けたいと考える。
The community also has an interest, under issue (c), in preventing forking. 

こうした利害は文化規範として、所有者・管理者は自分がプロジェクトを管理できなくなった場合には、公式にその権利をだれかに譲るべきだというかたちで表現される。
These interests are expressed by a cultural norm that an owner/maintainer should publicly hand title to someone if he or she can no longer maintain the project.

いちばん単純ながら、簡単ではないケースとしては、プロジェクトを所有する一人の「優しい独裁者」のもとに複数の共同管理者が働いているような場合だ。
The simplest non-trivial case is when a project has multiple co-maintainers working under a single `benevolent dictator' who owns the project.

慣習は、グループプロジェクトについてはこのモードを好む。
Custom favors this mode for group projects;

これは Linux カーネルや Emacs ほどの大プロジェクトでも使えるし、「だれが決める」問題も解決してくれるし、その解決法も、その他のあらゆる代替案より特にひどいというわけでもない。
it has been shown to work on projects as large as the Linux kernel or Emacs, and solves the ``who decides'' problem in a way that is not obviously worse than any of the alternatives.

典型的には、優しい独裁者組織は、創始者が貢献者を集めるにしたがって所有管理者組織から発展して生まれる。
Typically, a benevolent-dictator organization evolves from an owner-maintainer organization as the founder attracts contributors.

所有者が独裁者であり続けても、それはプロジェクトのどの部分についてだれがクレジットを得るかという点について新しいレベルの紛争の可能性を持ち込むことになる。
Even if the owner stays dictator, it introduces a new level of possible disputes over who gets credited for what parts of the project.

この状況では、慣習は所有者／独裁者が公平に貢献者にクレジットを与えることを義務づける
In this situation, custom places an obligation on the owner/dictator to credit contributors fairly

（たとえばREADME履歴ファイルの中でのしかるべき記載なんかで）。
(through, for example, appropriate mentions in README or history files).

ロック式所有権モデルでいえば、これはつまりプロジェクトへの貢献によってその評判リターンの一部を稼げるということだ
In terms of the Lockean property model, this means that by contributing to a project you earn part of its reputation return

（いいものも悪いものも）。
(positive or negative).

この論理をつきつめると、「優しい独裁者」はその全プロジェクトを文句なしに占有しているわけじゃないのがわかる。
Pursuing this logic, we see that a `benevolent dictator' does not in fact own his entire project absolutely.

方向性を決める決断をする権利を持ってはいるけれど、かれは実際問題として、全体の評判の一部を他人の作業と交換にゆずりわたす。
Though he has the right to make binding decisions, he in effect trades away shares of the total reputation return in exchange for others' work.

農場での分益小作人との対比はほとんど抵抗しがたいものがある。
The analogy with sharecropping on a farm is almost irresistible,

ただし、ハッカーの場合、貢献者の名前はクレジットに残り、その貢献者がもはや活発でなくなったときにも、ある程度の「収益」をあげ続ける点はちがうけれど。
except that a contributor's name stays in the credits and continues to `earn' to some degree even after that contributor is no longer active.

優しい独裁者プロジェクトの参加者が増えるにつれて、参加者は二派にわかれる傾向がある。
As benevolent-dictator projects add more participants, they tend to develop two tiers of contributors;

通常の貢献者と共同開発者だ。
ordinary contributors and co-developers.

共同開発者となる典型的な道としては、プロジェクトの主要サブシステムの責任を負うことだ。
A typical path to becoming a co-developer is taking responsibility for a major subsystem of the project.

もう一つは「高等修理卿」の役割を負って、多くのバグを抽出してなおすことだ。
Another is to take the role of `lord high fixer', characterizing and fixing many bugs.

こういった方法を通じて、共同開発者は貢献者のなかでもプロジェクトに相当量の時間を投資し続ける。
In this way or others, co-developers are the contributors who make a substantial and continuing investment of time in the project.

サブシステム所有者の役割は、本論の分析ではときに大事なので、もっと詳しくみるべきだ。
The subsystem-owner role is particularly important for our analysis and deserves further examination. 

ハッカーたちは「権威は責任に伴う」というのが好きだ。
Hackers like to say that `authority follows responsibility'.

あるサブシステムのメンテナンス責任を負う共同開発者は、そのサブシステムの実装と、その他プロジェクトとのインターフェース部分との両方をコントロールできるようになる。
A co-developer who accepts maintainance responsibility for a given subsystem generally gets to control both the implementation of that subsystem and its interfaces with the rest of the project, 

それを修正できるのは、アーキテクトとして働くプロジェクトリーダだけ。
subject only to correction by the project leader (acting as architect).

このルールは、実質的にはプロジェクトのロック・モデル内部に、囲い込まれた所有地をつくりだしているものとみることができる。
We observe that this rule effectively creates enclosed properties on the Lockean model within a project, 

だからほかの領地境界とまったく同じように、紛争防止の役割を持つことになるわけだ。
and has exactly the same conflict-prevention role as other property boundaries.

習慣的に、共同開発者のいるプロジェクトの「独裁者」またはプロジェクトリーダは、その共同開発者たちにだいじな判断のときには相談することが期待されている。
By custom, the `dictator' or project leader in a project with co-developers is expected to consult with those co-developers on key decisions.

これは特に、その決断が共同開発者「所有」のサブシステム（つまり、その共同開発者がそれに時間を注いで、責任を負っているサブシステム）にかかわるものであるときにあてはまる。
This is especially so if the decision concerns a subsystem that a co-developer `owns' (that is, has invested time in and taken responsibility for).

賢いリーダは、プロジェクト内部の領土境界の機能がわかっているから、サブシステム所有者の決定をじゃましたり、ひっくりかえしたりするようなことは軽々しくしない。
A wise leader, recognizing the function of the project's internal property boundaries, will not lightly interfere with or reverse decisions made by subsystem owners.

一部のすごく大きなプロジェクトは、「やさしい独裁者」モデルを完全に捨てている。
Some very large projects discard the `benevolent dictator' model entirely.

これをやる方法の一つは、共同開発者たちを議決委員会にしてしまうことだ（Apacheがこうしている）。
One way to do this is turn the co-developers into a voting committee (as with Apache).

別の方法としては、独裁権を巡回方式にすることだ。
Another is rotating dictatorship,

ここではコントロール権は、上級共同開発者たちのサークルのなかで次から次へとまわされる
in which control is occasionally passed from one member to another within a circle of senior co-developers;

（Perl開発者たちはこういう形の組織を採用している）。
the Perl developers organize themselves this way.

こういう複雑な仕組みは、一般には不安定でむずかしいものと思われている。
Such complicated arrangements are widely considered unstable and difficult.

明らかにこのむずかしいという印象は、委員会による設計や委員会そのものの危険性の関数である面が大きい。
Clearly this perceived difficulty is largely a function of the known hazards of design-by-committee, and of committees themselves;

こういう問題について、ハッカー文化ははっきりわかっている。
these are problems the hacker culture consciously understands.

でも、ハッカーたちが委員会や巡回式組織について生理的に感じている気持ち悪さは、それがもっと簡単な場合についてハッカーたちが理由づけるときに使う、無意識のロック式モデルにおさまりにくいことがあるんだろう。
However, I think some of the visceral discomfort hackers feel about committee or rotating-chair organizations is that they're hard to fit into the unconscious Lockean model hackers use for reasoning about the simpler cases.

こういう複雑な組織では、コントロールという意味での所有権や、評判の収益の所有権をきちんとつけるのがむずかしいからだ。
It's problematic, in these complex organizations, to do an accounting of either ownership in the sense of control or ownership of reputation returns. 

内部の境界がどこにあるかは見えにくいので、グループとして例外的に高い調和と信頼関係ができていない限り、紛争を避けるのはむずかしい。
It's hard to see where the internal boundaries are, and thus hard to avoid conflict unless the group enjoys an exceptionally high level of harmony and trust.


17　紛争とその解決
Conflict and Conflict Resolution

これまで見てきたのは、プロジェクト内部では役割がますます複雑化し、それがデザイン決定権の配分と部分的な所有権によって表現されるということだった。
We've seen that within projects, an increasing complexity of roles is expressed by a distribution of design authority and partial property rights.

これはインセンティブを配分する効率のよい方法だけれど、プロジェクトリーダーの権威を弱めるものでもある
While this is an efficient way to distribute incentives, it also dilutes the authority of the project leader

――いちばん大事な点として、リーダーが紛争をおさえこむための権威を弱めてしまうんだ。
?most importantly, it dilutes the leader's authority to squash potential conflicts.

設計にかかわる技術的な論争こそが、一見すると血を見るような争いにいたる一番の原因になりそうだと思うかもしれないけれど、でもこれは深刻なもめごとの原因にはめったにならない。
While technical arguments over design might seem the most obvious risk for internecine conflict, they are seldom a serious cause of strife.

こういうのは、権威は責任に伴うというなわばりのルールによってそこそこ簡単に解決がつく。
These are usually relatively easily resolved by the territorial rule that authority follows responsibility.

紛争解決手段としてもう一つあるのは、序列によるものだ
Another way of resolving conflicts is by seniority

――もし貢献者二人、または貢献者集団二つが争いを始めて、それが客観的に解決できず、どちらもその争いのなわばりを所有はしていないとき、そのプロジェクト全体につぎ込んだ作業量の多いほう（つまり、プロジェクト全体の中で地役権を最大に持つ側）が勝つ。
?if two contributors or groups of contributors have a dispute, and the dispute cannot be resolved objectively, and neither owns the territory of the dispute, the side that has put the most work into the project as a whole (that is, the side with the most property rights in the whole project) wins.

（同じように、投入したものが少ない方が負ける。
(Equivalently, the side with the least invested loses.

おもしろいことに、これは多くのリレーショナルデータベース・エンジンが、デッドロックを解決するヒューリスティクとまったく同じだ。
Interestingly this happens to be the same heuristic that many relational database engines use to resolve deadlocks.

二つのスレッドが、あるリソースをめぐってデッドロックになったら、現在のトランザクションに投入したものがいちばん少ないほうが、デッドロックの犠牲者として選ばれて、終了させられる。
When two threads are deadlocked over resources, the side with the least invested in the current transaction is selected as the deadlock victim and is terminated.

これはつまり通常は、いちばん長く走っているトランザクション、あるいはトランザクションとして上位にあるのが、勝者となるということだ。）
This usually selects the longest running transaction, or the more senior, as the victor.) 

こういうルールだけで、ほとんどのプロジェクト上の争いを解決するには十分だ。
These rules generally suffice to resolve most project disputes.

十分でない場合にも、リーダの采配でだいたいなんとかなる。
When they do not, fiat of the project leader usually suffices.

この二重のフィルタを越えるほどの紛争はほとんどない。 
Disputes that survive both these filters are rare.

紛争は原則的に、こうした二つの基準（「権威は責任にともなう」「序列の高いほうが勝つ」）が矛盾する結果を出して、しかもそのプロジェクトリーダの権利が弱かったり不在だったりするときにしか生き延びない。
Conflicts do not, as a rule, become serious unless these two criteria ("authority follows responsibility" and "seniority wins") point in different directions, and the authority of the project leader is weak or absent.

これが起きるいちばんはっきりした例は、プロジェクトのリーダが消えたあとで、その後継をめぐる争いだ。
The most obvious case in which this may occur is a succession dispute following the disappearance of the project lead.

ぼくは一度、この種の争いに加わっていたことがある。
I have been in one fight of this kind.

みにくくて苦痛で、長引いて、最終的に解決されたのも、関係者がみんな疲れ切って、コントロールを外部の人に任せようと決めたから可能になった。
It was ugly, painful, protracted, only resolved when all parties became exhausted enough to hand control to an outside person, 

もう二度とあの種のものには近づかずにすみますように、と心から願わずにはいられない。 
and I devoutly hope I am never anywhere near anything of the kind again.

最終的には、こういう紛争解決メカニズムは、ハッカーコミュニティがそれを強制しようという意志をもっているかどうかにかかってくる。
Ultimately, all of these conflict-resolution mechanisms rest on the entire hacker community's willingness to enforce them.

そして唯一の強制メカニズムは、フレーミングと黙殺だ
The only available enforcement mechanisms are flaming and shunning

――慣習を破る者たちに対する公開糾弾と、破った者たちとはもう協力しないということだ。
?public condemnation of those who break custom, and refusal to cooperate with them after they have done so.


18　文化への順応過程とアカデミズムとの関連
Acculturation Mechanisms and the Link to Academia

この論文の以前のバージョンは、今後の研究テーマとして次の課題を挙げていた：
An early version of this essay posed the following research question:

ハッカー・コミュニティはそのメンバーに、慣習をどうやって伝えて指導するのか？　
how does the community inform and instruct its members as to its customs?

慣習は自明なものなのか、あるいは無意識のレベルで自己組織的なものなのか、
Are the customs self-evident or self-organizing at a semi-conscious level?

事例によって教えられるのか、
Are they taught by example?

それとも明文化された指示によって教えられるのか？ 
Are they taught by explicit instruction?

明文化された指示による教育は明らかにほとんどない。
Teaching by explicit instruction is clearly rare,

そもそもこの文化の規範についての明文化された記述は、いままでほとんどなかったから使いようがなかった。 
if only because few explicit descriptions of the culture's norms have existed for instructional use up to now.

多くの規範は事例によって教えられる。
Many norms are taught by example.

すごく簡単な例を挙げるなら、あらゆるソフトの配布パッケージは README や READ.ME というファイルを含むべきだという規範がある。
To cite one very simple case, there is a norm that every software distribution should have a file called README or READ.ME that contains first-look instructions for browsing the distribution.

この慣習は1980年代初期には確立されていたものだけれど、
This convention has been well established since at least the early 1980s;

でもいまのところそれが明文化されたことはない。
it has even, occasionally, been written down.

みんな、いろんなパッケージを見た結果としてその規範を知るわけだ。 
But one normally derives it from looking at many distributions.

一方で、ハッカー慣習のなかには、評判ゲームについての基本的な（おそらくは無意識の）理解さえ獲得できたら自己組織的に導かれるものもある。
On the other hand, some hacker customs are self-organizing once one has acquired a basic (perhaps unconscious) understanding of the reputation game.

第3章でぼくが挙げた3つのタブーについて、ハッカーのほとんどはわざわざ教わる必要はないし、そうでなくても、あんなのは教えるまでもなく自明のことだというだろう。
Most hackers never have to be taught the three taboos I listed earlier in this essay, or at least would claim if asked that they are self-evident rather than transmitted. 

この現象はもっと詳細な分析が必要だ
This phenomenon invites closer analysis

――そしてその説明は、ハッカーがハッカー文化についての知識をどうやって得るかというプロセスを見ればわかるかもしれない。
?and perhaps we can find its explanation in the process by which hackers acquire knowledge about the culture.

文化順応メカニズムとして、隠されたヒント（宗教・神秘学的な意味ではもっと厳密な「謎」）を使う文化は多い。
Many cultures use hidden clues (more precisely `mysteries' in the religio/mystical sense) as an acculturation mechanism.

これは部外者には明かされない謎だが、熱心なタコ（newbie）なら見つけだしたり演繹したりできると期待されている。
These are secrets that are not revealed to outsiders, but are expected to be discovered or deduced by the aspiring newbie.

内部に受け入れられるためには、その謎が理解できていて、しかもそれを文化的に認められた方法で学んだことを示さなくてはならない。
To be accepted inside, one must demonstrate that one both understands the mystery and has learned it in a culturally sanctioned way.

ハッカー文化は、こういうヒントやテストを異常なほど意識的かつ広く利用している。
The hacker culture makes unusually conscious and extensive use of such clues or tests.

このプロセスは、少なくとも三つのレベルで機能していることがわかる。
We can see this process operating at at least three levels:

パスワード風のはっきりした謎。 
Password-like specific mysteries.

一例として、USENET には alt.sysadmin.recovery というニュースグループがあって、こういう秘密の例として非常にはっきりしたものを持っている。
As one example, there is a Usenet newsgroup called alt.sysadmin.recovery that has a very explicit such secret;

その秘密を知らないとメッセージをポストできない。
you cannot post without knowing it,

そしてその秘密を知っているということが、ポストするのにふさわしい人物だという証拠と見なされる。
and knowing it is considered evidence you are fit to post. 

常連はこの秘密をばらすことについて、強いタブーを持っている。 
The regulars have a strong taboo against revealing this secret.

ある技術的な謎へのイニシエーションが必要なこと。
The requirement of initiation into certain technical mysteries. 

価値ある贈り物ができるようになるためには、人は相当量の技術的な知識を吸収しなくてはならない
One must absorb a good deal of technical knowledge before one can give valued gifts

（たとえば、主要コンピュータ言語のどれか一つを知らなくてはならない）。
(e.g. one must know at least one of the major computer languages).

この必要条件が大きな場で果たす役割は、小さな集団で隠されたヒントが果たす役割と同じで、この文化の中で活動するのに必要な資質（たとえば抽象思考能力、根気、精神的な柔軟性など）のフィルタとして機能する。
This requirement functions in the large in the way hidden clues do in the small, as a filter for qualities (such as capability for abstract thinking, persistence, and mental flexibility) that are necessary to function in the culture.

社会的な文脈の謎。
Social-context mysteries.

人がハッカー文化に関わりを持つのは、特定のプロジェクトへの参加を通じてだ。
One becomes involved in the culture through attaching oneself to specific projects.

各プロジェクトはハッカーたちの生々しい社会的な文脈であり、そこへの参加者になりたい人間が活動するためには、いろいろ調べて技術的な理解とともに社会的な理解を身につけなくてはならない
Each project is a live social context of hackers that the would-be contributor has to investigate and understand socially as well as technically in order to function.

（具体的には、これをやる一般的な方法はそのプロジェクトのWebページを読んだり、e-mailアーカイブを読んだりすることだ）。
(Concretely, a common way one does this is by reading the project's web pages and/or email archives.) 

こういうプロジェクト集団を通じて、タコ（newbie）たちは経験豊かなハッカーたちの行動事例を経験する。 
It is through these project groups that newbies experience the behavioral example of experienced hackers.

こういう謎を身につける過程で、ハッカー候補は文脈的な知識を身につけてゆき、（しばらくすれば）そのおかげで確かに三つのタブーやその他の慣習は「あたりまえ」に思えてくるわけだ。
In the process of acquiring these mysteries, the would-be hacker picks up contextual knowledge that (after a while) does make the three taboos and other customs seem `self-evident'.

ついでながら、ハッカー贈与文化の構造そのものが、それ自体中心的な謎だと論じる人もいるかもしれない。
One might, incidentally, argue that the structure of the hacker gift culture itself is its own central mystery.

評判ゲームやそこにこめられた慣習、タブー、利用法について、本能的な理解を実証してみせない限り、文化に順応したとはみなされない
（具体的にはだれもその人をハッカーとは呼ばない）。
One is not considered acculturated (concretely: no one will call you a hacker) until one demonstrates a gut-level understanding of the reputation game and its implied customs, taboos, and usages. 

でもこれは些末なことだ。
But this is trivial; 

あらゆる文化は、参加者候補に対してそういう理解を要求する。
all cultures demand such understanding from would-be joiners. 

さらにハッカー文化は、内的論理や民俗的な方法を秘密にしておこうなんていう希望はぜんぜん持っていない
Furthermore the hacker culture evinces no desire to have its internal logic and folkways kept secret

――少なくとも、それをばらしたぼくに対してフレームしてきた人はだれもいない！ 
?or, at least, nobody has ever flamed me for revealing them!

名前を挙げきれないくらい多数のコメントが寄せられ、ハッカーの所有権慣習は学問世界、特に科学研究コミュニティの行いと密接に関連し、そこから直接派生したものかもしれないと指摘してくれた。
Respondents to this essay too numerous to list have pointed out that hacker ownership customs seem intimately related to (and may derive directly from) the practices of the academic world, especially the scientific research commmunity.

こうした研究コミュニティは、潜在的に生産的なアイデアのなわばりを掘り起こすという面で似たような問題を抱えているし、同業者のレビューや評判を使うという点で、その問題に対して非常に類似した適応解決手段を示している。
This research community has similar problems in mining a territory of potentially productive ideas, and exhibits very similar adaptive solutions to those problems in the ways it uses peer review and reputation. 

多くのハッカーたちは、アカデミズムの世界と正式な接触を持ったことがある
Since many hackers have had formative exposure to academia 

（大学でハッキングを学ぶのはよくあることだ）。
(it's common to learn how to hack while in college)

だからアカデミズムの世界が適応パターン面でハッカー文化とどれほど共通性があるかという話は、こういう慣習の適用方法を理解するにあたっては、ついで以上の興味を向けるべき課題だ。
the extent to which academia shares adaptive patterns with the hacker culture is of more than casual interest in understanding how these customs are applied. 

ぼくが特徴づけたようなハッカー「贈与文化」との明らかな類比が、アカデミズムの世界でもたくさん見られる。
Obvious parallels with the hacker `gift culture' as I have characterized it abound in academia.

研究者が終身職を手に入れると同時に、もはや生存の問題は気にする必要がなくなる
Once a researcher achieves tenure, there is no need to worry about survival issues.

（実は終身職の概念は、「自然哲学者」たちがおもに金持ちの紳士たちで、研究に没頭するだけの暇をもっていた、初期の贈与文化までさかのぼることができる）。
(Indeed, the concept of tenure can probably be traced back to an earlier gift culture in which ``natural philosophers'' were primarily wealthy gentlemen with time on their hands to devote to research.)

生存問題がない以上、評判の向上が作業をつき動かす目標となり、それは雑誌などのメディアを通じて新しいアイデアと研究の共有を奨励する。
In the absence of survival issues, reputation enhancement becomes the driving goal, which encourages sharing of new ideas and research through journals and other media.

これは客観的にみて、機能的に筋が通っている。
This makes objective functional sense

科学研究はハッカー文化と同じく、「巨人の肩に立つ（先人の成果に積み重ねる）」という考え方に大きく依存しているからだ。
because scientific research, like the hacker culture, relies heavily on the idea of `standing upon the shoulders of giants', 

これにより、同じ基本原理をなんども発表しなおさずにすむ。 
and not having to rediscover basic principles over and over again.

ある人はこの議論を極端にすすめて、ハッカー慣習は単に研究コミュニティの民俗的な慣習の反映にすぎず、実は（ほとんどが）そこで獲得されたものだ、とまで主張する。
Some have gone so far as to suggest that hacker customs are merely a reflection of the research community's folkways and have actually (in most cases) been acquired there by individual hackers.

これはたぶん話を誇張させすぎているだろう。
This probably overstates the case,

ハッカー慣習は頭のいい高校生でもすぐに獲得できてしまうという一点だけでもそれは明らかだと思う。 
if only because hacker custom seems to be readily acquired by intelligent high-schoolers!


Gift Outcompetes Exchange


ここにはもっとおもしろい可能性がある。
There is a more interesting possibility here.

ぼくの憶測だけれど、学問の世界とハッカー文化が同じ適応パターンを示すのは、それが出自の点で親戚だからではなく、物理法則と人間の本能の仕組みを千手としたときに、それぞれ自分たちがやろうとしていたことを実現するための、唯一最適な社会組織を発達させたんじゃないだろうか。
I suspect academia and the hacker culture share adaptive patterns not because they're genetically related, but because they've both evolved the one most optimal social organization for what they're trying to do, given the laws of nature and the instinctive wiring of human beings.

歴史的にみて、自由市場資本主義こそが経済効率を求めて協力するための世界的に最適な方法だという審判はくだったようだ。
The verdict of history seems to be that free-market capitalism is the globally optimal way to cooperate for economic efficiency;

ひょっとして同じように、評判ゲームに基づく贈与文化は、高品質の創造的作業を産み出し（そしてチェックする！）ために協力するにあたって、世界的に最適な方法なのかもしれない。
perhaps, in a similar way, the reputation-game gift culture is the globally optimal way to cooperate for generating (and checking!) high-quality creative work. 


Support for this theory becomes from a large body of psychological studies on the interaction between art and reward [GNU].
These studies have received less attention than they should, in part perhaps because their popularizers have shown a tendency to overinterpret them into general attacks against the free market and intellectual property.
Nevertheless, their results do suggest that some kinds of scarcity-economics rewards actually decrease the productivity of creative workers such as programmers.
Psychologist Theresa Amabile of Brandeis University, cautiously summarizing the results of a 1984 study of motivation and reward, observed ``It may be that commissioned work will, in general, be less creative than work that is done out of pure interest.''.
Amabile goes on to observe that ``The more complex the activity, the more it's hurt by extrinsic reward.'' Interestingly, the studies suggest that flat salaries don't demotivate, but piecework rates and bonuses do.
Thus, it may be economically smart to give performance bonuses to people who flip burgers or dug ditches, but it's probably smarter to decouple salary from performance in a programming shop and let people choose their own projects (both trends that the open-source world takes to their logical conclusions).
Indeed, these results suggest that the only time it is a good idea to reward performance in programming is when the programmer is so motivated that he or she would have worked without the reward!
Other researchers in the field are willing to point a finger straight at the issues of autonomy and creative control that so preoccupy hackers.
``To the extent one's experience of being self-determined is limited,'' said Richard Ryan, associate psychology professor at the University of Rochester, ``one's creativity will be reduced as well.''
In general, presenting any task as a means rather than an end in itself seems to demotivate.
Even winning a competition with others or gaining peer esteem can be demotivating in this way if the victory is experienced as work for reward (which may explain why hackers are culturally prohibited from explicitly seeking or claiming that esteem).
To complicate the management problem further, controlling verbal feedback seems to be just as demotivating as piecework payment.
Ryan found that corporate employees who were told, ``Good, you're doing as you should'' were ``significantly less intrinsically motivated than those who received feedback informationally.''
It may still be intelligent to offer incentives, but they have to come without attachments to avoid gumming up the works. 
There is a critical difference (Ryan observes) between saying, ``I'm giving you this reward because I recognize the value of your work'', and ``You're getting this reward because you've lived up to my standards.'' 
The first does not demotivate; the second does.
In these psychological observations we can ground a case that an open-source development group will be substantially more productive (especially over the long term, in which creativity becomes more critical as a productivity multiplier) than an equivalently sized and skilled group of closed-source programmers (de)motivated by scarcity rewards.

この点は、もし本当なら、ただの（失礼）学問的興味以上のものとなる。


それは『伽藍とバザール』（邦訳、原文)での考察を、ちょっと別の角度からも論証しなおしたものとなる。
This suggests from a slightly different angle one of the speculations in The Cathedral And The Bazaar;

つまり多くのプログラマがポスト稀少性時代の贈与文化の中で生きられるだけの富の余剰を資本主義が作り出せるようになった瞬間から、最終的にはソフト生産の産業資本主義様式は競争に負けるべく運命づけられているのだ、という考察だ。
that, ultimately, the industrial/factory mode of software production was doomed to be outcompeted from the moment capitalism began to create enough of a wealth surplus that many programmers could live in a post-scarcity gift culture.


Indeed, it seems the prescription for highest software productivity is almost a Zen paradox; 
if you want the most efficient production, you must give up trying to make programmers produce. 
Handle their subsistence, give them their heads, and forget about deadlines. 
To a conventional manager this sounds crazily indulgent and doomed
?but it is exactly the recipe with which the open-source culture is now clobbering its competition.



19　結論：慣習から慣習法へ
Conclusion: From Custom to Customary Law

これまでオープンソース・ソフトの所有権とコントロールを支配する慣習をみてきた。
We have examined the customs which regulate the ownership and control of open-source software.

その根底にある理論が、ロック式の土地所有権理論と似た所有権概念であることもみた。
We have seen how they imply an underlying theory of property rights homologous to the Lockean theory of land tenure.

それと結びつけて、参加者が時間とエネルギーと創造性をあげてしまうことで名声を競う「贈与文化」としてハッカー文化を分析してみた。
We have related that to an analysis of the hacker culture as a `gift culture' in which participants compete for prestige by giving time, energy, and creativity away.

そしてその分析が、文化内の紛争解決にとって持つ意味について検討してみた。 
We have examined the implications of this analysis for conflict resolution in the culture.

論理的に考えて次にたずねるべき質問は「それがどうしたの？」というものだ。
The next logical question to ask is "Why does this matter?"

ハッカーは意識的な分析なしにこうした慣習を発展させてきたし、（いままでは）意識的な分析なしにそれにしたがってきた。
Hackers developed these customs without conscious analysis and (up to now) have followed them without conscious analysis.

それを意識的に分析してみたところで、なにか実用性のある成果が得られたかどうかは、すぐにははっきりしない
It's not immediately clear that conscious analysis has gained us anything practical

――ただし、これによって記述から処方へと歩みを進めて、こういう習慣の機能を改良する方法が抽出できるなら話は別だろう。 
?unless, perhaps, we can move from description to prescription and deduce ways to improve the functioning of these customs.

英米慣習法の伝統の土地所有権理論が、ハッカー慣習と論理的にとても近い関係にあることを見てきた。
We have found a close logical analogy for hacker customs in the theory of land tenure under the Anglo-American common-law tradition.

歴史的にみて [Miller]、これを発明したヨーロッパの部族文化は、明文化もはっきり意識化もされない慣習から部族の賢者たちが記憶するはっきりした慣習法体系に移行し、やがてはそれを成文化することで、紛争解決システムを向上させていった。
Historically [Miller], the European tribal cultures that invented this tradition improved their dispute-resolution systems by moving from a system of unarticulated, semi-conscious custom to a body of explicit customary law memorized by tribal wisemen ?and eventually, written down.

たぶん、人数がふえてきて新メンバー全員の文化順応を行うのがだんだん難しくなってくるにつれて、ハッカー文化もなにかそれと似たようなことをする時期がきているんだろう
Perhaps, as our population rises and acculturation of all new members becomes more difficult, it is time for the hacker culture to do something analogous

――オープンソース・プロジェクトとのかかわりで生じる可能性のあるさまざまな紛争を解決するためのよい方法を、明文化したコードとして開発し、コミュニティの長老メンバーが紛争調停を行うような、仲裁の伝統をつくりあげることだ。
?to develop written codes of good practice for resolving the various sorts of disputes that can arise in connection with open-source projects, and a tradition of arbitration in which senior members of the community may be asked to mediate disputes. 

この論文での分析から、これまで内在的だったものを明文化するようなそういうコードの概略が、どんなものになるべきかが示唆される。
The analysis in this essay suggests the outlines of what such a code might look like, making explicit that which was previously implicit.

こういうコードは決して上から押しつけられるものではあり得ない。
No such codes could be imposed from above;

個別プロジェクトの創始者や所有者が、自主的に採用するものでなくてはならない。
they would have to be voluntarily adopted by the founders or owners of individual projects.

そしてそれは完全に硬直したものでもありえない。
Nor could they be completely rigid,

文化にかかる圧力はだんだん変わるはずだからだ。
as the pressures on the culture are likely to change over time.

最後に、こういうコードが実行上うまく機能するには、ハッカー部族の幅広い合意を反映したものでなくてはならない。 
Finally, for enforcement of such codes to work, they would have to reflect a broad consensus of the hacker tribe.

ぼくはそういうコードを書く作業を始めていて、ぼくが住んでいる小さな町の名前をとってそれを仮に「マルヴァーン綱領」と名付けている。
I have begun work on such a code, tentatively titled the "Malvern Protocol" after the little town where I live.

もしこの論文の一般的な分析がそれなりに広く受け入れられたら、マルヴァーン綱領を紛争解決コードの見本として公開する。
If the general analysis in this paper becomes sufficiently widely accepted, I will make the Malvern Protocol publicly available as a model code for dispute resolution.

このコードの批評や開発に興味のある向きや、単にそれがいいか悪いかフィードバックをくれたい人は、電子メールでぼくにコンタクトしてほしい。
Parties interested in critiquing and developing this code, or just offering feedback on whether they think it's a good idea or not, are invited to contact me by email.


20　これからの研究の課題
Questions for Further Research

ハッカー文化（そしてぼく）は、優しい独裁者モデルに従わない大規模プロジェクトについてあまりよく理解できていない。
The culture's (and my own) understanding of large projects that don't follow a benevolent-dictator model is weak.

そういうプロジェクトの多くは失敗する。
Most such projects fail.

でも少数はものすごい大成功をおさめて重要になる（Perl、Apache、KDE）。
A few become spectacularly successful and important (Perl, Apache, KDE). 

ちがいがどこにあるのか、だれにもわかっていない。
Nobody really understands where the difference lies.

（そういうプロジェクトはそれぞれsui generis（まったく独自のもの）であり、たまたまそのメンバーのグループ力学に基づいて成功したりしなかったりするのだというのが、漠然とただよう理解だけれど、でもこれって本当なんだろうか、それともある集団がとるべき複製可能な戦略があるんだろうか？）
There's a vague sense abroad that each such project is sui generis and stands or falls on the group dynamic of its particular members, but is this true or are there replicable strategies that a group can follow?


21　書誌、注、謝辞

[Miller] Miller, William Ian; Bloodtaking and Peacemaking: Feud, Law, and Society in Saga Iceland.; University of Chicago Press 1990, ISBN 0-226-52680-1.
[Miller] Miller, William Ian; Bloodtaking and Peacemaking: Feud, Law, and Society in Saga Iceland; University of Chicago Press 1990, ISBN 0-226-52680-1. 

アイスランドの民会法についてのすばらしい研究。
A fascinating study of Icelandic folkmoot law,

ロック式所有権理論がどれほど古いかを明らかにするとともに、慣習が慣習法へとひきつがれ、そして成文法になる歴史的なプロセスの後半を描いている。
which both illuminates the ancestry of the Lockean theory of property and describes the later stages of a historical process by which custom passed into customary law and thence to written law.

[Mal] Malaclypse the Younger; Principia Discordia, or How I Found Goddess and What I Did To Her When I Found Her.; Loompanics, ISBN 1-55950-040-9.
[Mal] Malaclypse the Younger; Principia Discordia, or How I Found Goddess and What I Did To Her When I Found Her; Loompanics, ISBN 1-55950-040-9. 

すごく軽い冗談口てんこもりだけれど、
There is much enlightening silliness to be found in Discordianism.

そのなかの「SNAFU 原理」なる代物は、上意下達方式がなぜスケーラビリティが低いのかについて、なかなか深遠な分析を提供している。
Amidst it, the `SNAFU principle' provides a rather trenchant analysis of why command hierarchies don't scale well.

ブラウズ可能な HTML 版あり。
There's a browseable HTML version.

[BCT] J. Barkow, L. Cosmides, and J. Tooby (Eds.); The Adapted Mind: Evolutionary Psychology and the Generation of Culture. New York: Oxford University Press 1992.
[BCT] J. Barkow, L. Cosmides, and J. Tooby (Eds.); The Adapted Mind: Evolutionary Psychology and the Generation of Culture. New York: Oxford University Press 1992. 

進化心理学へのすぐれた入門書。
An excellent introduction to evolutionary psychology.

論文のいくつかは、ぼくが論じている3種類の文化タイプ（上意下達、交換、贈与）と直接かかわるもので、こういうパターンが人間の心理のかなり深いところにまで食い込んでいるらしいことを示唆している。
Some of the papers bear directly on the three cultural types I discuss (command/exchange/gift), suggesting that these patterns are wired into the human psyche fairly deep.

[MHG] Goldhaber, Michael K.; The Attention Economy and the Net
[MHG] Goldhaber, Michael K.; The Attention Economy and the Net.

この論文はバージョン 1.7 のあとで発見した。
I discovered this paper after my version 1.7.

一目でわかる欠点もある（Goldhaber は、関心というものには経済的な理由づけが適用できないと論じているけれど、この議論はよく読むと成り立たない）
It has obvious flaws (Goldhaber's argument for the inapplicability of economic reasoning to attention does not bear close examination), 

けれど、それでも Goldhaber は組織行動における関心集めの役割についておもしろくて鋭いことを言っている。
but Goldhaber nevertheless has funny and perceptive things to say about the role of attention-seeking in organizing behavior. 

ぼくが論じた名声や仲間内の評判は、かれが言う意味での関心の特殊例として見ると有益。 
The prestige or peer repute I have discussed can fruitfully be viewed as a particular case of attention in his sense.

[HH] ハッカー社会（hackerdom）の歴史については、ここにまとめてみた（邦訳はこちら）。
[HH] I have summarized the history of the hacker culture in A Brief History Of Hackerdom.

これをほんとうにきちんと説明してくれる本は未だに書かれていないし、それを書くのはたぶんぼくではないと思う。 
The book that will explain it really well remains to be written, probably not by me.

[N]「ノウアスフィア（noosphere）」は哲学特有の専門用語で、
[N] The term `noosphere' is an obscure term of art in philosophy.

「ノウ・ア・スフィア」が正しい発音
It is pronounced KNOW-uh-sfee
(two o-sounds, one long and stressed, one short and unstressed tending towards schwa). 


（訳注：ティヤール・ド・シャルダンが使っていて、日本ではヌースフィアと書かれることが多い。
この翻訳では著者にしたがった）。


表記について死ぬほど厳密でありたいなら、正しくは二番目の o の上に点々がつく。
If one is being excruciatingly correct about one's orthography, the term is properly spelled with a diaeresis over the second `o' to mark it as a separate vowel.

もっと詳しく言えば：
In more detail;

この「人間の思考の圏域」を表す用語は、ギリシャ語の「nous」、つまり精神や意志、息などを指す単語から生まれている。
this term for ``the sphere of human thought'' derives from the Greek `noos' meaning `mind', `intelligence', or `perception'. 

E. LeRoy が Les origines humaines et l'evolution de l'intelligence (Paris 1928)で発明したことばだ。
It was invented by E. LeRoy in Les origines humaines et l'evolution de l'intelligence (Paris 1928).

これはさらに、ロシアの生物学者にして先駆的なエコロジスト Vladimir Ivanovich Vernadsky (1863-1945)によって広められ、さらにはイエズス会の古生物学者兼哲学者ピエール・ティヤール・ド・シャルダン Pierre Teilhard de Chardin (1881-1955)がこれを広めた。
It was popularized first by the Russian biologist and pioneering ecologist Vladimir Ivanovich Vernadsky, (1863?1945), then by the Jesuit paleontologist/philosopher Pierre Teilhard de Chardin (1881?1955).

いまではこの用語は主に、人間が将来純粋な精神体へと進化して神様と融合するというかれの理論と結びついて考えられている。
It is with Teilhard de Chardin's theory of future human evolution to a form of pure mind culminating in union with the Godhead that the term is now primarily associated.

[DF]現代経済学で最も雄弁かつわかりやすい論者デビッド・フリードマンは、知的財産法の歴史と論理について見事な概論を書いている。
[DF] David Friedman, one of the most lucid and accessible thinkers in contemporary economics, has written an excellent outline of the history and logic of intellectual-property law.

この問題に関心ある人すべての出発点としておすすめする。
I recommend it as a starting point to anyone interested in these issues.

[SP]　Linux と BSD の世界とのおもしろいちがいの一つは、Linux のカーネル（および関連する OS の中心的なユーティリティ）は一度も分裂していないけれど、BSD は少なくとも 3 回は分裂しているということだ。
[BSD] One interesting difference between the Linux and BSD worlds is that the Linux kernel (and associated OS core utilities) have never forked, but BSD's has, at least three times. 

これがおもしろいのは、BSD グループの社会構造は中央集権化されていて、権限をはっきりと線引きすることで分裂を防ぐようになっているのに、中央集権化されていなくて不定型なLinuxコミュニティは分裂を防ぐような手段をまったく講じていないからだ。
What makes this interesting is that the social structure of the BSD groups is centralized in a way intended to define clear lines of authority and to prevent forking, while the decentralized and amorphous Linux community takes no such measures. 

開発をなるべく開放したほうが、いちばん分裂しにくくなるとしか思えない！
It appears that the projects which open up development the most actually have the least tendency to fork!

Henry Spencer <henry@spsystems.net> の考えによれば、一般に政治的なシステムの安定性は、その政治プロセスへの参入障壁の高さに反比例するのではないか、とのこと。
Henry Spencer <henry@spsystems.net> suggests that, in general, the stability of a political system is inversely proportional to the height of the entry barriers to its political process. 

かれの分析は、ここで引用するだけの価値がある：
His analysis is worth quoting here:

「比較的オープンな民主主義の大きな強みの一つは、ほとんどの潜在的革命家は自分の目的を達成するのに、システムを利用したほうがシステムを攻撃するよりも簡単だと判断する、ということだ。
One major strength of a relatively open democracy is that most potential revolutionaries find it easier to make progress toward their objectives by working via the system rather by attacking it. 

各種組織が協力して「敷居を上げて」、不満を持った小集団が自分の目標を多少なりとも達成するのをむずかしくすると、この強みはすぐに消えてしまう。
This strength is easily undermined if established parties act together to `raise the bar', making it more difficult for small dissatisfied groups to see some progress made toward their goals.

（同じような原理は経済でも見られる。
(A similar principle can be found in economics. 

開放市場では競合がいちばん激しく、さらに最高で最低価格の製品が得られるのがふつうだ。
Open markets have the strongest competition, and generally the best and cheapest products. 

このため、既存企業としては、新規参入をなるべくむずかしくするのがいちばん利益になる
Because of this, it's very much in the best interests of established companies to make market entry more difficult

――たとえば政府に対し、コンピュータに入念な RFI テストを義務づけさせたり、ポケットが深くない限り、複雑すぎて1から実装するのが実質的に不可能な「合意に基づく」規格を作ったりするわけだ。
?for example, by convincing governments to require elaborate RFI testing on computers, or by creating `consensus' standards which are so complex that they cannot be implemented effectively from scratch without large resources. 

参入障壁がいちばん強力な市場は、革命家、たとえばインターネットや、司法省対ベルシステムの独禁法裁判などからいちばん攻撃を受けやすい市場でもある。）
The markets with the strongest entry barriers are the ones that come under the strongest attack from revolutionaries, e.g. the Internet and the Justice Dept. vs. the Bell System.)

参入障壁の低いオープンなプロセスは、分離させるより、むしろ参加をうながす。
An open process with low entry barriers encourages participation rather than secession, 

分離による高いオーバーヘッドなしに成果が得られるからだ。
because one can get results without the high overheads of secession. 

その成果は、分離したら達成できるものほどはすごくないかもしれないけれど、必要コストは低いし、多くの人はこれをがまんできる範囲のトレードオフだと判断する。
The results may not be as impressive as what could be achieved by seceding, but they come at a lower price, and most people will consider that an acceptable tradeoff. 

（スペイン政府がフランコの反バスク法を廃止して、バスク地方に独自の学校と一定の自治権を与えたら、バスク独立運動のほとんどは一瞬で消えた。
(When the Spanish government revoked Franco's anti-Basque laws and offered the Basque provinces their own schools and limited local autonomy, most of the Basque Separatist movement evaporated almost overnight. 

それでは不十分だと固執したのは、ゴリゴリのマルクス主義者だけだった。）」 
Only the hard-core Marxists insisted that it wasn't good enough.)

[RP]非公式パッチについてはいくつか細かい点がある。
[RP] There are some subtleties about rogue patches.

まずこれは、「友好的なもの」と「敵対するもの」に分類できる。
One can divide them into `friendly' and `unfriendly' types.

「友好的」なパッチは管理者のコントロール下で、プロジェクトのソースコードの主流に織り込まれるように設計されている
A `friendly' patch is designed to be merged back into the project's main-line sources under the maintainer's control

（それが実際に織り込まれるかはまた別の話）。
(whether or not that merge actually happens); 

「敵対」パッチは、管理者の認めない方向にプロジェクトをねじまげようとするものだ。
an `unfriendly' one is intended to yank the project in a direction the maintainer doesn't approve.

一部のプロジェクト（とくに Linux カーネルそのもの）は友好パッチにはすごく甘くて、むしろベータテストの段階では、独自のパッケージを推奨したりさえする。
Some projects (notably the Linux kernel itself) are pretty relaxed about friendly patches and even encourage independent distribution of them as part of their beta-test phase.

一方の敵対パッチはオリジナルと張り合おうという決断を示すもので、深刻な事態となる。
An unfriendly patch, on the other hand, represents a decision to compete with the original and is a serious matter.

敵対パッチを大量に管理するようになると、プロジェクトはやがて分裂に向かうことが多い。 
Maintaining a whole raft of unfriendly patches tends to lead to forking.

[LW]ハッカーと海賊ソフト文化との対比がいかに示唆的かを指摘してくれた点で、Michael Funk <mwfunk@uncc.campus.mci.net>には感謝したい。
[LW] I am indebted to Michael Funk <mwfunk@uncc.campus.mci.net> for pointing out how instructive a contrast with hackers the pirate culture is.

Linus Wallejは、かれらの文化力学についてぼくとは異なる分析をポストしている
Linus Walleij has posted an analysis of their cultural dynamics that differs from mine

（かれらを希少性文化として描いている。
(describing them as a scarcity culture)

これは A Comment on `Warez D00dz' Culture (http://www.df.lth.se/~triad/papers/Raymond_D00dz.htmlを参照。
in A Comment on `Warez D00dz' Culture.

この対比は、長続きしないかもしれない。
The contrast may not last.

もとクラッカーのAndrej Brandt <andy@pilgrim.cs.net.pl> の見解によると、cracker/warez d00dz 文化は現在しぼみつつあって、いちばん優れた人材やリーダーたちは、オープンソースの世界に取り込まれているという。
Former cracker Andrej Brandt <andy@pilgrim.cs.net.pl> reports that he believes the cracker/warez d00dz culture is now withering away, with its brightest people and leaders assimilating to the open-source world.

この視点について独立した証拠としては、「Cult of the Dead Cow」というクラッカー集団が 1999 年 6 月に行った、前例のない行動がある。
Independent evidence for this view may be provided by a precedent-breaking July 1999 action of the cracker group calling itself `Cult of the Dead Cow'.

かれらは、Microsoft Windows のセキュリティを破るためのツールである「Back Orifice 2000」を GPL のもとで公開した。
They have released their `Back Orifice 2000' for breaking Microsoft Windows security tools under the GPL.

[HT] 進化論的にいえば、職人の衝動自体が（内面化された倫理と同じく）裏切りの高リスクとコストの結果かもしれない。
[HT] In evolutionary terms, the craftsman's urge itself may (like internalized ethics) be a result of the high risk and cost of deception. 

進化心理学者たちは、人間が社会的なだましを検出するのに特化した脳論理回路を持っているという証拠を得ている[BCT]。
Evolutionary psychologists have collected experimental evidence [BCT] that human beings have brain logic specialized for detecting social deceptions,

そして、われわれの先祖がインチキを検出する能力を持ったために選別されたのはなぜか、理解するのは容易だろう。
and it is fairly easy to see why our ancestors should have been selected for ability to detect cheating. 

だから、もしリスクもコストも高いけれど、メリットももたらすような性格の持ち主だという評判を得たければ、そういう性質があるふりをしてごまかすよりも、実際にそういう性質を身につけるほうが戦術的に優れているかも知れない
Therefore, if one wishes to have a reputation for personality traits that confer advantage but are risky or costly, it may actually be better tactics to actually have these traits than to fake them.

（「正直がいちばん」というやつだ）。
(``Honesty is the best policy'')

進化心理学者たちは、これで酒場のけんかのような行動も説明できるのでは、と言う。
Evolutionary psychologists have suggested that this explains behavior like barroom fights.

若い大人の男性の間では、「タフだ」という評判は社会的にも（そして現在のフェミニズムの栄養が強い風土にあってなお）性的にも有用なのだ。
Among younger adult male humans, having a reputation for toughness is both socially and (even in today's feminist-influenced climate) sexually useful. 

「タフさ」を詐称するのは、非常にリスクが高い。
Faking toughness, however, is extremely risky;

それがばれたときのマイナスの影響は、それを主張しなかった場合に比べてもっと悪い立場にその人物を追いやってしまう。
the negative result of being found out leaves one in a worse position than never having claimed the trait. 

この詐欺のコストはあまりに高いので、「タフさ」を内面化して、けんかで無理にそれを証明するために深刻なけがのリスクを負うほうが、最小効用の最大化（ミニマックス化）のためには有効なことさえある。
The cost of deception is so high that it is sometimes better minimaxing to internalize toughness and risk serious injury in a fight to prove it.

もっと議論にならない「正直さ」のような性向についても、似たような観察がなされている。
Parallel observations have been made about less controversial traits like honesty.

創造的な仕事の、主に瞑想にも似た見返りは過小評価してはならないけれど、職人の衝動というのは、おそらく部分的にはまさにこうした内面化からくるものなのだろう
Though the primary meditation-like rewards of creative work should not be underestimated, the craftsman's urge is probably at least in part just such an internalization 

（そこでは基本的な性向は、「面倒な仕事をこなす能力」といったようなものになる）。
(where the base trait is `capacity for painstaking work' or something similar).


Handicap theory may also be relevant. 
The peacock's gaudy tail and the stag's massive rack of antlers are sexy to females because they send a message about the health of the male 
(and, consequently, its fitness to sire healthy offspring). 
They say: "I am so vigorous that I can afford to waste a lot of energy on this extravagant display." 
Giving away source code, like owning a sports car, is very similar to such showy, wasteful finery - it's expense without obvious return, and makes the giver at least theoretically very sexy.


[MH] マスローのヒエラルキーと関連理論についての簡潔なまとめは、web上で読める。
[MH] A concise summary of Maslow's hierarchy and related theories is available on the Web at Maslow's Hierarchy of Needs


「Maslow's Hierarchy of Needs」（http://www.valdosta.peachnet.edu/~whuitt/psy702/regsys/maslow.html）


[DC] しかしながら、リーダーに謙虚さを求めるというのは、贈与文化、過剰文化のもっと一般的な性質なのかもしれない。
[DC] However, demanding humility from leaders may be a more general characteristic of gift or abundance cultures.

David Christie <dc@netscape.com> は、フィジーの周辺部の島を旅したときについてこう書いている:
David Christie <dc@netscape.com> reports on a trip through the outer islands of Fiji:

「フィジーの村長にも、あなたがオープンソースのリーダーについて述べたのと同じように、卑下する腰の低いリーダーシップのスタイルが観察されました。 
In Fijian village chiefs, we observed the same sort of self-deprecating, low-key leadership style that you attribute to open source project leaders.

[中略] 大いなる尊敬を集め、そしてフィジーにある限りの現実の力をすべて持っているのに、われわれが会った村長たちは本物の謙虚さを示し、しばしば自分たちの任務を聖人のように受け入れていました。
[...] Though accorded great respect and of course all of whatever actual power there is in Fiji, the chiefs we met demonstrated genuine humility and often a saint-like acceptance of their duty.

これは、村長というのが世襲だということを考えるとなおさら興味深いものです。
This is particularly interesting given that being chief is a hereditary role,

選出されるわけでもないし、人気投票で決まるのでもありません。
not an elected position or a popularity contest. 

どういうわけか、生まれついてのことで仲間に選ばれたわけでもないのに、文化そのものによって訓練されているらしいのです。」
Somehow they are trained to it by the culture itself, although they are born to it, not chosen by their peers.''

かれはさらに、このフィジーの村長に特有のスタイルは、協力を強制するのがむずかしいという事実からくるのだと思っていることを強調している。
He goes on to emphasize that he believes the characteristic style of Fijian chiefs springs from the difficulty of compelling cooperation:

村長は「大きなニンジンも、大きな棒も持っていない」わけだ。
a chief has ``no big carrot or big stick''.

[NO] 見ればすぐにわかることだが、うまくいったプロジェクトを創始した人のほうが、成功したプロジェクトのデバッグや援助で同じくらいの仕事をした人にくらべて、高い評判を獲得する。
[NO] As a matter of observable fact, people who found successful projects gather more prestige than people who do arguably equal amounts of work debugging and assisting with successful projects.

この論文のかつてのバージョンでは、次のような疑問を提示していた：
An earlier version of this paper asked

「これは比較できる作業の価値評価として合理的なものだろうか、それともぼくたちがここで示してきた無意識の領土モデルからくる二次的な副産物なんだろうか？」　
``Is this a rational valuation of comparative effort, or is it a second-order effect of the unconscious territorial model we have adduced here?''

何人かのコメントは、説得力ある、基本的には同じ理論を示唆してくれている。
Several respondents suggested persuasive and essentially equivalent theories.

以下の Ryan Waldron <rew@erebor.com> の分析がこの論点をうまく表現している：
The following analysis by Ryan Waldron <rew@erebor.com> puts the case well:

「ロック式土地理論の文脈では、新しい成功したプロジェクトを確立した人物は、本質的に新しい領土を開拓して、そこをほかの人たちが入植できるようにしたことになる。
In the context of the Lockean land theory, one who establishes a new and successful project has essentially discovered or opened up new territory on which others can homestead.

ほとんどの成功したプロジェクトでは、収益はだんだん減るというパターンがあるので、しばらくすると、プロジェクトへの貢献のクレジットは実に間が空いたものになってきて、後からの参加者には、十分な評価が蓄積しにくくなってしまう。
For most successful projects, there is a pattern of declining returns, so that after a while, the credit for contributions to a project has become so diffuse that it is hard for significant reputation to accrete to a late participant, 

その人がどんなに高質な仕事をしようとも。
regardless of the quality of his work.

たとえば、ぼくがこれからPerlを改善して、Larry や Tom や Randall などが達成した認知のごく一部でも獲得しようと思ったら、本当にすさまじくいい仕事をしなくてはならないだろう。
For instance, how good a job would I have to do making modifications to the perl code to have even a fraction of the recognition for my participation that Larry, Tom, Randall, and others have achieved?

でも、新しいプロジェクトが [だれか別の人によって] 明日にでも創始されたら、そしてぼくが初期の熱心な参加者になったら、そのうまくいったプロジェクトによって生じた尊敬の分け前をもらう能力は、早めに参加していたということによって大きく拡大する
However, if a new project is founded [by someone else] tomorrow, and I am an early and frequent participant in it, my ability to share in the respect generated by such a successful project is greatly enhanced by my early participation therein 

（貢献の中身が同程度だったとしても）。
(assuming similar quality of contributions).

たぶん、早めに Micro$oft 株を買った人と、後で投資した人の差に近いと思う。
I reckon it to be similar to those who invest in Microoft stock early and those who invest in it later.

みんな儲かるけれど、早めに買った人はもっと儲かる。
Everyone may profit, but early participants profit more. 

だからどこかの時点で、ぼくは既存の企業の株が絶えず値上がりするのに加わるよりは、新しい成功する IPO のほうに興味をおぼえるようになるはずだ。」
Therefore, at some point I will be more interested in a new and successful IPO than I will be in participating in the continual increase of an existing body of corporate stock.

Ryan Waldron のアナロジーはもっと拡張できる。
Ryan Waldron's analogy can be extended.

プロジェクトの創始者は、他の人に受け入れられるか、つかいものになるかもわからない新しいアイデアを、伝道師のように売り込まなくてはならない。
The project founder has to do a missionary sell of a new idea that may or may not be acceptable or of use to others. 

だから創始者は IPO リスクと似たよなものを負担することになる
Thus the founder incurs something analogous to an IPO risk

（自分の評判へのダメージの可能性として）。
(of possible damage to their reputation),

これは、仲間内である程度受け入れられたプロジェクトを手伝った人よりも、負担するリスクが大きい。
more so than others who assist with a project that has already garnered some acceptance by their peers.

創始者の見返りは、実際問題として助手たちが仕事をたくさんつぎ込んでいても、一定だ。
The founder's reward is consistent despite the fact that the assistants may be putting in more work in real terms.

これは交換経済におけるリスクと見返りの関係として楽に理解できる。
This is easily seen as analogous to the relationship between risk and rewards in an exchange economy.

他の評者たちの見解では、われわれの神経システムは、ちがいを認識するように調整されていて、安定状態には敏感ではない。
Other respondents have observed that our nervous system is tuned to perceive differences, not steady state. 

新しいプロジェクトの創造によって目的される革命的な変化は、したがってたえまない段階的な改善の集積効果より、ずっと認知されやすい。
The revolutionary change evidenced by the creation of a new project is therefore much more noticeable than the cumulative effect of constant incremental improvement. 

だから Linus は Linux の父として尊敬される。
Thus Linus is revered as the father of Linux, 

その他何千という貢献者たちによる貢献の純粋量は、Linus 一人の仕事なんかでは絶対に不可能なほど、OS の成功に貢献してはいても。
although the net effect of improvements by thousands of other contributors have done more to contribute to the success of the OS than one man's work ever could.

[HD] 「脱・共有化」（de-commoditizing）ということばは、「ハロウィーン文書」への言及。
[HD] The phrase ``de-commoditizing'' is a reference to the Halloween Documents

この文書でマイクロソフトは、顧客を収奪できるような独占的囲い込みを維持するための、いちばん有効な長期戦略として、この「脱共有化」を何のためらいもなく提案している。
in which Microsoft used ``de-commoditize'' quite frankly to refer to their most effective long-term strategy for maintaining an exploitative monopoly lock on customers.

[GNU]　フリーソフトウェア財団 (Free Software Foundation) の主ウェブサイトは、こうした研究の結果をまとめた記事を載せている。
[GNU] The Free Software Foundation's main website carries an article that summarizes the results of many of these studies.

本論での引用はそこから抜粋したものだ。 
The quotes in this essay are excerpted from there.


22　謝辞
Acknowledgements

Robert Lanphiir <robla@real.com> はエゴのない行動についての議論に大きく貢献してくれた。
Robert Lanphier <robla@real.com> contributed much to the discussion of egoless behavior.

Eric Kidd <eric.kidd@pobox.com> は、個人崇拝を避ける意味で謙虚さが大事であるという点を明確にしてくれた。
Eric Kidd <eric.kidd@pobox.com> highlighted the role of valuing humility in preventing cults of personality.

全世界的な影響についての章は、Daniel Burn <daniel@tsathoggua.lab.usyd.edu.au> からのコメントに触発された。
The section on global effects was inspired by comments from Daniel Burn <daniel@tsathoggua.lab.usyd.edu.au>. 

Mike Whitaker <mrw@entropic.co.uk> は文化への順応に関する議論の大筋の発想を与えてくれた。
Mike Whitaker <mrw@entropic.co.uk> inspired the main thread in the section on acculturation. 

Chris Phoenix <cphoenix@best.com> は、ハッカーたちは他のハッカーを追い落としても評判を高めることはできないという事実の重要性を指摘してくれた。
Chris Phoenix <cphoenix@best.com> pointed out the importance of the fact that hackers cannot gain reputation by doing other hackers down. 


A.J. Venter <JAVenter@africon.co.za> pointed out parallels with the medieval ideal of knighthood. 
Ian Lance Taylor <ian@airs.com> sent careful criticisms of the reputation-game model which motivated me to think through and explain my assumptions more clearly.


23　改訂履歴
この論文に書かれた内容については、あらゆる誤りや誤解をふくめてぼくが全責任を負うものである。
でも、ぼくはコメントやフィードバックを歓迎してきたし、それらを利用してこの論文をよりよいものにしてきた
――このプロセスは、どこか決まった時点で止めたりするつもりはない。


 [1998年4月10日] Web上でバージョン1.2を公開。 
Revision 1.210 April 1998esr
First published on the Web. 

 [1998年4月12日] バージョン1.3。
Revision 1.312 April 1998esr

誤植の訂正と、最初の一般コメント群への対応。
Typo fixes and responses to first round of public comments.

書誌の最初の4点。
First four items in bibliography.

匿名で寄せられた、評判インセンティブが職人自身も気づかないうちに機能しているという見解を加筆。
An anonymously contributed observation about reputation incentives operating even when the craftsman is unaware of them.

warez d00dzとの示唆的な対照性について加筆、「ソフトは自ら語るべきだ」との考えについての部分加筆、個人崇拝の回避に関する考えを加筆。
Added instructive contrasts with warez d00dz, material on the `software should speak for itself' premise, and observations on avoiding personality cults.

こうした変更の結果、「エゴの問題」の章が拡大して分裂。 
As a result of all these changes, the section on `The Problem of Ego' grew and fissioned. 

[1998年4月16日] バージョン1.7。
Revision 1.716 April 1998esr

「分野全体としての意義」についての章を追加。
New section on `Global implications'

ノウアスフィアの植民地化に関する歴史的トレンドを論じ、「カテゴリーキラー」現象について検討。
discusses historical tends in the colonization of the noosphere, and examines the `category-killer' phenomenon.

今後の研究課題を追加。 
Added another research question. 

[1998年4月27日] バージョン1.8。
Revision 1.827 April 1998esr

書誌にGoldhaberを追加。
Added Goldhaber to the bibliography.

Linux Expo予稿集に載るのはこのバージョン。 
This is the version that will go in the Linux Expo proceedings. 

[1998年5月26日] バージョン 1.9。
Revision 1.926 May 1998esr

Fare Rideau のノウアスフィア・エルゴスフィアの区別を加筆。
Incorporated Far・Rideau's noosphere/ergosphere distinction.

RMSの、自分は反商業主義ではないという主張を追加。
Incorporated RMS's assertion that he is not anticommercial. 

「文化適応とアカデミズム」についての章を追加（Ross J. Reedstrom、Eran Tromer、Allen MacInnes 他に感謝）。
New section on acculturation and academia (thanks to Ross J. Reedstrom, Eran Tromer, Allan McInnes, Mike Whitaker, and others).

謙虚さ（「エゴのない行動」）について加筆、Jerry Fass と Marsh Ray からのコメントに基づく。 
More about humility, (`egoless behavior') from Jerry Fass and Marsh Ray. 

[1998年7月11日] バージョン 1.10。
Revision 1.1011 July 1998esr

本人の示唆に基づき、Fare Rideau のコメントから名声ということばを除く。 
Remove Fare Rideau's reference to `fame' at his suggestion. 

[1998年11月21日] バージョン 1.14。
Revision 1.1421 November 1998esr

ちょっとした編集上の修正と古いリンクの訂正。 
Minor editorial and stale-link fixes. 

[1999年8月8日] 
Revision 1.2131 Aug 1999esr

O'Reilly の本用に大幅改訂。
Major revision for the O'Reilly book.

Michael Chastain からもらった、プロジェクト分裂のコストと非公式パッチのコストについてのアイデアを組み込む。
Incorporated some ideas about the costs of forking and rogue patches from Michael Chastain.

Thomas Gagne <tgagne@ix.netcom.com> は、「年功が勝つ」というのとデータベースのヒューリスティクスの類似性に気がついた。
Thomas Gagne (tgagne@ix.netcom.com) noticed the similarity between "seniority wins" and database heuristics.

Henry Spencer の政治とのアナロジー。
Henry Spencer's political analogy.

Ryan Waldron と El Howard <elhoward@hotmail.com> は、目新しさの価値について考えを出してくれた。
Ryan Waldron and El Howard (elhoward@hotmail.com) contributed thoughts on the value of novelty.

Thomas Bryan <tbryan@arlut.utexas.edu> は「抱き込んで拡張」に対するハッカーの嫌悪を説明してくれた。
Thomas Bryan (tbryan@arlut.utexas.edu) explained the hacker revulsion to ``embrace and extend''.

Darcy Horrocks は新しい章の「どれほどすばらしい贈り物？」の示唆を与えてくれた。
Darcy Horrocks inspired the new section ``How Fine A Gift?''

マスロー式価値のヒエラルキーとの関連についての新しい文章と、能力に対する攻撃に関するタブーについて加筆。 
Other new material on the connection to the Maslovian hierarcy of values, and the taboo against attacks on competence. 

（翻訳上のミスについて、白田秀彰氏<hideaki@leo.misc.hit-u.ac.jp>からご指摘をいただいた。
伏して感謝する――訳者記す）
